#include <iostream>

using namespace std;

int main()
{
	int x = 100;
	bool b = &x;

	cout << boolalpha << b << endl;

	b = nullptr;

	cout << boolalpha << b << endl;


}
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
	cout << typeid(10 > 5).name() << endl;
	cout << typeid('A').name() << endl;


}
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
	bool f1 = true;
	bool f2 = true;

	cout << f1 + f2 << endl;

}
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////


int main()
{
	int ptr;



	ptr = nullptr;  //gecersiz

}
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
#include <iostream>

enum Color { Blue, Green, Red, Yellow };

int main()
{
	//Color x = 3;   //C'de gecerli ama C++'da gecerli degil
	int x;

	//

	x = Green;  //Gecerli

	

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

enum class Color { Blue, Green, Red, Yellow }; //since C++11
enum Pos { Off, On, Hold, StandBy};

int main()
{

	

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


struct A {
	int x, y;
	struct B {
		int a, b;
	};
};

int main()
{
	//struct B y; //C'de gecerli C++'da gecersiz
	A::B x;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

int main()
{
	int x(0);  //C++, not C 
	int y{ x }; //since C++11, not C, not C++98
	int a[]{ 1, 5, 7, 9 }; //since C++11, not C, not C++98
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
4 KASIM 2017 CUMARTESÝ
#include <iostream>

using namespace std;

int main()
{
	int x, y;
	double d;

	cout << "iki tamsayi bir gercek sayi lutfen : ";
	cin >> x >> y >> d;
	cout << "x = " << x << " y = " << y << " d = " << d << endl;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
	int x = 10;
	int &r = x;
	int y = 67;

	r = 30;
	cout << "x = " << x << endl;
	r = y;
	cout << "x = " << x << endl;


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

int main()
{
	int x = 10;
	int &r = x;
	int *ptr = &r;

	*ptr = 99;
	++r;

	cout << "x = " << x << endl;

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

int main()
{
	int x = 10;
	int &r1 = x;
	int &r2 = r1;
	int &r3 = r2;

	++r1, ++r2, ++r3;

	cout << "x = " << x << endl;

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
	int x = 10;
	int &r;  //ill formed... references must be initialized



}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;

int main()
{
	int x = 10;
	int *ptr = &x;
	int &r = *ptr;

	++r;

	cout << "x = " << x << endl;


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

void foo(int &r)
{
	//
}

void func(int *ptr)
{
	foo(*ptr);
}

int main()
{
	int x = 10;

	func(&x);

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
	int a[] = { 1, 4, 5, 6, 2 };
	int &r = a[2];

	++r;

	for (auto i : a)
		cout << i << " ";

	cout << endl;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
	int a[] = { 1, 4, 5, 6, 2 };
	int &r = a[2];

	++r;

	for (auto i : a)
		cout << i << " ";

	cout << endl;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
	int x = 10;
	double &r = x;  //gecersiz
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


#include <iostream>

using namespace std;

int main()
{
	int a[5] = { 2, 4, 5, 8, 3 };
	int(&ra)[5] = a;

	for (int k = 0; k < 5; ++k)
		cout << ra[k] << " ";

	cout << "\n";

	cout << sizeof(ra) / sizeof(*ra) << endl;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
	int x = 10;
	int y = 34;
	int *ptr = &x;
	int *&r = ptr;

	r = &y;
	++*r;

	cout << "y = " << y << endl;
	
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

void func(int &r)
{
	r = 768;
}

//void func(int *const ptr)
//{
//	*ptr = 768;
//}

int main()
{
	int x = 456;

	func(x);

	cout << "x = " << x << endl;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

void iswap_r(int &r1, int &r2)
{
	int temp = r1;
	r1 = r2;
	r2 = temp;
}

void iswap_p(int *p1, int *p2)
{
	int temp = *p1;
	*p1 = *p2;
	*p2 = temp;
}

int main()
{
	int x = 10, y = 56;

	iswap_p(&x, &y);

	cout << "x = " << x << "  y = " << y << endl;

	iswap_r(x, y);

	cout << "x = " << x << "  y = " << y << endl;

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

void g(int r1, int r2)
{
	r1 += r2;
}

void iswap(int &r1, int &r2)
{
	int temp = r1;
	r1 = r2;
	r2 = temp;
}

void func(int &r1, int &r2)
{
	iswap(r1, r2);
	++r1, --r2;
	g(r1, r2);
}

int main()
{
	int x = 10, y = 6;
		 
	func(x, y);

	cout << "x = " << x << "  y = " << y << endl;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;


void func(int &x);
void foo(const int &r);


int main()
{

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


int main()
{
	int x = 10;
	const int &r = x;

	++r; //gecersiz
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;


int main()
{
	//const int x = 10;
	//int &r = x;  //gecersiz

	const int x = 10;
	int *ptr = &x; //gecersiz
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;


int main()
{
	const int x = 10;
	const int &r = x;  

	const int y = 10;
	const int *ptr = &y; 
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;


int main()
{
	int x = 10;

	const int &r = x;

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////




#include <iostream>

using namespace std;


int main()
{
	const int &r = 10;

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;

void func(int &r);

int main()
{
	func(10);  //gecersiz
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;

void func(const int &r);

int main()
{
	func(10);  //gecerlþi
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
	//const int &r = 10;
	const int gn = 10; //derleyicinin oluþturduðu
	const int &r = gn; //geçici nesne
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;

int g = 10;

int *foo()
{
	return &g;
}

int main()
{
	*foo() = 99;

	cout << "g = " << g << endl;
	++*foo();
	cout << "g = " << g << endl;



}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int g = 10;

int &foo()
{
	return g;
}

int main()
{
	foo() = 99;

	cout << "g = " << g << endl;
	++foo();
	cout << "g = " << g << endl;



}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

//asla ve asla otomatik ömürlü bir nesne ile geri dönmemeli
int &func()
{
	cout << "bir tamsayi girin : ";
	int x;
	cin >> x;

	return x;
}


int main()
{

	cout << func() << endl;

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


#include <iostream>

using namespace std;

int &func()
{
	cout << "bir tamsayi girin : ";
	static int x;
	cin >> x;

	return x;
}


int main()
{
	int &r1 = func();
	int &r2 = func();
	int &r3 = func();

	cout << r1 << endl;
	cout << r2 << endl;
	cout << r3 << endl;


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;


int main()
{
	int x = 10;
	double dval = 4.5;

	cout << x << "  " << dval << endl;
	
	cout.operator<<(x).operator<<("  ").operator<<(dval).operator<<(endl);

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

struct Date {
	int md, mm, my;
};

Date &setDate(Date &r, int d, int m, int y)
{
	r.md = d;
	r.mm = m;
	r.my = y;

	return r;
}

void display(const Date &r)
{
	cout << r.md << "/" << r.mm << "/" << r.my << endl;
}

int main()
{
	Date x;

	display(setDate(x, 10, 5, 2017));
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

struct Data {
	int x, y, z;
};

int main()
{
	Data mydata;
	Data &r = mydata;

	r.x = 10;
	//
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;

struct Data {
	int x, y, z;
};

int main()
{
	Data mydata;
	Data *ptr = &mydata;
	Data *&r = ptr;

	r->x = 10;
	//
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;

int main()
{
	int *ptr;
	///
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;

int main()
{
	int x = 10;
	int y = 20;
	int z = 30;

	int *ptr = &x;
	//
	ptr = &y;

	///
	ptr = &z;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

int main()
{
	int x = 10;
	int y = 20;
	int z = 30;

	int *const ptr = &x;
	int &r = x;
	//
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

//pointer array
//elemanlarý pointer olan dizi

int main()
{
	int *p[100];
	//
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;


int main()
{
	int x = 0, y = 0, z = 0;
	int *p[] = { &x, &y, &z };
	//int &ra[] = { x, y, z }; //???

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;


int main()
{
	int x = 10;
	int *p = &x;
	int **ptr = &p;
	//


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;


int main()
{
	int x = 10;
	int &r = x;
	int &rr = r;
	//


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
	int x = 10;

	cout << "&x  = " << &x << endl;
	int *ptr = &x;
	cout << "ptr = " << ptr << endl;
	int &r = x;
	cout << "&r  = " << &r << endl;


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

//since C++11

//  move semantics
//	perfect forwarding

int main()
{
	int &&r = 10;  //r value references
	//

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int *foo();

int main()
{
	auto x = foo();  //x is int *
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


int main()
{
	auto x = 0;  //x is int;
	auto y = 0L;  //y is long
	auto z = 0.F;  //z is float
	auto t = 0.;  //t is double


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;


int main()
{
	auto x;  //ilk deðer vermek mecburi

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>
#include <list>
#include <forward_list>
#include <string>


using namespace std;

list<pair<list<int>::iterator, forward_list<string>>> foo();

int main()
{
	list<pair<list<int>::iterator, forward_list<string>>> x = foo();
	auto y = foo();
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>



using namespace std;

vector<pair<list<int>::iterator, forward_list<string>>> foo();

int main()
{
	//list<pair<list<int>::iterator, forward_list<string>>> x = foo();
	auto y = foo();
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>

using namespace std;

int main()
{
	//int x = 10;
	int x(10);
	//int &r = x;
	int &r(x);


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>

using namespace std;

//uniform initializer
//since C++11

int main()
{
	int x{ 10 };
	int a[]{ 1, 5, 65, 7 };
	int &r{ x };
	int *ptr{ &x };
	//
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>

using namespace std;

//uniform initializer
//since C++11
//narrowing conversion

int main()
{
	double dval = 5.6;
	int x = dval;
	int y(x);



}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>

using namespace std;


int main()
{
	double dval = 5.6;
	
	//tekbiçimli ilk deðer verme (uniform initializer) kullanýlmasý durumunda 
	//daraltýcý dönüþüm (narrowing conversion) sentaks hatasý

	int y(dval);  //gecerli
	int z = dval;  //gecerli
	int x{ dval };  //gecersiz



}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>

using namespace std;

//arman.h
void func(int, int, int = 10);
//void func(int a, intb, int c = 10);

//arman.cpp
void func(int x, int y, int z)
{
	cout << "x = " << x << "\n";
	cout << "y = " << y << "\n";
	cout << "z = " << z << "\n";
	cout << "******************************************\n";

}

//necati.cpp
//#include "arman.h"

int main()
{
	func(100, 500, 700);
	func(100, 500);


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>

using namespace std;

//arman.h
void func(int, int = 20, int); //gecersiz


//arman.cpp
void func(int x, int y, int z)
{
	cout << "x = " << x << "\n";
	cout << "y = " << y << "\n";
	cout << "z = " << z << "\n";
	cout << "******************************************\n";

}

//necati.cpp
//#include "arman.h"

int main()
{
	func(100, 500, 700);
	func(100, 500);


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>

using namespace std;

//arman.h
void func(int, int = 20, int = 30); //gecerli


//arman.cpp
void func(int x, int y, int z)
{
	cout << "x = " << x << "\n";
	cout << "y = " << y << "\n";
	cout << "z = " << z << "\n";
	cout << "******************************************\n";

}

//necati.cpp
//#include "arman.h"

int main()
{
	func(100, 500, 700);  //100 500 700
	func(100, 500); //100 500 30
	func(100);  //100 20 30


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>

using namespace std;

void func(int x,  const char *pEr = "error!"); 



int main()
{
	func(10);   //func(10, "error!");
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>

using namespace std;

int g = 56;

void func(int x, int &r = g);



int main()
{
	func(10);   //func(10, g);
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


#include <iostream>
#include <list>
#include <forward_list>
#include <string>
#include <vector>

using namespace std;

int f1(int x = 10, int y = 20);
int f2(int a, int b = f1());

int main()
{
	f2(23);
	//
	//f2(23, f1(10, 20));
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



//onder.h
void func(int x, int y);

//sinan.cpp
//#include "onder.h"
void func(int, int = 0);

int main()
{
	func(987); //func(987, 0);
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



//onder.h
void func(int x, int y);

//sinan.cpp
//#include "onder.h"
void func(int, int = 0);

int main()
{
	func(987); //func(987, 0);
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



//onder.h
void func(int x, int y, int z = 10);

//sinan.cpp
//#include "onder.h"
void func(int, int = 20, int);

int main()
{
	func(1);  //func(1, 20, 10);

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////




//onder.h
void func(int x, int y, int z = 10);

//sinan.cpp
//#include "onder.h"
void func(int, int = 20, int = 10); //gecersiz

int main()
{
	func(1);  //func(1, 20, 10);

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////





//onder.h
void func(int x, int y, int z);

//sinan.cpp
void myfunc(int x, int z, int y = 10)
{
	func(x, y, z);
}


int main()
{

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <stdlib.h>

//necati.h
char *mitoa(char *buffer, int val, int radix = 10);

int main()
{

}


///necati.cpp
char *mitoa(char *buffer, int val, int radix)
{
	return itoa(val, buffer, radix);
}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <time.h>


using namespace std;

//date.h
void processDate(int d = 0, int m = 0, int y = 0);



int main()
{
	processDate();
	processDate(15);
	processDate(15, 2);
	processDate(15, 2, 1989);
}


void processDate(int d, int m, int y)
{
	if (y == 0) {
		time_t timer = time(nullptr);
		tm *tp = localtime(&timer);
		y = tp->tm_year + 1900;
		if (m == 0) {
			m = tp->tm_mon + 1;
			if (d == 0)
				d = tp->tm_mday;
		}
	}
	////
	cout << d << "/" << m << "/" << y << "\n";
}



////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <time.h>

using namespace std;

int &foo(int &r)
{
	++r;

	return r;
}

int main()
{
	int a = 10;

	foo(a) += 45;

	cout << "a = " << a << endl;
}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <time.h>

using namespace std;

int *foo(int *p)
{
	++*p;

	return p;
}

int main()
{
	int a = 10;

	*foo(&a) += 45;

	cout << "a = " << a << endl;
}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <time.h>

using namespace std;

int g = 10;

int foo()
{
	return g;
}

int main()
{
	int &&x = foo();

	x = 789;

	cout << "g = " << g << endl;

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>
#include <time.h>

using namespace std;

//function redeclaration
void func(int);
void func(int);


int main()
{

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <time.h>

using namespace std;

//function overloading olsa isi derleyici 
//iki ayri iþlev tanýmýna izin verirdi
void func(const int)
{

}

void func(int)
{

}


int main()
{

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>
#include <time.h>

using namespace std;

//yeniden bildirim (yükleme deðil)
void func(int *const ptr);
void func(int *ptr);



int main()
{

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>
#include <time.h>

using namespace std;

typedef int Word;
typedef int Neco;

//yeniden bildirimleri
//typedef bildirimleri ayný türe farklý isim oluþturur
//typedef bildirimleri için geçerlidir. Makrolar buna dahýl deðildir.

void func(Word);
void func(Neco);




int main()
{

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>
#include <time.h>

using namespace std;


int func(int, int);
//gecersiz
double func(int, int);


int main()
{

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <time.h>

using namespace std;

//overloading
void func(int);
double func(int &);


int main()
{

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <time.h>

using namespace std;

//overloading  (const overloading)

void func(int *);
double func(const int *);


int main()
{

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>
#include <time.h>

using namespace std;

//overloading  (const overloading)

void func(int &r);
double func(const int &r);


int main()
{

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <time.h>

using namespace std;

//overloading
void func(int x = 10);
void func();


int main()
{

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>
#include <time.h>

using namespace std;

//overloading (3 overloads)
void func(int x, int y = 10);
void func(int y);
void func(int, ...);



int main()
{

}


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

function overload resolution

#include <iostream>
#include <time.h>

using namespace std;

//no match error
void func(int);
void func(int, int);
void func(int, double);


int main()
{
	func();
}

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>
#include <time.h>

using namespace std;

int func();  //1
int func(int);  //2
int func(int *, int); //3
int func(double, int); //4
int func(double, int, int = 34); //5


int main()
{
	func(10, 56);
}

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


#include <iostream>
#include <time.h>

using namespace std;

struct Data {
	Data();
	Data(int);
};

int main()
{
	Data x;

	x = 5;
}

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

exact match

1) L value to R value transformation	
2) const conversion
3) array to pointer conversion
4) function to pointer conversion

promotion
1) integral promotion
2) float to double promotion

standard conversion
-------------------------------------------
void func(int);   //1
void func(double);  //2


int main()
{
	func(13u);
}
-------------------------------------------
void func(int);   //1
void func(double);  //2


int main()
{
	func(1.3f);  //2
}
-------------------------------------------
void func(int x);
void func(bool x);



int main()
{
	func(10 > 5);  
}
-------------------------------------------
void func(int);
void func(long double x);


int main()
{
	func(4.);
}


#include <iostream>
#include <time.h>

using namespace std;

void func(int x);
void func(int &x);


int main()
{
	int y = 10;

	func(y);  //c.a.h
}

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>
#include <time.h>

using namespace std;

void func(int x);
void func(int &x);


int main()
{
	func(10);

}

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>

using namespace std;

//const overloading
void func(int *ptr)  //1
void func(const int *ptr); //2

int main()
{
	const int x = 10;
	int y = 45;

	func(&x);  //2
	func(&y);  //1
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

//const overloading
void func(int &r)  //1
void func(const int &r); //2


int main()
{
	const int x = 10;
	int y = 45;

	func(x); //2
	func(y);  //1
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

void func(int x)  //1
void func(double); //2


int main()
{
	int y = 45;

	func(y); //1
	func((double) y); //2


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

void func(int x = 20)  //1
void func()  //2

int main()
{
	func();  //c.a.h

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

void func(int, int, int);
void func(int, double, int);
void func(float, double, int);
void func(int, double, long);


func(4.5f, 3.4, 12U)

(double)i1 / i2

(long)i1 * i2

ival = (int)dval;


#include <iostream>

using namespace std;

char *strchr(const char *p, int c)
{
	while (*p) {
		if (*p == c)
			return (char *)p;
		++p;
	}
	if (c == '\0')
		return (char *)p;

	return NULL;
}

int main()
{

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

enum Color {White, Gray, Red, Brown};
int main()
{
	srand(static_cast<unsigned>(time(nullptr)));
	int i1, i2;
	cin >> i1 >> i2;

	double dval = static_cast<double>(i1) / i2;

	float f = static_cast<float>(dval);
	//
	Color c = static_cast<Color>(i1);
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

enum Color {White, Gray, Red, Brown};
int main()
{
	srand(static_cast<unsigned>(time(nullptr)));
	int i1, i2;
	cin >> i1 >> i2;

	double dval = static_cast<double>(i1) / i2;

	float f = static_cast<float>(dval);
	//
	Color c = static_cast<Color>(i1)
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


#include <iostream>

using namespace std;


char *strchr(const char *p, int c)
{
	while (*p) {
		if (*p == c)
			return const_cast<char *>(p);
		++p;
	}
	if (c == '\0')
		return const_cast<char *>(p);

	return nullptr;
}


int main()
{

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


struct Date {
	int d, m, y;
};



int main()
{
	Date mydate{ 4, 6, 1987 };
	//
	char *p = reinterpret_cast<char *>(&mydate);
	///
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

const int *func();

int main()
{
	auto p1 = const_cast<char *>(reinterpret_cast<const char *>(func()));
	auto p2 = reinterpret_cast<char *>(const_cast<int *>(func()));

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <string>
#include "nutility.h"

using namespace std;


int main()
{
	int a[] = { 2, 65, 67, 7, 8, 4 };

	int b[asize(a)];

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <cmath>
#include "nutility.h"

using namespace std;

int func();

int main()
{
	//constexpr int x = func();  //gecerli degil
	const int x = func();
	constexpr int y = 45;   //gecerli
	int a[x] = { 0 };
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



constexpr int square(int a)
{
	return a * a;
}

int main()
{
	int x = 20;

	constexpr int y = square(x);  //gecersiz

}



#include <iostream>
#include <cmath>
#include "nutility.h"

using namespace std;

int main()
{
	const int x = 10;
	constexpr int y = x;

	//++x;  gecersiz
	//++y;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <cmath>
#include "nutility.h"

using namespace std;


int main()
{
	int x = 10;
	const int *ptr = &x;
	constexpr const int *p = ptr;
	

}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////



#include <iostream>
#include <cmath>
#include "nutility.h"

using namespace std;



int main()
{
	int x = 10;

	constexpr int *ptr = &x;  //gecersiz  &x ifadesi constant expression degil
	


}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////





///data.h

class Data {
	int mx;  //data member
	void func();  //member function
	typedef int Word;  //type member
};


void foo(int);  //global function  - free function

//////////////////////////////////////////////////////////////
a) isim nokta operatörünün sað operandý olarak kullanýlmýþ ise
b) isim ok operatörünün sað operandý olarak kullanýlmýþ ise
c) isim binary :: operatörünün sað operand olarak kullanýlmýþ ise

scope resolution op.

söz konusu isim sadece ve sadece class scope'ta aranýr.

//////////////////////////////////////////////////////////////

x.y		Eðer x bir sýnýf türünden nesne ise, 
burada y x'in ait olduðý sýnýfta aranacak

ptr->y	Eðer ptr bir sýnýf türünden adres ise
burada y ismi ptr'nin ait olduðu sýnýfta aranacak 

Myclass::x  Eðer Myclass bir sýnýfýn ismi ise x Bu sýnýfta aranacak.




class Data {
	//
public:
	//
protected:
	//
};
////////////////////////////////////////////////
class Data {
	//private
public:
	//public
protected:
	//protected
public:
	//public
};
////////////////////////////////////////////////






class Data {
	int mx, my;
public:
	void func();

};
////////////////////////////////////////////////




class Data {
public:
	void func();
private:
	int mx, my;
};
////////////////////////////////////////////////




class Data {
	int mx;
public:
	double mx; //gecersiz.. ayni scope'da birismi birden fazla varliga veremeyiz

};
////////////////////////////////////////////////




class Data {
	int mx;
public:
};
////////////////////////////////////////////////

int main()
{
	Data mydata;

	int x = mydata.mx;
	//Error	C2248	'Data::mx': cannot access private member declared in class 'Data'	YENIC++KURSU	c : \users\egitmen\documents\visual studio 2015\projects\yenic++kursu\yenic++kursu\main.cpp	14


}




class Data {
	void func();
protected:
	void g();
public:
	void foo();
};

int main()
{
	Data x;

	x.foo();
	//x.func();  //gecersiz
	//x.g();  //gecersiz
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>

//non-static data member
//static data member

class Data {
	int mx, my, mz;
	static int msa;
	static int msb;
	static int msc;
	static int msd;

};

///client.cpp

using namespace std;
int main()
{
	cout << "sizeof(Data) = " << sizeof(Data) << endl;
	

}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>

//non-static data member
//static data member

class Data {
	int mx, my, mz;
	static int msa;
	static int msb;
	static int msc;
	static int msd;

};

///client.cpp

using namespace std;
int main()
{
	cout << "sizeof(Data) = " << sizeof(Data) << endl;
	

}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


class Date {
	int md, mm, my;
public:
	void set(int d, int m, int y);
	void set(const char *p);  //function overloading

};



int main()
{
	return 0;
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


class Date {
	int md, mm, my;
	void set(int d, int m, int y);
public:
	void set(const char *p);  //function overloading
};



int main()
{
	return 0;
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


/// data.h
class Data {
	int mx, my, mz;
public:
	void set(int x, int y, int z);
};
///////////////////////////

//data.cpp

int mx(int);


void Data::set(int x, int y, int z)
{
	::mx(mx);
}


int main()
{
	return 0;
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


/// data.h
class Data {
	int mx, my, mz;
public:
	void set(int x, int y, int z);
	void func(int x);
};
///////////////////////////


void Data::set(int x, int y, int z)
{
	func(x);
	Data::func(x);
}


int main()
{
	Data mydata;

	mydata.set(10, 20, 30;)
	return 0;
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


/// data.h
class Data {
	int mx, my, mz;
public:
	void set(int x, int y, int z);
	void func(int x);
};
///////////////////////////

void func(int, int);

void Data::set(int x, int y, int z)
{
	//gecersiz func(10, 20);
	::func(x, y);
	::func(mx, my);
}


int main()
{
	Data mydata;

	mydata.set(10, 20, 30;)
	return 0;
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

/// data.h
class Data {
	int mx, my, mz;
public:
	void set(int x, int y, int z);
};
///////////////////////////

void set(int, int);

void Data::set(int x, int y, int z)
{
	set(x, y)// fonksiyonun kendi ismi olmasý hiç bir þey ifade etmez. Burada da member function çaðýrýlmaya çalýþýp argüman sayýsýndan dolayý hata verir.

}


int main()
{
	Data mydata;

	mydata.set(10, 20, 30;)
	return 0;
}


#include <iostream>


class Myclass {
public:
	void func(int);
	//void func(int);  //member functions cannot be redeclared gecersiz

};

int main()
{

	return 0;
}



////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

class Myclass {
	void func(int);
public:
	void func(int, int);
};

int main()
{
	Myclass m;

	m.func(10);

	return 0;
}



#include <iostream>


class Myclass {
	void func(int);
public:
	void func(int, int);
};

int main()
{
	Myclass m;

	//function overload resolution acces control'den daha önce yapýlýr

	m.func(213);

	return 0;
}



////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <ioostream>

class Data{
	int mx, my,mz;

public:
	void set(int x,int y, int z);
	void func(int x, int y);
};

Data gData;
void Data::set(int x,int y, int z){
	mx = x;
	Data data1;

	data1.mx = 45; // geçerli sýnýfýn member function'ýnda sadece çaðýrýlan nesne için deðil, ayrýca yerel de yada global de tanýtýlmýþ ayný türden bir nesne için private bölüme eriþim vardýr.
	gData.mx = 45; // geçerli 
}

int main(){

return 0;
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

12 KASIM PAZAR

///myclass.cpp
#define   PUBLIC
#define   PRIVATE
#define   PROTECTED


PRIVATE void Myclass::func(int x)
{
	//
}

#include <iostream>


//myclass.h


class Myclass {
	int mx;
public:
	void func() const;
	void foo();

};

///cpp
void Myclass::func()const
{
	mx = 45;  //gecersiz
}
	
void Myclass::foo()
{
	mx = 45;  //gecerli
}


int main()
{


}



////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


//myclass.h


class Myclass {
	int mx;
public:
	void func();
};


int main()
{
	const Myclass m1;
	Myclass m2;


	//m1.func();  //gecersiz
	m2.func();


}



////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

#include <iostream>


//myclass.h


class Myclass {
	int mx;
public:
	void func()const;
};


int main()
{
	const Myclass m1;
	Myclass m2;

	m1.func();  //gecerli
	m2.func();  //gecerli

}



////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


//myclass.h


void func(int *p);  //1
void func(const int *p); //2


int main()
{
	int x = 10;
	const int y = 56;

	func(&x);   //1
	func(&y);   //2


}



////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


//myclass.h


void func(int &r);  //1
void func(const int &r); //2


int main()
{
	int x = 10;
	const int y = 56;

	func(x);   //1
	func(y);   //2


}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

#include <iostream>


//myclass.h

class Myclass {
public:
	void func();  //1
	void func()const; //2

};

int main()
{
	Myclass m;
	const Myclass cm;

	m.func(); //1
	cm.func(); //2

}



////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////


class Data {
///
public:
	void func();
	void cfoo()const;
};


void Data::func()
{
	//
	cfoo();
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

class Data {
///
public:
	void func();
	void cfoo()const;
};


void Data::cfoo()const
{
	//
	func(); //error
}
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
class Data {
///
public:
	void func()const;
	void cfoo()const;
};


void Data::cfoo()const
{
	//
	func(); 
}

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////

class A {
public:
	void func();
	void func()const;
};


void A::func()
{
	func();
}


#include <iostream>


//myclass.h

class A {
public:
	void func();
	void func()const;
};


void A::func()
{
	func(); //recursive call
}




////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


//myclass.h

class A {
public:
	void func();
	void func()const;
};


void A::func()const
{
	func();  //recursive call
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


//myclass.h

class A {
	int mx, my;
public:
	void func();
};

using namespace std;

void A::func()
{
	int mx = 20;

	this->mx = 30; //mx in class
	A::mx = 40;  //mx in class
}


int main()
{

}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


//myclass.h

class A {
	int mx, my;
public:
	void func();
	void foo();
};

using namespace std;

void A::func()
{
	this->mx = 23;
	this->foo();
}


int main()
{

}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


//myclass.h

class Myclass {
	int mx, my;
public:
	Myclass &func()
	{
		///
		return *this;
	}
	void foo();
};

using namespace std;



int main()
{
	Myclass m;

	m.func().foo();
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


//myclass.h

class Myclass {
	int mx, my;
public:
	void func();
};

using namespace std;


void f1(Myclass *ptr);
void f2(Myclass &r);

Myclass gm;

void Myclass::func()
{
	f1(this);
	f2(*this);
	//gm = *this;
	*this = gm;
}



int main()
{
	Myclass m;

	m.func();
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
#include <iostream>


//myclass.h

class Myclass {
	int mx, my;
public:
	void func()const;
};

using namespace std;


void f1(Myclass *ptr);
void f2(Myclass &r);
void f3(const Myclass *ptr);
void f4(const Myclass &r);


Myclass gm;

void Myclass::func()const
{
	//f1(this); gecersiz
	//f2(*this); //gecersiz
	f3(this); //gecerli
	f4(*this); //gecerli

}



int main()
{
	Myclass m;

	m.func();
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
void Myclass::func(Myclass *const this)
{
}

void Myclass::func(const Myclass *const this)const
{
}


#include <iostream>

class Date {
	int md, mm, my;
	mutable int call_cnt = 0;
public:
	void display()const;
};

void Date::display()const
{
	++call_cnt;
}


int main()
{
}

////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////

int square(int x)
{
	return x * x;
}

--------------
--------------
--------------
--------------
--------------
--------------

BAÞLIK DOSYASINDA KOD OLMAZ BÝLDÝRÝMLER OLUR DERLER AMA
BUNU 3 ÖNEMLÝ ÝSTÝSNASI VAR c++'DA

inline functions
function templates
constexpr functions



///date.h
class Date {
public:
	int getMonthDay()const
	{
		return md;  //Burada isim arama class scope'un her yerinde yapýlýr
	}
private:
	int md, mx, my;
};


////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
 


 data members
 member functions
	const member functions
	const overloading
 access control
 mutable
 this keyword
 consexpr
 inline functions

 SPECIAL MEMBER FUNCTIONS
 (ÖZEL ÜYE ÝÞLEVLER)

constructor
	default constructor
destructor
copy constructor
	copy assignment function

C++11
move constructor
move assignment funnction

 - dynamic objects
 - new / delete operators


 class Fighter {
 public:
	Fighter(int, int, int);
 
 };

 --------------------------------------------------------------
 Bir sýnýf nesnesini hayata getiren iþlev sýnýfýn kurucu iþlevidir.
 (constructor) ctor
 Bir sýnýf nesnesi constructor kodunun runtime'da çalýþmasý bittikten sonra
 hayata gelmiþ kabul edilir.

 Bir sýnýfýn kurucu iþlevi sýnýfýn ismi ile ayný isimli iþlevdir.
 Sýnýflarýn kurucu iþlevleri geri dönüþ deðeri kavramýna sahip olmayan 
 iþlevlerdir.

 C++'da kurucu iþlev sýnýfýn static iþlevi olamaz
 non-static member function olmak zorunda

 Kurucu iþlev sýnýfýn const üye iþlevi olamaz
 Kurucu iþlevler herhangi bir parametrik yapýda olabilir.

 Sýnýfýn kurucu iþlevleri sýnýfýn diðer üye iþlevleri gibi yüklenebilirler (overload edilebilirler)
 Bir sýnýfýn kurucu iþlevleri sýnýfýn public, private ya da protected iþlevleri olabilir.
 (Ancak çok büyük çoðunlukla public olacaklar.)

 Sýnýflarýn kurucu iþlevleri (diðer üye iþlevlerden farklý olarak) isimleriyle
 yani nokta ya da ok iþleciyle çaðrýlamazlar.

 Bir sýnýfýn
 a) parametresi olmayan
 b) parametresi olan ancak tüm parametreleri varsayýlan argüman alan kurucu iþlevine (ya da iþlevlerine)
 varsayýlan kurucu iþlev  (default constructor);
 Argüman gönderilmeden çaðýrýlabilecek kurucu iþlevler.

 Eðer bir sýnýf için programcý bir  ctor yazmaz ise
 derleyici söz konusu sýnýf için
 a) nonstatic
 b) public
 c) inline bir ctor kodu yazar.

 Nerede, ne zaman, ne þekilde bir nesne hayata gelmiþ ise
 mutlaka bir constructor çaðrýlmýþtýr.


 class Data {
 public:
	Data(int);
	Data(double);
	Data(const char *);
	///
 };

 #include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
		std::cout << "this   = " << this << std::endl;
	}
};

Myclass g;

int main()
{
	using namespace std;
	std::cout << "main basladi" << std::endl;
	cout << "&g = " << &g << endl;
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};


class Data{
public:
	Data()
	{
		std::cout << "Data::Data()" << std::endl;
	}
};


Myclass g;
Data gdata;

int main()
{
	using namespace std;
	std::cout << "main basladi" << std::endl;
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

void func()
{
	cout << "func cagrildi" << endl;
	Myclass m;
	getchar();
	cout << "func devam ediyor" << endl;
}

int main()
{
	cout << "main basladi" << endl;
	func();
	cout << "main devam ediyor " << endl;
	func();

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

void func()
{
	Myclass m;
}

int main()
{
	for (int k = 0; k < 20; ++k)
		func();
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

int main()
{
	for (int k = 0; k < 20; ++k) {
		Myclass m;
		cout << "dongunun " << ++k << ". turu\n";
	}
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

int main()
{
	int cnt = 0;

	for (int k = 0; k < 20; ++k) {
		Myclass m;
		cout << "dongunun " << ++cnt << ". turu\n";
	}
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
18 KASIM 2017 CUMARTESÝ

#include <iostream>

using namespace std;

class Neco {
public:
	Neco(int);
	Neco();

};

int main()
{
	Neco n;
	n.Neco(12); //gecersiz


}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

//ismail.h

inline void func();
void f1(int);
void f2(int);
void f2(int, int);
void f3(int);


#include "ismail.hpp"



#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

void func()
{
	static int cnt = 0;

	cout << "func " << ++cnt << ". kez cagrildi" << endl;
	static Myclass m;
	///
}

int main()
{
	func();
	func();
	func();
	func();
	func();

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

void func()
{
	static int cnt = 0;

	cout << "func " << ++cnt << ". kez cagrildi" << endl;
	Myclass m;
	///
}

int main()
{
	func();
	func();
	func();
	func();
	func();

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
Farklý modüllerde tanýmlanmýþ statik ömürlü sýnýf nesnelerinin 
hayata gelme sýrasýna iliþkin dilin kurallarýnýn bir belirleyiciliði yoktur.

#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

void func()
{
	static int cnt = 0;

	cout << "func " << ++cnt << ". kez cagrildi" << endl;
	Myclass m;
	///
}

int main()
{
	func();
	func();
	func();
	func();
	func();

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

int main()
{
	cout << "main basladi" << endl;

	if (0)
		Myclass m;

	cout << "main devam ediyor" << endl;

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
 #include <iostream>

class Myclass {
	int x, y, z, t;
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

int main()
{
	Myclass a[10];

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
	int x, y, z, t;
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
		std::cout << "this = " << this << std::endl;
	}
};

using namespace std;

int main()
{
	Myclass a[10];

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
	int x, y, z, t;
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

int main()
{
	Myclass m;
	Myclass *p1 = &m;

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
	int x, y, z, t;
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

int main()
{
	Myclass m1;
	cout << "necoooooo\n";
	Myclass &m2 = m1;
	Myclass &m3 = m1;
	Myclass &m4 = m1;

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass(int)
	{
		std::cout << "Myclass::Myclass(int)" << std::endl;
	}
};

using namespace std;

int main()
{
	Myclass m1; //gecersiz

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

int main()
{
	Myclass m1();  // function declaration
	//declares function m1 returning Myclass

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

int main()
{
	//since C++ uniform initializer
	//universal initializer

	Myclass m1{}; 
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()" << std::endl;
	}
};

using namespace std;

int main()
{
	//since C++ uniform initializer
	//universal initializer

	Myclass m1{}, m2{};
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>


using namespace std;

int main()
{
	double d = 3.4;

	int x = d;
	int y(d);
	int z{ d }; //C++11 gecersiz
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


class Myclass {
public:
	Myclass(int x) 
	{
		std::cout << "Myclass::Myclass(int)" << std::endl;
		std::cout << "x = " << x << std::endl;
	}
};

int main()
{
	Myclass m1(10);
	Myclass m2{ 20 };  //C++11
	Myclass m3 = 30;  //üzerinde daha konuþacaðýz.
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"


using namespace std;


class Myclass {
public:
	Myclass(int x) 
	{
		std::cout << "Myclass::Myclass(int)" << std::endl;
		std::cout << "x = " << x << std::endl;
	}

	Myclass(double x)
	{
		std::cout << "Myclass::Myclass(double)" << std::endl;
		std::cout << "x = " << x << std::endl;
	}

	Myclass(const char *p)
	{
		std::cout << "Myclass::Myclass(const char *)" << std::endl;
	}
};

int main()
{
	Myclass m1{ 13 };
	Myclass m2{ 1.3 };
	Myclass m3{ "benim adim Reza" };


}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

destructor

Bir sýnýfýn destructor (sonlandýrýcý iþlev) iþlevi

- Bir sýnýf nesnesinin hayatý bittiðinde çaðrýlýr.
- geri dönüþ deðeri kavramýna sahip deðildir.
- Sýnýfýn non-static üye iþlevi olmak zorunda (static üye iþlev olamaz)
- public/protected/private olabilir.
- Ýsmi sýnýfýn ismiyle aynýdýr. Ýsmin baþýnda ~ karakteri kullanýlýr.
- const member function olamaz. (sentaks hatasý)
- Parametresi olamaz. Sýnýfýn destructor'ý parametresi olmayan bir iþlev olmak zorunda.
- Varsayýlan arguman alamaz.
- overload edilemez. Yani bir sýnýfýn yalnýz ve yalnýz tek bir destructor iþlevi olabilir.

- ismiyle çaðrýlmasý sentaks hatasý deðildir. 
(ileride inceleyeceðimiz Tek bir durum dýþýnda hiç bir zaman destructor iþlevi ismiyle çaðýrmayýn!)

destructor özel bir üye iþlevdir.
Programcý bir sýnýf için bir destructor yazmaz ise, derleyici ilgili sýnýf için
non-static
public
inline 

bir destructor yazar.




//class Myclass {
//public:
//	
//};


class Myclass {
public:
	Myclass() {

	}
	~Myclass()
	{

	}
};
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"

using namespace std;

class Data {
public:
	Data()
	{
		std::cout << "constructor" << std::endl;
	}

	~Data()
	{
		std::cout << "destructor" << std::endl;
	}
};

using namespace std;

void func()
{
	cout << "func cagrildi" << endl;
	Data x;
}


int main()
{
	cout << "main basladi " << endl;
	func();
	cout << "main devam ediyor " << endl;

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"

using namespace std;

class Data {
public:
	Data()
	{
		std::cout << "constructor" << std::endl;
	}

	~Data()
	{
		std::cout << "destructor" << std::endl;
	}
};

using namespace std;

void func()
{
	cout << "func cagrildi" << endl;
	Data x;
}


int main()
{
	cout << "main basladi " << endl;
	func();
	func();
	func();
	func();

	cout << "main devam ediyor " << endl;

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"

using namespace std;

class Data {
public:
	Data()
	{
		std::cout << "constructor" << std::endl;
	}

	~Data()
	{
		std::cout << "destructor" << std::endl;
	}
};

using namespace std;


int main()
{
	cout << "main basladi " << endl;
	for (int k = 0; k < 10; ++k) {
		cout << "dongunun " << k + 1 << ". turu\n";
		Data x;
	}
	cout << "main devam ediyor " << endl;

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"

using namespace std;

class Data {
public:
	Data()
	{
		std::cout << "constructor" << std::endl;
	}

	~Data()
	{
		std::cout << "destructor" << std::endl;
	}
};

using namespace std;

void func()
{
	cout << "func cagrildi" << endl;
	static Data x;
}


int main()
{
	cout << "main basladi " << endl;
	func();
	cout << "main sonlaniyor " << endl;

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"

using namespace std;

class Data {
public:
	Data()
	{
		std::cout << "constructor" << std::endl;
	}

	~Data()
	{
		std::cout << "destructor" << std::endl;
	}
};

using namespace std;

void func()
{
	cout << "func cagrildi" << endl;
	static Data x;
}


int main()
{
	cout << "main basladi " << endl;
	func();
	func();
	func();
	func();
	cout << "main sonlaniyor " << endl;

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"

using namespace std;

class Data {
public:
	Data()
	{
		std::cout << "constructor" << std::endl;
	}

	~Data()
	{
		std::cout << "destructor" << std::endl;
	}
};

using namespace std;

void func()
{
	cout << "func cagrildi" << endl;
	static Data x;
}


int main()
{
	cout << "main basladi\n";
	Data a[5];
	cout << "main sona erdi\n";

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
Eðer hayatta 2 sýnýf nesnesi varsa kurucu iþlevi daha sonra çaðrýlan nesnenin
sonlandýrýcý iþlevi daha önce çaðrýlýr.

#include <iostream>
#include "nutility.h"

using namespace std;

class Data {
	int a, b, c, d;
public:
	Data()
	{
		std::cout << "constructor this = " << this << std::endl;
	}

	~Data()
	{
		std::cout << "destructor this = " << this << std::endl;

	}
};

using namespace std;



int main()
{
	Data x, y;

	cout << "&x = " << &x << endl;
	cout << "&y = " << &y << endl;


}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"

using namespace std;

class Data {
	int a, b, c, d;
public:
	Data()
	{
		std::cout << "constructor this = " << this << std::endl;
	}

	~Data()
	{
		std::cout << "destructor this = " << this << std::endl;

	}
};

using namespace std;



int main()
{
	Data a[4];


}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"

using namespace std;

class Data {
	int a, b, c, d;
public:
	Data()
	{
		std::cout << "constructor this = " << this << std::endl;
	}

	~Data()
	{
		std::cout << "destructor this = " << this << std::endl;

	}
};

using namespace std;


int main()
{

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"

using namespace std;

class Data {
	int a, b, c, d;
public:
	void f1();
	void f2();
	void f3();
	void f4();
	void f5();
	void f6();

};

using namespace std;


int main()
{
	cout << "sizeof(Data) = " << sizeof(Data) << endl;
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

C++ dilinde dinamik ömürlü nesneler operatör kullanýmý ile
hayata getirilirler ve yine operatör kullanýmý ile bunlarýn hayatlarý
sonlandýrýlýr.

new operatörleri
delete operatörleri
---------------------------------

new Fighter

(static_cast<Fighter *>(operator new(sizeof(Fighter))))->Fighter();


void *operator new(size_t n);
void *malloc(size_t n);

#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		std::cout << "this = " << this << sl;
	}
};

using namespace std;

int main()
{
	////
	cout << "main devam ediyor 1 : " << endl;

	Fighter *p = new Fighter;
	cout << "p = " << p << endl;

	cout << "main devam ediyor 2 : " << endl;

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		std::cout << "this = " << this << sl;
	}
};

using namespace std;

int main()
{
	////
	cout << "main devam ediyor 1 : " << endl;

	Fighter *p = new Fighter;
	cout << "p = " << p << endl;

	cout << "main devam ediyor 2 : " << endl;

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		std::cout << "this = " << this << sl;
	}
};

using namespace std;

//raw pointer
//smart pointer

int main()
{
	////
	cout << "main devam ediyor 1 : " << endl;

	Fighter *p = new Fighter;
	cout << "p = " << p << endl;

	cout << "main devam ediyor 2 : " << endl;

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		std::cout << "this = " << this << sl;
	}
	void kill();
};

using namespace std;


int main()
{
	Fighter *p1 = new Fighter;
	Fighter *p2(new Fighter);
	Fighter *p3{ new Fighter };

	Fighter *p4 = new Fighter();
	Fighter *p5 = new Fighter{};

	p1->kill();

}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		std::cout << "this = " << this << sl;
	}
	void kill();
};

using namespace std;


int main()
{
	Fighter &f = *new Fighter;
	//
	f.kill();

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		std::cout << "this = " << this << sl;
	}
	int getAge()const;
	void shoot();

};

using namespace std;


int main()
{
	auto p = new Fighter;
	///

	if (p->getAge() > 18)
		p->shoot();
	/////

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		cout << "tonlarca kaynak bu nesneye baglandi" << endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		cout << "tonlarca kaynak geri verildi " << endl;
		std::cout << "this = " << this << sl;
	}
	int getAge()const
	{
		return 25;
	}
	void shoot()
	{
		std::cout << "ates ates ates" << std::endl;
	}

};

using namespace std;


int main()
{
	auto p = new Fighter;
	///

	if (p->getAge() > 18)
		p->shoot();
	/////

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		cout << "tonlarca kaynak bu nesneye baglandi" << endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		cout << "tonlarca kaynak geri verildi " << endl;
		std::cout << "this = " << this << sl;
	}
	int getAge()const
	{
		return 25;
	}
	void shoot()
	{
		std::cout << "ates ates ates" << std::endl;
	}

};

using namespace std;


int main()
{
	cout << "main basladi\n";
	if (1) {
		Fighter x;
		///
	}
	cout << "main devam ediyor\n";

	

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

19 KASIM PAZAR	

void free(void *vp);
void operator delete(void *vp);



delete p;

p->~Fighter();
operator delete(p);



int main(int argc, char **argv)
{
	///////
	int operator = *argv[2];
	//

}


#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		cout << "tonlarca kaynak bu nesneye baglandi" << endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		cout << "tonlarca kaynak geri verildi " << endl;
		std::cout << "this = " << this << sl;
	}
	int getAge()const
	{
		return 25;
	}
	void shoot()
	{
		std::cout << "ates ates ates" << std::endl;
	}

};

using namespace std;


int main()
{
	string s1 = "Aykut";

	if (operator==(s1,"Mustafa"))
		cout << "dogru" << endl;

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		cout << "tonlarca kaynak bu nesneye baglandi" << endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		cout << "tonlarca kaynak bu nesneye baglandi" << endl;

		std::cout << "this = " << this << sl;
	}
	int getAge()const
	{
		return 25;
	}
	void shoot()
	{
		std::cout << "ates ates ates" << std::endl;
	}

};

using namespace std;


int main()
{
	int n;

	cout << "kac tamsayi : ";
	cin >> n;

	int *pd = static_cast<int *>(operator new(n * sizeof(int)));

	for (int i = 0; i < n; ++i)
		pd[i] = rand() % 10;

	///
	for (int i = 0; i < n; ++i)
		cout << pd[i] << "  ";

	cout << endl;

	operator delete(pd);

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter()
	{
		std::cout << "Fighter default ctor" << std::endl;
		cout << "tonlarca kaynak bu nesneye baglandi" << endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		cout << "tonlarca kaynak bu nesneye baglandi" << endl;

		std::cout << "this = " << this << sl;
	}
	int getAge()const
	{
		return 25;
	}
	void shoot()
	{
		std::cout << "ates ates ates" << std::endl;
	}

};

using namespace std;


int main()
{
	auto p = new Fighter;
	///

	if (p->getAge() > 18)
		p->shoot();
	/////
	cout << "p = " << p << endl;
	delete p;
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Fighter {
	int a, b, c, d;
public:
	Fighter(int age)
	{
		std::cout << "Fighter default ctor" << std::endl;
		cout << "tonlarca kaynak bu nesneye baglandi" << endl;
		std::cout << "this = " << this << sl;
	}

	~Fighter()
	{
		std::cout << "Fighter destructor" << std::endl;
		cout << "tonlarca kaynak bu nesneye baglandi" << endl;

		std::cout << "this = " << this << sl;
	}
	int getAge()const
	{
		return 25;
	}
	void shoot()
	{
		std::cout << "ates ates ates" << std::endl;
	}

};

using namespace std;


int main()
{
	auto p1 = new Fighter(45);
	auto p2 = new Fighter{23};
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Data {
	int mx, my;
public:
	Data();
	void display()const;
};

//data.cpp

Data::Data() : mx(10), my(20)
{
	std::cout << "Data::Data()" << std::endl;
}

void Data::display()const
{
	std::cout << "mx = " << mx << "\n";
	std::cout << "my = " << my << "\n";

}


int main()
{
	Data mydata;

	mydata.display();


}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Data {
	int mx, my;
public:
	Data(int x, int y);
	void display()const;
};

//data.cpp

Data::Data(int x, int y) : mx(x), my(y)
{
	std::cout << "Data::Data()" << std::endl;
}

void Data::display()const
{
	std::cout << "mx = " << mx << "\n";
	std::cout << "my = " << my << "\n";

}


int main()
{
	Data mydata(34, 67);

	mydata.display();


}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

#include "nutility.h"

using namespace std;

class Data {
	int &r;
public:
	Data(int &x) : r(x)  //mil sentaksý zorunlu
	{
	}
};


int main()
{
	int ival = 34;

	Data x(ival);

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <iterator>
#include <list>



#include "nutility.h"

using namespace std;


class Triangle{
	double md1, md2, md3;
public:
	Triangle(double d1, double d2, double d3) : md2{d2}, md3{d3}, md1{d1} {}
};

//ogelerin hayata gelme sýrasý sýnýf içindeki bildirim sýrasý

int main()
{
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>



#include "nutility.h"

using namespace std;


class Name{
	char *mp;
	size_t mlen;
public:
	//yanlis rte
	Name(const char *p) : mlen{ strlen(p)}, mp{ new char[mlen + 1 ] }
	{
		strcpy(mp, p);
	}

	~Name()
	{
		delete[]mp;
	}

	void display()const
	{
		std::cout << "(" << mp << ")\n";
	}
	size_t length()const
	{
		return mlen;
	}
	//
};


int main()
{
	Name myname{ "necati ergin" };

	myname.display();
	///
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>



#include "nutility.h"

using namespace std;


class Name{
	size_t mlen;
	char *mp;
public:
	Name(const char *p) : mlen{ strlen(p)}, mp{ new char[mlen + 1 ] }
	{
		strcpy(mp, p);
	}

	~Name()
	{
		delete[]mp;
	}

	void display()const
	{
		std::cout << "(" << mp << ")\n";
	}
	size_t length()const
	{
		return mlen;
	}
	//
};


int main()
{
	Name myname{ "necati ergin" };

	myname.display();
	///
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
//in class initializer C++11

#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>

#include "nutility.h"

using namespace std;


class Data {
	int mx{ 10 };
	int my;
public:
	Data(int a) : my{ a } {
		//
	}
};


int main()
{
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////


Fighter func()
{

	return f;
}

Eðer programcý bir sýnýf için copy constructor (kopyalayan kurucu iþlev)
yazmaz ise derleyici söz konusu sýnýf için
-non static
-public
-inline 

bir copy constructor yazar. Örneðin ismi Fighter olan sýnýf için derleyicinin
yazacaðý copy constructor'ýn parametrik yapýsý þu þekildedir:

class Fighter {
	int mx, my, mz;
public:
	Fighter(const Fighter &r) : mx{r.mx}, my{r.my}, mz{r.mz}
	{
	}

};


#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>

#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()\n";
		cout << "this     = " << this << endl;
	}

	Myclass(const Myclass &r)
	{
		std::cout << "Myclass::Myclass(const Myclass &r)\n";
		cout << "this     = " << this << endl;
		cout << "&r       = " << &r << sl;
	}
};

int main()
{
	Myclass x;
	cout << "&x    = " << &x << sl;
	Myclass y{ x };
	cout << "&y    = " << &y << sl;


}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>

#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()\n";
		cout << "this     = " << this << endl;
	}

	Myclass(const Myclass &r)
	{
		std::cout << "Myclass::Myclass(const Myclass &r)\n";
		cout << "this     = " << this << endl;
		cout << "&r       = " << &r << sl;
	}
};

void func(Myclass m)
{
	cout << "func cagrildi\n";
	cout << "&m   = " << &m << endl;
}

int main()
{
	Myclass x;
	func(x);
	getchar();
	cout << "&x    = " << &x << sl;


}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>

#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()\n";
		cout << "this     = " << this << endl;
	}

	Myclass(const Myclass &r)
	{
		std::cout << "Myclass::Myclass(const Myclass &r)\n";
		cout << "this     = " << this << endl;
		cout << "&r       = " << &r << sl;
	}
};

Myclass g;

Myclass func()
{
	cout << "func cagrildi\n";
	return g;
}

int main()
{
	cout << "main basladi\n";
	func();
	getchar();
	cout << "main devam ediyor\n";
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////


C C++ temel sentaks düzeyindeki farklýlýklar
referans semantiði
iþlevlerin varsayýlan argüman almasý
iþlev yüklemesi (function overloading)
tür dönüþtürme operatörleri
extern "C" bildirimi
auto (tanýþma)
constexpr (tanýþma)
range based for loop (tanýþma)
////
inline functions
sýnýflar
	members (öðeler)
		non-static data member
		static data member
		non static  member functions
		static  member functions
		inline member functions
		class scope
		:: operator
		name lookup
		const / non-const member functions
		const overloading
		.....
	uniform initializer
	special member functions
		RAII idiyomu 
		MIL sentaksý (member initialization list)
		constructor (default constructor)
		destructor (default constructor)
		copy constructor ------>
		mutable keyword
		dynamic objects (new / delete op.s)
			operator new
			operator delete iþlevleri
		vexing parse

class Myclass {
	T x;
	U y;
public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()\n";
		cout << "this     = " << this << endl;
	}

	Myclass(const Myclass &r)
	{
		std::cout << "Myclass::Myclass(const Myclass &r)\n";
		cout << "this     = " << this << endl;
		cout << "&r       = " << &r << sl;
	}
};




#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>

#include "nutility.h"

using namespace std;

class Myclass {

public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()\n";
		cout << "this     = " << this << endl;
	}

	Myclass(const Myclass &r)
	{
		std::cout << "Myclass::Myclass(const Myclass &r)\n";
		cout << "this     = " << this << endl;
		cout << "&r       = " << &r << sl;
	}
};

Myclass g;

Myclass func()
{
	cout << "func cagrildi\n";
	return g;
}

int main()
{
	cout << "main basladi\n";
	func();
	getchar();
	cout << "main devam ediyor\n";


}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>

#include "nutility.h"

using namespace std;

class Myclass {

public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()\n";
		cout << "this     = " << this << endl;
	}

	Myclass(const Myclass &r)
	{
		std::cout << "Myclass::Myclass(const Myclass &r)\n";
		cout << "this     = " << this << endl;
		cout << "&r       = " << &r << sl;
	}
};


int main()
{
	cout << "main basladi\n";
	Myclass x;
	Myclass y = x;
	cout << "&x = " << &x << endl;
	cout << "&y = " << &y << endl;

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>

#include "nutility.h"

using namespace std;

class Myclass {

public:
	Myclass()
	{
		std::cout << "Myclass::Myclass()\n";
		cout << "this     = " << this << endl;
	}

	Myclass(const Myclass &r)
	{
		std::cout << "Myclass::Myclass(const Myclass &r)\n";
		cout << "this     = " << this << endl;
		cout << "&r       = " << &r << sl;
	}
};

void foo(Myclass m)
{
	cout << "func cagrildi &m  = " << &m << endl;
}
int main()
{
	cout << "main basladi\n";
	Myclass x;
	foo(x);
	cout << "&x = " << &x << endl;

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>

#include "nutility.h"

using namespace std;


class Logger {
	FILE *mf;
public:
	Logger(const char *pfname)
	{
		mf = fopen(pfname, "w");
		////
	}
	~Logger()
	{
		fclose(mf);
		cout << "dosya kapatildi\n";
	}

	void log(const char *p)
	{
		fprintf(mf, "%s\n", p);
	}
};


int main()
{
	Logger log1{ "logneco.txt" };
	///
	log1.log("neco log verileri\n");

	if (1) {
		Logger log2{ log1 };
		log2.log("ahmet log verileri");
	}
	
	log1.log("neco baska bir log\n");  //RTE



}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>

#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		strcpy(mp, pa);	
	}

	~Address()
	{
		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

void func(Address a)
{
	std::cout << "func cagrildi\n";
	a.print();
	std::cout << "func sona erdi\n";
	getchar();
}

int main()
{
	Address a1{ "Necati Ergin Astoria Plaza Kat 27 Esentepe" };
	cout << a1.getlen() << endl;
	a1.print();
	func(a1);

	a1.print();
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		strcpy(mp, pa);	
	}

	~Address()
	{
		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

void func(Address a)
{
	std::cout << "func cagrildi\n";
	a.print();
	std::cout << "func sona erdi\n";
	getchar();
}

int main()
{
	//ostream os{ std::cout };
	unique_ptr<int> up1{ new int };
	//unique_ptr<int> up2(up1);

	/*Address a1{ "Necati Ergin Astoria Plaza Kat 27 Esentepe" };
	cout << a1.getlen() << endl;
	a1.print();
	func(a1);

	a1.print()*/;
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		strcpy(mp, pa);	
	}
	
	Address(const Address &r) : mlen{ r.mlen }, mp{ new char[mlen + 1] }
	{
		strcpy(mp, r.mp);
	}

	~Address()
	{
		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

void func(Address a)
{
	std::cout << "func cagrildi\n";
	a.print();
	std::cout << "func sona erdi\n";
	getchar();
}

int main()
{
	Address a1{ "Necati Ergin Astoria Plaza Kat 27 Esentepe" };
	cout << a1.getlen() << endl;
	a1.print();
	func(a1);

	a1.print();
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		strcpy(mp, pa);	
	}
	
	Address(const Address &r) : mlen{ r.mlen }, mp{ new char[mlen + 1] }
	{
		strcpy(mp, r.mp);
	}

	~Address()
	{
		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

void func(Address a)
{
	std::cout << "func cagrildi\n";
	a.print();
	std::cout << "func sona erdi\n";
	getchar();
}

int main()
{
	Address a1{ "Necati Ergin Astoria Plaza Kat 27 Esentepe" };
	cout << a1.getlen() << endl;
	a1.print();
	func(a1);

	a1.print();
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class NotCopy{
	NotCopy(const NotCopy &r);
public:
	NotCopy();

};


int main()
{
	NotCopy x;
	NotCopy y(x);  //gecersiz private cc


}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class NotCopy{
	NotCopy(const NotCopy &r);
public:
	NotCopy();
	void func(NotCopy &r)
	{
		NotCopy a;
		NotCopy b(a); //gecerli
		*this = r;  //gecerli
	}

};


int main()
{
	NotCopy x;
	//NotCopy y(x);  //gecersiz private cc
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

iþlevlerin default ve delete edilmesi

#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass() = default;  //since C++11
	Myclass(int);
	//
};

int main()
{


}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;


void func(float) = delete;		//1
void func(double);				//2
void func(long);				//3

int main()
{
	func(12.F);
	//Error	C2280	'void func(float)': attempting to reference a deleted function	YENIC++KURSU	C : \Users\egitmen\Documents\Visual Studio 2015\Projects\YENIC++KURSU\YENIC++KURSU\main.cpp	20


}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;


void func(float) = delete;		//1
void func(double);				//2
void func(long);				//3

int main()
{
	func(12.F);
	//Error	C2280	'void func(float)': attempting to reference a deleted function	YENIC++KURSU	C : \Users\egitmen\Documents\Visual Studio 2015\Projects\YENIC++KURSU\YENIC++KURSU\main.cpp	20


}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

template<typename T>
void func(T x) = delete;


void func(int x)
{
	cout << "islev sablonundan URETILMEYEN islev" << endl;
}

int main()
{
	func(10);
	func(2.9); //gecersiz

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class NotCopy{
	NotCopy(const NotCopy &r) = delete;
public:
	NotCopy();

	void func(NotCopy &r)
	{
		NotCopy a;
		NotCopy b(a);  //gecersiz
	}

};


int main()
{
	

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		strcpy(mp, pa);	
	}
	
	Address(const Address &r) : mlen{ r.mlen }, mp{ new char[mlen + 1] }
	{
		strcpy(mp, r.mp);
	}

	~Address()
	{
		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

void func(Address a)
{
	std::cout << "func cagrildi\n";
	a.print();
	std::cout << "func sona erdi\n";
	getchar();
}

int main()
{
	Address a1{ "Necati Ergin Astoria Plaza Kat 27 Esentepe" };
	a1.print();

	if (a1.getlen() > 10) {
		Address a2{ "Mustafa Dombay Tarlabasi Cad. Ufurukcu Sok. No 45." };
		a2.print();
		//a2 = a1;
		a2.operator=(a1);
		a2.print();
		getchar();
	}

	a1.print();
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////




class Myclass {
	T x;
	U y;
	M z;
	///
public:
	Myclass &operator=(const Myclass &r)
	{
		x = r.x;
		y = r.y;
		z = r.z;
		//...
		return *this;
	}


};

m1 = m2;


#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		strcpy(mp, pa);	
	}
	
	Address(const Address &r) : mlen{ r.mlen }, mp{ new char[mlen + 1] }
	{
		strcpy(mp, r.mp);
	}

	~Address()
	{
		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

void func(Address a)
{
	std::cout << "func cagrildi\n";
	a.print();
	std::cout << "func sona erdi\n";
	getchar();
}

int main()
{
	Address a1{ "Necati Ergin Astoria Plaza Kat 27 Esentepe" };
	a1.print();

	if (a1.getlen() > 10) {
		Address a2{ "Mustafa Dombay Tarlabasi Cad. Ufurukcu Sok. No 45." };
		a2.print();
		a2 = a1;
		//a2.operator=(a1);
		a2.print();
		getchar();
	}

	a1.print();
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		strcpy(mp, pa);	
	}
	
	Address(const Address &r) : mlen{ r.mlen }, mp{ new char[mlen + 1] }
	{
		strcpy(mp, r.mp);
	}

	Address &operator=(const Address &r)
	{
		delete[]mp;  //release resources
		mlen = r.mlen;
		mp = new char[mlen + 1];
		strcpy(mp, r.mp);

		return *this;
	}

	~Address()
	{
		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

void func(Address a)
{
	std::cout << "func cagrildi\n";
	a.print();
	std::cout << "func sona erdi\n";
	getchar();
}

int main()
{
	Address a1{ "Necati Ergin Astoria Plaza Kat 27 Esentepe" };
	a1.print();

	if (a1.getlen() > 10) {
		Address a2{ "Mustafa Dombay Tarlabasi Cad. Ufurukcu Sok. No 45." };
		a2.print();
		a2 = a1;
		//a2.operator=(a1);
		a2.print();
		getchar();
	}

	a1.print();
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		strcpy(mp, pa);	
	}
	
	Address(const Address &r) : mlen{ r.mlen }, mp{ new char[mlen + 1] }
	{
		strcpy(mp, r.mp);
	}

	Address &operator=(const Address &r)
	{
		if (this == &r)    //self assignment
			return *this;

		delete[]mp;  //release resources
		mlen = r.mlen;
		mp = new char[mlen + 1];
		strcpy(mp, r.mp);

		return *this;
	}

	~Address()
	{
		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

void func(Address a)
{
	std::cout << "func cagrildi\n";
	a.print();
	std::cout << "func sona erdi\n";
	getchar();
}

int main()
{
	Address a1{ "Necati Ergin Astoria Plaza Kat 27 Esentepe" };

	a1 = a1;  //self assignment

	a1.print();
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		strcpy(mp, pa);	
	}
	
	Address(const Address &r) : mlen{ r.mlen }, mp{ new char[mlen + 1] }
	{
		strcpy(mp, r.mp);
	}

	Address &operator=(const Address &r)
	{
		if (this == &r)    //self assignment
			return *this;

		delete[]mp;  //release resources
		mlen = r.mlen;
		mp = new char[mlen + 1];
		strcpy(mp, r.mp);

		return *this;
	}

	~Address()
	{
		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

void func(Address a)
{
	std::cout << "func cagrildi\n";
	a.print();
	std::cout << "func sona erdi\n";
	getchar();
}

int main()
{
	Address a1{ "Necati Ergin Astoria Plaza Kat 27 Esentepe" };

	a1 = a1;  //self assignment

	a1.print();
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		std::cout << "copy constructor" << std::endl;
		strcpy(mp, pa);	
	}
	
	Address(const Address &r) : mlen{ r.mlen }, mp{ new char[mlen + 1] }
	{
		std::cout << "parametreli ctor" << endl;
		strcpy(mp, r.mp);
	}

	Address &operator=(const Address &r)
	{
		std::cout << "assignment operator function" << std::endl;

		if (this == &r)    //self assignment
			return *this;

		delete[]mp;  //release resources
		mlen = r.mlen;
		mp = new char[mlen + 1];
		strcpy(mp, r.mp);

		return *this;
	}

	~Address()
	{
		std::cout << "destructor" << std::endl;

		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

int main()
{
	Address a1{ "Necati Ergin Astoria Plaza Kat 27 Esentepe" };

	Address a2 = a1;

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp { new char[mlen + 1]} 
	{
		std::cout << "parametreli constructor" << std::endl;
		strcpy(mp, pa);	
	}
	
	Address(const Address &r) : mlen{ r.mlen }, mp{ new char[mlen + 1] }
	{
		std::cout << "copy ctor" << endl;
		strcpy(mp, r.mp);
	}

	Address &operator=(const Address &r)
	{
		std::cout << "assignment operator function" << std::endl;

		if (this == &r)    //self assignment
			return *this;

		delete[]mp;  //release resources
		mlen = r.mlen;
		mp = new char[mlen + 1];
		strcpy(mp, r.mp);

		return *this;
	}

	~Address()
	{
		std::cout << "destructor" << std::endl;

		delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

Address func(Address x)
{
	//
	return x;
}

int main()
{
	Address a("kadikoy istanbul ");

	func(a);

}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Myclass {
	///
};

void func(Myclass &r)
{
	cout << "L Value Ref\n";
}

void func(Myclass &&r)
{
	cout << "R Value Ref\n";
}

int main()
{
	Myclass m;
	func(m);
	func(Myclass());
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Myclass {
	///
};

void func(Myclass &r)
{
	cout << "L Value Ref\n";
}

void func(Myclass &&r)
{
	cout << "R Value Ref\n";
}

Myclass foo();
Myclass &g();


int main()
{
	Myclass m;
	func(m);
	func(Myclass());
	func(foo());   //	Rvalue ref
	func(g());		//L value ref
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Myclass {
	///
};

void func(const Myclass &r)
{
	cout << "const L value Ref\n";
}

void func(Myclass &&r)
{
	cout << "R Value Ref\n";
}

int main()
{
	func(Myclass());
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>


#include "nutility.h"

using namespace std;

class Myclass {
	///
public:
	Myclass()
	{
		//
		cout << this << "adresindeki nesne icin kaynaklar edinildi\n";
	}

	Myclass(const Myclass &r)
	{
		cout << this << "adresindeki nesne icin kaynak edinidi\n" << &r << " adresindeki nesnenin kaynaklari kopyalandi" << endl;

	}

	Myclass(Myclass &&r)
	{
		cout << this << "adresindeki nesne icin \n" << &r << " adresindeki nesnenin kaynaklari calindi" << endl;
	}

	~Myclass()
	{
		//
		cout << this << "adresindeki nesne icin kaynaklar geri verildi\n";
	}

};


void func(Myclass x)
{

}

Myclass foo(Myclass x)
{

	return x;
}

int main()
{
	Myclass m;

	func(foo(m));
}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>
#include "nutility.h"

using namespace std;

class Address {
	size_t mlen;
	char *mp;
public:
	Address(const char *pa) : mlen{ strlen(pa) }, mp{ new char[mlen + 1] }
	{
		std::cout << "parametreli constructor" << std::endl;
		strcpy(mp, pa);
	}

	Address(const Address &r) : mlen{ r.mlen }, mp{ new char[mlen + 1] }
	{
		std::cout << "copy ctor" << endl;
		strcpy(mp, r.mp);
	}

	Address(Address &&r) : mlen{r.mlen}, mp{r.mp}  //Move ctor
	{
		r.mp = nullptr;
	}
	
	Address &operator=(Address &&r) //move assignment op.
	{
		std::cout << "move assignment operator function" << std::endl;

		if (this == &r)    //self assignment
			return *this;

		delete[]mp;
		mp = r.mp;
		r.mp = nullptr;
	}


	Address &operator=(const Address &r)
	{
		std::cout << "assignment operator function" << std::endl;

		if (this == &r)    //self assignment
			return *this;

		delete[]mp;  //release resources
		mlen = r.mlen;
		mp = new char[mlen + 1];
		strcpy(mp, r.mp);

		return *this;
	}

	~Address()
	{
		std::cout << "destructor" << std::endl;
		if (mp)
			delete[]mp;
	}

	void print()const
	{
		std::cout << "Adres = " << mp << endl;
	}
	size_t getlen()const
	{
		return mlen;
	}
	///
};

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
26 Kasým Pazar
#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>
#include <vector>
#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass() = default;
	Myclass(const Myclass &r); //copy ctor
	Myclass(Myclass &&r); //move ctor
	Myclass &operator=(const Myclass &r); //copy assignment
	Myclass &operator=(Myclass &&r); //move assignment
};

Myclass func();

int main()
{
	Myclass m1 = func();
	Myclass m2 = m1;
	Myclass m3;

	m3 = m2;
	m3 = func();


}


#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>
#include <vector>
#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass() = default;
	Myclass(const Myclass &r) {
		cout << "copy ctor\n";
	}
	Myclass(Myclass &&r) {
		cout << "move ctor\n";
	}
	Myclass &operator=(const Myclass &r); //copy assignment
	Myclass &operator=(Myclass &&r); //move assignment
};

int main()
{
	Myclass m1;

	Myclass m2 = move(m1);
}


#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>
#include <vector>
#include "nutility.h"

using namespace std;

//typedef int Word;

using Word = int;

int main()
{

}


#include <iostream>
#include <string>
#include <cstring>
#include <iterator>
#include <list>
#include <memory>
#include <vector>
#include "nutility.h"
using namespace std;

//typedef int(*Fcmp)(const char *, const char *);
using Fcmp = int(*)(const char *, const char *);

int main()
{

}


class Screen {
public:
	enum ScreenColor { White, Yellow, Gray, Magenta, Black };
	///
};

class Traffic {
public:
	enum TrafficLight { Yellow, Red, Green };
};

int main()
{


}


enum class ScreenColor { White, Yellow, Gray, Magenta, Black };
enum class TrafficColor { Red, Yellow, Green};

enum Status {Off, On, Hold, StandBy};

int main()
{
	ScreenColor color = ScreenColor::Yellow;
	TrafficColor tcolor = TrafficColor::Yellow;
	Status s = Status::Hold;

}


enum  class ScreenColor { White, Yellow, Gray, Magenta, Black };
enum class TrafficColor { Red, Yellow, Green};


int main()
{
	int c;

	//
	c = ScreenColor::White;  //gecersiz

}


///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
enum Color : unsigned int {Black, Blue, Purple, Green};

int main()
{
  return 0;
}


enum Color : int;


C'de R value exp. ancak C++'da Lvalue exp. olan ifadeler

++x
x, y
flag ? x : y
/////////////////////////////////////////
if (x > 10)
	a = y;
else
	b = y;

(x > 10 ? a : b) = y;

*(x > 10 ? &a : &b) = y;

temporary objects

#include <iostream>

class Myclass {
	int mx;
public:
	Myclass(int val) : mx{ val } 
	{
		std::cout << "Myclass(int)\n";
	}
	void print()const
	{
		std::cout << "(" << mx << ")\n";
	}
	Myclass &operator=(const Myclass &r)
	{
		std::cout << "Myclass::operator=(cnst Myclass &)" << std::endl;
		mx = r.mx;
		return *this;
	}

	int get()const
	{
		return mx;
	}
	~Myclass()
	{
		std::cout << "~Myclass()\n";

	}
};

using namespace std;

int main()
{
	Myclass m{ 36 };
	m.print();
	m = 12;
	////
	getchar();
	cout << "main devam ediyor" << endl;



}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include "nutility.h"



using namespace std;

class Counter {
	int mx;
public:
	Counter(int val = 0) : mx{val} {}
	Counter &operator++()
	{
		++mx;
		return *this;
	}
	Counter operator++(int)
	{
		Counter temp(*this);
		++mx;

		return temp;
	}

	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}


};

int main()
{
	Counter c1;
	Counter c2 = 34;

	++c2;
	c1 = c2++;

	c1 = 45;

	cout << c1 << " " << c2 << sl;


}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include "nutility.h"



using namespace std;

class Counter {
	int mx;
public:
	Counter(int val = 0) : mx{val} {}
	Counter &operator++()
	{
		++mx;
		return *this;
	}
	Counter operator++(int)
	{
		Counter temp(*this);
		++mx;

		return temp;
	}

	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}


};

void func(Counter c)
{

}

int main()
{
	Counter c1(134), c2(35);
	char c = 'S';
	/////

	func(c);






}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include "nutility.h"


using namespace std;

class Counter {
	int mx;
public:
	explicit Counter(int val = 0) : mx{val} {}
	
	Counter &operator++()
	{
		++mx;
		return *this;
	}
	
	Counter operator++(int)
	{
		Counter temp(*this);
		++mx;

		return temp;
	}

	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}


};

int main()
{
	Counter x(10);
	Counter y{ 20 };
	
	
	Counter z = 45;  //gecersiz



}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include <memory>

#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass()
	{
		cout << "Myclass nesnesi hayata geldi kaynaklar edindi\n";
	}

	~Myclass()
	{
		cout << "Myclass nesnesi hayata veda etti kaynaklar geri verildi\n";
	}
};

int main()
{
	cout << "main basladi\n";
	if (1) {
		Myclass m;
	}
	cout << "main devam ediyor\n";


}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include <memory>

#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass()
	{
		cout << "Myclass nesnesi hayata geldi kaynaklar edindi\n";
	}

	~Myclass()
	{
		cout << "Myclass nesnesi hayata veda etti kaynaklar geri verildi\n";
	}
	void func();
};

int main()
{
	cout << "main basladi\n";
	if (1) {
		unique_ptr<Myclass> p(new Myclass);

	}
	cout << "main devam ediyor\n";


}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include <memory>

#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass()
	{
		cout << "Myclass nesnesi hayata geldi kaynaklar edindi\n";
	}

	~Myclass()
	{
		cout << "Myclass nesnesi hayata veda etti kaynaklar geri verildi\n";
	}
	void func();
};


//explicit ctor örneði
//unique_ptr sýnýfýnýn Adres parametreli ctor'ý

int main()
{
	cout << "main basladi\n";
	unique_ptr<Myclass> up1 = new Myclass;  //gecersiz



}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include "nutility.h"


using namespace std;

class Counter {
	int mx;
public:
	Counter(int val = 0) : mx{val} {}
	
	Counter &operator++()
	{
		++mx;
		return *this;
	}
	
	Counter operator++(int)
	{
		Counter temp(*this);
		++mx;

		return temp;
	}

	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}
};

void func(Counter c)
{

}

void foo(Counter &c)
{

}

void g(const Counter &r)
{

}

int main()
{
	func(10); //gecerli
	foo(20);  //gecersiz
	g(23);  //gecerli
}
/////////////////////////////////////////
/////////////////////////////////////////

Myclass m2(10);
Myclass m2{12};
Myclass m3 = 20;

#include <iostream>
#include <string>
#include "nutility.h"

using namespace std;

string h1(const string &s)
{
	return "<h1>" + s + "</h1>";
}

int main()
{

	cout << h1(0) << endl;  //legal conversion ctor
}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include <memory>

#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass()
	{
		std::cout << "kaynaklar edinildi\n";
	}

	~Myclass()
	{
		std::cout << "kaynaklar geri verildi\n";
	}
};

int main()
{
	cout << "if deyimi oncesi" << endl;
	
	if (1)
		unique_ptr<Myclass> p{ new Myclass };

	cout << "if deyimi sonrasi" << endl;


}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include <memory>

#include "nutility.h"

using namespace std;

class Myclass {
public:
	Myclass()
	{
		std::cout << "kaynaklar edinildi\n";
	}

	~Myclass()
	{
		std::cout << "kaynaklar geri verildi\n";
	}
};

using namespace std;

int main()
{
	cout << "if deyimi oncesi" << endl;
	
	if (1)
		unique_ptr<Myclass> p = new Myclass;

	cout << "if deyimi sonrasi" << endl;
}
/////////////////////////////////////////
/////////////////////////////////////////



void func(int)
{

}


#include <iostream>
#include <string>
#include <memory>

#include "nutility.h"

using namespace std;


class Myclass {
public:
	Myclass() = default;
	Myclass(int) {
		std::cout << "Myclass(int)\n";
	}

	~Myclass() {
		std::cout << "~Myclass()\n";
	}
};

int main()
{
	Myclass m;

	cout << "atama oncesi\n";
	m = 12;
	cout << "atama sonrasi\n";


}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include <memory>

#include "nutility.h"

using namespace std;


class Myclass {
public:
	Myclass() = default;
	Myclass(int) {
		std::cout << "Myclass(int)\n";
	}

	~Myclass() {
		std::cout << "~Myclass()\n";
	}
};

int main()
{
	Myclass m;

	cout << "ifade oncesi\n";
	Myclass(12);

	cout << "ifade sonrasi\n";


}
/////////////////////////////////////////
/////////////////////////////////////////

Myclass(x)

Myclass{x}
/////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include "nutility.h"

using namespace std;


int main()
{
	vector<int> vec1(12);

	cout << "vec1.size() = " << vec1.size() << endl;
	for (auto i : vec1)
		cout << i << " ";

	cout << sl;



}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include "nutility.h"

using namespace std;


int main()
{
	vector<int> vec1{ 12 };

	cout << "vec1.size() = " << vec1.size() << endl;
	for (auto i : vec1)
		cout << i << " ";

	cout << sl;



}
/////////////////////////////////////////
/////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include "nutility.h"

using namespace std;

class Myclass {
};



void func(const Myclass &)
{
	cout << "const Myclass &\n";
}

void func(Myclass &&)
{
	cout << "Myclass &&\n";
}


int main()
{
	Myclass m;

	func(m);  //1
	func(Myclass{});  //2

}
/////////////////////////////////////////
///////////////
//////////////////////////
#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include "nutility.h"

using namespace std;

string h1(const string &s);


int main()
{
	string name{ "mustafa lokman aksoy" };
	vector<string> svec;

	svec.push_back(name);
	///
	//svec.push_back(h1(name));

}
/////////////////////////////////////////
///////////////
//////////////////////////

////myclass.h

class Myclass {
	int mx1, mx2;
public:
	static int msx1;
	static int msx2;
	static int msx3;
	static int msx4;
	static int msx5;

};

//client.cpp
#include <iostream>
using namespace std;
//#include "myclass.h"

int main()
{
	cout << "sizeof(Myclass) = " << sizeof(Myclass) << endl;
}



////myclass.h

class Myclass {
	int mx1, mx2;
public:
	static int msx;
};

//myclass.cpp
//#include "myclass.h"
static int Myclass::msx = 0;  //gecersiz

//client.cpp
#include <iostream>
using namespace std;
//#include "myclass.h"

int main()
{
	//msx = 12; //gecersiz

	Myclass::msx = 24;
}




////myclass.h

class Myclass {
	int mx1, mx2;
public:
	static Myclass msx;
};


int main()
{
}

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////


////myclass.h

class Myclass {
	int mx1, mx2;
public:
	static int a[];
};


//myclass.cpp
int Myclass::a[] = { 1, 43, 4, 67 };

//client.cpp
#include <iostream>
using namespace std;
//#include "myclass.h"

int main()
{
}

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

////myclass.h

class Myclass {
	int mx1, mx2;
public:
	static int msx;
};

//myclass.cpp
#define   PUBLIC

PUBLIC int Myclass::msx = 23;

#include <iostream>
using namespace std;


int main()
{
}

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

////myclass.h

class Myclass {
	int mx1, mx2;
	static int msx;
public:
};

int Myclass::msx = 23;

#include <iostream>
using namespace std;


int main()
{
	Myclass::msx = 45;  //gecersiz (access control)
}

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;


class Myclass {
	int mx1, mx2;
public:
	static int msx;

};

///cppp
int foo();

int Myclass::msx = foo();

int foo()
{
	cout << "foo cagrildi\n";
	return 1;
}

int main()
{
	cout << "main basladi\n";
	Myclass::msx = 98;
}

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

///myclass.cpp

#include "huseyin.h"

int Myclass::smx = func(Huseyin::msdate);



//myclass.h
class Myclass {
	static int msx;
	void func();
};



//myclass.cpp
int Myclass::msx = 0;

void Myclass::func()
{
	msx = 45;
}
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	static int msx;
	void func();
public:
	Myclass() : msx{0} {}  //Gecersiz (ve de saçma)
};



///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	static int msx;
	void func();
public:
	Myclass()
	{
		msx = 10; //gecerli
		//
	}
};



///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	static int msx;
public:
	void func()const
	{
		msx = 10;  //gecerli ve lojik hata olmak zorunda degil
	}


};



///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	
public:
	static int msx;
};


int main()
{
	////
	Myclass m;
	Myclass *p = new Myclass;

	m.msx = 10;
	p->msx = 20;
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	
public:
	static int msx;
	int foo();
};

int foo();

int Myclass::msx = foo();  //gecersiz

int main()
{

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	
public:
	static double msx;
	static int foo();
};

double foo();

double Myclass::msx = foo();  

int main()
{

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	
public:
	static int x;
	static int y;
};

int y = 45;

int Myclass::x = y;   //y in class scope 
int Myclass::y = ::y;   


int main()
{

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	
public:
	static void func(int x)
	{


	}
};




int main()
{

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	
public:
	static void func(int x);
};


//myclass.cpp


static void Myclass::func(int x)   //gecersiz static keyword used in definition
{

}

int main()
{

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	int mval;
public:
	static void func(int x);
};


//myclass.cpp


//sýnýfýn statik üye iþlevleri sýnýfýn non-static veri öðelerini isimleriyle 
//kullanamazlar

void Myclass::func(int x)   
{
	mval = 45;  //kimin mval'Ý
}

int main()
{

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	int mval;
public:
	static void func(int x);
};


//myclass.cpp


//sýnýfýn statik üye iþlevleri sýnýfýn non-static veri öðelerini isimleriyle 
//kullanamazlar

void Myclass::func(int x)   
{
	Myclass m;
	m.mval = 12;
}

int main()
{

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	Myclass();
public:
};



int main()
{
	Myclass m;  //invalid code ctor is private
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//myclass.h
class Myclass {
	Myclass();
public:
	static Myclass *createObject()
	{
		return  new Myclass;
	}
};



int main()
{
	//Myclass m;  //invalid code ctor is private
	//Myclass *p = new Myclass; ////invalid code ctor is private
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


class Myclass {

public:
	static void func()const;  //gecersiz
};


/////////////////////////////////////////////////////

class Myclass {
	static void f1();
public:
	static void f2()
	{
		f1();  //
	}

}




//myclass.cpp
#include date.h

Date  Myclass::x = 12;


//myclass.h
class Date;

class Myclass{
public:
	static Date x;

}


//ali.cpp
#include myclass.h

Myclass::x.func();

#include <string>

using namespace std;

class Myclass {

public:
	static int smx;
	static void func();
	void foo();


	
};

///cpp
#define   STATIC

STATIC void Myclass::func()
{
	smx = 10;
}

///cpp
void Myclass::foo()
{
	smx = 10;
}


int main()
{


}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

#include <string>
#include <iostream>

using namespace std;

class Myclass {
public:
	const static int x = 10;
};

int main()
{
	cout << "Myclass::x = " << Myclass::x << endl;

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
#include <string>
#include <iostream>

using namespace std;

class Myclass {
public:
	const static int x = 10;
};
//myclass.cpp

const int Myclass::x;


int main()
{
	cout << "Myclass::x = " << Myclass::x << endl;

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
#include <string>
#include <iostream>

using namespace std;


class Counter {
	int mx;
public:
	explicit Counter(int val = 0):mx{val}{}

	Counter operator++(int)
	{
		Counter temp{ *this };
		++*this;
		return temp;
	}

	Counter& operator++()
	{
		++mx;
		return *this;
	}
	
	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}
	
	int getValue()const
	{
		return mx;
	}
	
	Counter &set(int val)
	{
		mx = val;
		return *this;
	}
};


int main()
{
	Counter c1{ 12 }, c2{ 20 };

	Counter c3;

	c3 = ++c1;

	cout << c3 << " " << c1 << " " << c2++ << endl;



}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
#include <string>
#include <iostream>

using namespace std;


class Counter {
	int mx;
	explicit Counter(int val = 0) :mx{ val } {}
public:

	Counter operator++(int)
	{
		Counter temp{ *this };
		++*this;
		return temp;
	}

	Counter& operator++()
	{
		++mx;
		return *this;
	}
	
	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}
	
	int getValue()const
	{
		return mx;
	}
	
	Counter &set(int val)
	{
		mx = val;
		return *this;
	}
};


int main()
{
	//Counter c1;  gecersiz
	//auto p = new Counter{ 20 }; gecersiz


}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
#include <string>
#include <iostream>

using namespace std;


class Counter {
	int mx;
	explicit Counter(int val = 0) :mx{ val } {}
public:
	static Counter *createObject(int val = 0)
	{
		return new Counter{ val };
	}

	Counter operator++(int)
	{
		Counter temp{ *this };
		++*this;
		return temp;
	}

	Counter& operator++()
	{
		++mx;
		return *this;
	}
	
	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}
	
	int getValue()const
	{
		return mx;
	}
	
	Counter &set(int val)
	{
		mx = val;
		return *this;
	}
};


int main()
{
	auto pd = Counter::createObject(12);
	//
	cout << pd->set(12) << endl;
	//
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
#include <string>
#include <iostream>

using namespace std;


class Counter {
	int mx;
	explicit Counter(int val = 0) :mx{ val } {}
public:
	Counter(const Counter &c) = delete;
	static Counter *createObject(int val = 0)
	{
		return new Counter{ val };
	}

	
	Counter& operator++()
	{
		++mx;
		return *this;
	}
	
	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}
	
	int getValue()const
	{
		return mx;
	}
	
	Counter &set(int val)
	{
		mx = val;
		return *this;
	}
};


int main()
{
	auto pd = Counter::createObject(12);
	//
	cout << pd->set(12) << endl;

	Counter c{ *pd };

	cout << c << endl;
	//
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
#include <string>
#include <iostream>

using namespace std;


class Counter {
	int mx;
	static Counter *ps;
	explicit Counter(int val = 0) :mx{ val } {}
public:
	static Counter *getInstance()
	{
		if (ps == nullptr)
			ps = new Counter{ 0 };

		return ps;
	}

	
	Counter& operator++()
	{
		++mx;
		return *this;
	}
	
	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}
	
	int getValue()const
	{
		return mx;
	}
	
	Counter &set(int val)
	{
		mx = val;
		return *this;
	}
};

//counter.cpp
Counter * Counter::ps = nullptr;


//client.cpp

int main()
{
	auto p = Counter::getInstance();

	cout << *p << endl;
	p->set(124);
	///

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
#include <string>
#include <iostream>

using namespace std;


class Counter {
	int mx;
	static Counter *ps;
	explicit Counter(int val = 0) :mx{ val } {}
public:
	Counter(const Counter &) = delete;
	static Counter &getInstance()
	{
		if (ps == nullptr)
			ps = new Counter{ 0 };

		return *ps;
	}

	
	Counter& operator++()
	{
		++mx;
		return *this;
	}
	
	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}
	
	int getValue()const
	{
		return mx;
	}
	
	Counter &set(int val)
	{
		mx = val;
		return *this;
	}
};

//counter.cpp
Counter * Counter::ps = nullptr;

//client.cpp

int main()
{
	Counter::getInstance().set(13);

	int x = Counter::getInstance().getValue();
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

class string {
public:
	typedef size_t size_type;
	size_type find(char c);
	const static size_type npos = numeric_limits<unsigned int>::max;

};


#include <string>
#include <iostream>

using namespace std;


int main()
{
	string str;

	cout << "bir yazi girin : ";
	getline(cin, str);
	cout << str << endl;

	auto idx = str.find('a');

}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//Overview of the New C++ (C++11/14).
//Effective C++ in an Embedded Environment.

#include <string>
#include <iostream>

using namespace std;


class Counter {
	int mx;
	explicit Counter(int val = 0) :mx{ val } {}
public:
	Counter(const Counter &) = delete;
	
	static Counter &getInstance()
	{
		static Counter c;
		return c;
	}

	Counter& operator++()
	{
		++mx;
		return *this;
	}
	
	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return os << "(" << c.mx << ")";
	}
	
	int getValue()const
	{
		return mx;
	}
	
	Counter &set(int val)
	{
		mx = val;
		return *this;
	}
};

//counter.cpp

//client.cpp

int main()
{



}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


class Employee {
	std::string mname;
	int m_id
	Date mbdate;
	///
public:
	Employee(const Employee &r) : mname{r.mname}, m_id {r.m_id}
	{
		//
	}
	Employee &operator=(const Employee &r)
	{
		//
		mname = r.mname;
		m_id = r.m_id;
		//

		return *this;
	}

}
#include <string>
#include <iostream>
#include <cstdlib>
#include <ctime>

#include "nutility.h"


using namespace std;


class Myclass {
	int mx;
	static size_t ms_instance_count;
public:
	Myclass(int val = 0): mx{val}
	{
		++Myclass::ms_instance_count;
	}

	Myclass(const Myclass &r):mx {r.mx}
	{
		++Myclass::ms_instance_count;
	}

	~Myclass()
	{
		--ms_instance_count;
	}

	int get()const { return mx; }
	Myclass &set(int val) { mx = val; return *this;}
	
	void display()const {
		std::cout << "(" << mx << ")";
	}

	static size_t getInstanceCount()
	{
		return ms_instance_count;
	}
};


///myclass.cpp
size_t Myclass::ms_instance_count = 0;


int main()
{
	srand(static_cast<unsigned>(time(nullptr)));

	auto n = rand() % 20 + 10;

	for (int k = 0; k < n; ++k) {
		auto *p = new Myclass;
		//
	}
	cout << "hayattaki nesne sayisi : " << Myclass::getInstanceCount() << endl;
	Myclass m1{ 12 };
	Myclass m2{ m1 };
	cout << "hayattaki nesne sayisi : " << Myclass::getInstanceCount() << endl;
	auto ptr = new Myclass;
	cout << "hayattaki nesne sayisi : " << Myclass::getInstanceCount() << endl;
	delete ptr;
	cout << "hayattaki nesne sayisi : " << Myclass::getInstanceCount() << endl;


}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
bir sequence cont.da belirli deðere sahip öðelerin hepsini silmek için
remove-erase idiyomu kullanýlýr.


#include <string>
#include <iostream>

#include "fighter.h"


using namespace std;


int main()
{
	int a[] = { 12, 46, 46, 8, 2, 34, 89, 24, 96, 12 };

	for (int i : a)
		cout << i << " ";
	cout << endl;

	for (int &i : a)
		++i;

	for (int i : a)
		cout << i << " ";
	cout << endl;


}




#include <string>
#include <iostream>

#include "fighter.h"


using namespace std;


int main()
{
	int a[] = { 12, 46, 46, 8, 2, 34, 89, 24, 96, 12 };

	for (int i : a)
		cout << i << " ";
	cout << endl;

	for (auto i : a)
		;

	for (int i : a)
		cout << i << " ";
	cout << endl;


}




#include <string>
#include <iostream>
#include "fighter.h"

using namespace std;


int main()
{
	vector<string> svec{ "sinan", "poyraz", "aykut", "arman",
	"fethi", "huseyin", "murat" };

	for (const auto &p : svec)
		cout << p << "  ";

	cout << endl;

	for (auto &r : svec)
		r += "can";

	for (const auto &p : svec)
		cout << p << "  ";

	cout << endl;


}




#include <string>
#include <iostream>
#include "fighter.h"

using namespace std;


int main()
{
	vector<string> svec{ "sinan", "poyraz", "aykut", "arman"
	"fethi", "huseyin", "murat" };

	for (const auto &p : svec)
		cout << p << "  ";

	cout << endl;

	for (auto &r : svec)
		r += "can";

	for (const auto &p : svec)
		cout << p << "  ";

	cout << endl;
}



#include <string>
#include <iostream>
#include "fighter.h"

using namespace std;


class Myclass {
public:
	Myclass()
	{
		static int x = 1;
		cout << x << " ";
		++x;
	}
};

int main()
{
	Myclass a[100];
}
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>

#include "fighter.h"


using namespace std;


int main()
{
	Fighter f1{ "Fethi", 21 };
	Fighter f2{ "Murat", 34};

	Fighter *p1 = new Fighter("Aykut", 16);
	Fighter *p2 = new Fighter("Necati", 70);
	Fighter *p3 = new Fighter("Arman", 30);
	///


	//delete p1;

	f2.askHelp();
		
	delete p2;
	delete p3;


}

#include "fighter.h"
#include <iostream>

using namespace std;

vector<Fighter *> Fighter::sm_vec;

Fighter::~Fighter()
{
	auto iter = find(sm_vec.begin(), sm_vec.end(), this);
	if (iter == sm_vec.end()) {
		cerr << "hata.. debug bak bi buraya" << endl;
		exit(EXIT_FAILURE);
	}
	sm_vec.erase(iter);
}

Fighter::Fighter(const string &name, int age) : m_name{name}, m_age{age}
{
	sm_vec.push_back(this);
}

void Fighter::display()const
{
	cout << "ben korkmaz yilmaz kacmaz savasci " << getName() << "\n";
	cout << getAge() << "yasindayim" << endl;
}


void Fighter::askHelp()
{
	cout << "eyyy savascilar   dusman sardi dort bir yanimi.. ";
	
	for (auto p : sm_vec) {
		if (p != this)
			cout << p->getName() << " ";
	}
	cout << " yardim edin!!!!!!\n";
}


#include "fighter.h"
#include <iostream>

using namespace std;

vector<Fighter *> Fighter::sm_vec;

Fighter::~Fighter()
{
	auto iter = find(sm_vec.begin(), sm_vec.end(), this);
	if (iter == sm_vec.end()) {
		cerr << "hata.. debug bak bi buraya" << endl;
		exit(EXIT_FAILURE);
	}
	sm_vec.erase(iter);
}

Fighter::Fighter(const string &name, int age) : m_name{name}, m_age{age}
{
	sm_vec.push_back(this);
}

void Fighter::display()const
{
	cout << "ben korkmaz yilmaz kacmaz savasci " << getName() << "\n";
	cout << getAge() << "yasindayim" << endl;
}


void Fighter::askHelp()
{
	cout << "eyyy savascilar   dusman sardi dort bir yanimi.. ";
	
	for (auto iter = sm_vec.rbegin(); iter != sm_vec.rend(); ++iter) {

		if (*iter != this) {
			cout << (*iter)->getName() << " ";
		}
	}

	cout << " yardim edin!!!!!!\n";
}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////




class Myclass {
	void pfunc();
public:
	friend void foo(int);  //derleyicibib foo iþlevinin bildirimini görmesi gerekmiyor
};


int main()
{

}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////




class Myclass {
	void pfunc();
public:
	friend void foo(int);  //derleyicibib foo iþlevinin bildirimini görmesi gerekmiyor
};

void foo(int val)
{
	Myclass m;

	m.pfunc();  //gecerli
}

int main()
{

}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


#include <iostream>

class Myclass {
	void pfunc();
public:
	friend void foo(int x)
	{
		//code
		std::cout << x << std::endl;
	}
};

void foo(int);

int main()
{

	foo(12);
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


#include <iostream>

class Myclass {
public:
	friend void foo(int x)
	{
		//code
		std::cout << x << std::endl;
	}
};


int main()
{
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


#include <iostream>

class Myclass {
	friend void foo(int x);
public:
};


int main()
{
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


#include <iostream>


class A {
public:
	void afunc();
};


class Myclass {
	void foo();
public:
	friend void A::afunc();
};

void A::afunc()
{
	Myclass m;
	m.foo();  //gecerli
}


int main()
{
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


#include <iostream>



class Myclass {
	void foo();
public:
	friend class A;
};


class A {
	void f1()
	{
		Myclass m;
		m.foo();
	}

	void f2()
	{
		Myclass m;
		m.foo();
	}

	void f3()
	{
		Myclass m;
		m.foo();
	}
};


int main()
{
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
Senin benle arkadaþ olmak istemen benim de bunu istediðim anlamýna gelmiyor.
Arkadaþýmýn arkadaþý arkadaþým olmak zorunda deðil.
Babamýn, dedemin arkadaþlarý benin arkadaþým olmak zorunda deðil.


#include <iostream>

using namespace std;

int main()
{
	string s1{ "alican" }, s2{ "velican" };

	if (s2 > s1) {
		s2[2] = 'x';
		s1 += ".txt";
	}
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

#include <iostream>
#include <memory>
#include <string>

using namespace std;

int main()
{
	unique_ptr<string> p{ new string{"giyasettin"} };

	cout << *p << endl;
	cout << p->size() << endl;

}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

#include <iostream>
#include <list>
#include <string>

using namespace std;

int main()
{
	list<string> slist{ "ayca", "gizem", "sezer", "sadullah" };

	for (auto iter = slist.begin(); iter != slist.end(); ++iter)
		cout << *iter << endl;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

yüklenemeyen operatörler

koþul operatörü (ternary op.)
nokta operatörü (nokta op.)
::			    çözünürlük operatörü
.*			    
sizeof			
new
delete
typeid
///////////////////////////////////////////////////////////////////////////
bazý op.ler yalnýzca üye op. fonksiyonu olarak overload edilebiliyor
iþlev çaðrý operatörü
ok operatörü
köþeli parantez op.
///////////////////////////////////////////////////////////////////////////
arity


void func(T (*p)(10))
{
	T a[10 * 20];

	for (int i = 0; i < 20; ++i) {
		for (int k = 0; k < 10; ++k)
			a[i * 20 + k] = p[i][k];
	}

}


T a1[SIZE][10]


1  1  2  1  56  1
9  3  5  9  12  5
19 2  6  3  2   3
9  3  1  6  2   1
#include <iostream>
#include <list>
#include <string>
#include <cstdlib>
#include <iomanip>



using namespace std;

int icmp(const void *vp1, const void *vp2)
{
	return *(const int *)vp1 - *(const int *)vp2;
}
int main()
{
	int a[][5] = { {12, 45, 4, 3, 4},
				 { 8, 479, 14, 30, 124 },
				 { 60, 0, 99, 11, 0 },
				 { 4, 6, 12, 89, 9 },
	};

	qsort(a, 5 * 4, sizeof(int), &icmp);

	cout << left;

	for (const auto &x : a) {
		for (const auto &y : x) {
			cout << setw(5) << y;
		}
		cout << endl;
	}

}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

#include <iostream>
#include <list>
#include <string>
#include <cstdlib>
#include <iomanip>

using namespace std;

#define  asize(x)		(sizeof(x) / sizeof(*x))

int mycmp(const void *vp1, const void *vp2)
{
	const int *p1 = (const int *)vp1;
	const int *p2 = (const int *)vp2;

	for (int k = 0; k < 5; ++k) {
		if (p1[k] != p2[k])
			return p1[k] - p2[k];
	}
	return 0;
}

int icmp(const void *vp1, const void *vp2)
{
	return *(const int *)vp1 - *(const int *)vp2;
}


int main()
{
	int a[][5] = { {12, 45, 4, 3, 4},
				 { 8, 479, 14, 30, 124 },
				 { 60, 0, 99, 11, 0 },
				 { 60, 0, 99, 89, 9 },
				{ 8, 479, 14, 30, 125 },
		
	};

	qsort(a, asize(a), sizeof(a[0]), &mycmp);

	cout << left;

	for (const auto &x : a) {
		for (const auto &y : x) {
			cout << setw(5) << y;
		}
		cout << endl;
	}

}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

o.o. genel kurallar

1. m1 @ m2

Functor

class Myclass {
public:
	RT operator+()const;
	RT operator+(const Myclass &r)const;
	RT operator()();
};



#include <iostream>
#include <list>
#include <string>
#include <cstdlib>
#include <iomanip>

using namespace std;

int main()
{
	string s1{ "jale" }, s2{ "tacettin" };

	s1 += s2;
	s1.operator+=(s2);
	
	if (s1 > s2)
		cout << s1 << endl;

	if (operator>(s1, s2))
		operator<<(cout, s1).operator<<(endl);


}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

> member function
gerisi global


bool f = m1 * m2 + m3 > m4;

operator+(operator*(m1, m2), m3).operator>(m4);

bool f = operator>(operator+(operator*(m1, m2), m3), m4);

bool f = m1.operator*(m2).operator+(m3).operator>(m4);

#include <iostream>
#include <list>
#include <string>
#include <cstdlib>
#include <iomanip>

using namespace std;

int main()
{
	string s1{ "jale" }, s2{ "tacettin" };

	s1 += s2;
	s1.operator+=(s2);
	
	if (s1 > s2)
		cout << s1 << endl;

	if (operator>(s1, s2))
		operator<<(cout, s1).operator<<(endl);


}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <iomanip>
#include <map>

using namespace std;

int main()
{
	vector<string> svec{ "ali", "veli", "ali", "aykut", "ali",
	"aykut", "can", "can", "can", "kayhan", "veli", "kayhan", "can", "kayhan" };
	//////
	map<string, int> m;

	for (const auto &s : svec)
		++m[s];

	for (const auto &p : m)
		cout << p.first << "   " << p.second << endl;

}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


global op. function vs member op. function





class Myclass {
public:
	friend bool operator<(const Myclass &, const Myclass &);
};

class NS {
	Myclass m1;
public:
	friend bool operator <(const NS &r1, const NS &r2)
	{
		return r1.m1 < r2.m1;
	}

	friend bool operator >(const NS &r1, const NS &r2)
	{
		return r2 < r1;
	}
};


#pragma once
#include <iosfwd>

class DivideByZeroError {

};

class Integer {
	int mval;
public:
	explicit Integer(int val = 0) : mval{val} {}
	friend bool operator<(const Integer &r1, const Integer &r2)
	{
		return r1.mval < r2.mval;
	}

	friend bool operator>(const Integer &r1, const Integer &r2)
	{
		return r2 < r1;
	}


	friend bool operator<=(const Integer &r1, const Integer &r2)
	{
		return !(r2 < r1);
	}


	friend bool operator>=(const Integer &r1, const Integer &r2)
	{
		return !(r1 < r2);
	}

	friend bool operator==(const Integer &r1, const Integer &r2)
	{
		return !(r1 < r2) && !(r2 < r1);
	}

	friend bool operator!=(const Integer &r1, const Integer &r2)
	{
		return (r1 < r2) || (r2 < r1);
	}

	Integer &operator+=(const Integer &r)
	{
		mval += r.mval;
		return *this;
	}

	friend Integer operator+(const Integer &r1, const Integer &r2)
	{
		Integer temp{ r1 };

		temp += r2;

		return temp;
		

	}

	/*friend Integer operator+(const Integer &r1, const Integer &r2)
	{
		Integer temp{ r1 };

		temp += r2;

		return temp;

	}*/



	/*friend Integer operator+(const Integer &r1, const Integer &r2)
	{
		return Integer{ r1.mval + r2.mval };
	}

	Integer &operator+=(const Integer &r)
	{
		return *this = *this + r;
	}*/

	Integer &operator/=(const Integer &r)
	{
		if (r.mval == 0) {
			throw DivideByZeroError{};
		}
		mval /= r.mval;
	}


	friend Integer operator-(const Integer &, const Integer &);
	friend Integer operator*(const Integer &, const Integer &);
	friend Integer operator/(const Integer &, const Integer &);
	friend Integer operator%(const Integer &, const Integer &);

	Integer operator+()const;   //sign op. 
	Integer operator-()const;  //sign op.
	Integer &operator-=(const Integer &);
	Integer &operator*=(const Integer &);
	Integer &operator%=(const Integer &);

	Integer& operator++();   //prefix
	Integer operator++(int);   //postfix
	Integer& operator--();   //prefix
	Integer operator--(int);   //postfix

	////// inserter & extractor
	friend std::ostream &operator<<(std::ostream &os, const Integer &i);
	friend std::istream &operator>>(std::istream &, Integer &r);
};


16 ARALIK 2017 CUMARTESÝ

#include "integer.h"
#include <iostream>
#include <fstream>
#include <algorithm>

using namespace std;

int main()
{

	Integer c1{ 345 }, c2{ 13 };

	cout << c1++ << "   " << ++c2 << endl;
	//operator<<(operator<<(cout, c1.operator++(0)).operator<<("   "), c2.operator++()).operator<<(endl);

	cout << c1 << "   " << c2 << endl;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include <iostream>
#include <fstream>

using namespace std;

int main()
{

	Integer c1{ 345 }, c2{ 13 }, c3{ 97 };

	ofstream ofs{ "aykut.txt" };
	//
	ofs << ++c1 << "  " << c2++ << endl;
	ofs << c1 << "  " << c2++ << endl;
	ofs << c1 + c2 + c3 << endl;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include "integer.h"
#include "nutility.h"

#include <iostream>
#include <sstream>
#include <string>


using namespace std;

int main()
{
	Integer ival1, ival2, ival3;

	cout << "uc sayi giriniz: ";
	cin >> ival1 >> ival2 >> ival3;
	//operator >> (operator >> (operator >> (cin, ival1), ival2), ival3);
	cout << ival1 << sl << ival2 << sl << ival3 << sl;
	
}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"

#include <iostream>
#include <sstream>
#include <string>


using namespace std;

int main()
{
	int x = 10, y = 45;
	
	cout.setf(ios::boolalpha);

	cout << (x < y) << endl;
	cout.unsetf(ios::boolalpha);

	cout << (x < y) << endl;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <sstream>
#include <string>

using namespace std;

int main()
{
	int x;

	cout << "gir bakalim bir sayi" << endl;
	cin >> hex >> x;
	
	cout << "x = " << x << endl;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <sstream>
#include <string>

using namespace std;

int main()
{
	string s{ "suleyman" };

	s[1] = 'o';
	
	for (auto idx = 0; idx < s.size(); ++idx)
		cout << s[idx] << " ";

	cout << sl;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <sstream>
#include <string>

using namespace std;

int main()
{
	const string s{ "suleyman" };

	//s[1] = 'o';  gecersiz
	
	for (auto idx = 0; idx < s.size(); ++idx)
		cout << s[idx] << " ";   //gecerli

	cout << sl;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <sstream>
#include <cstring>

using namespace std;


class Name {
	size_t mlen;
	char *mpd;
public:
	Name(const char *p) : mlen(strlen(p)), mpd{new char[mlen + 1]}
	{
		strcpy(mpd, p);
	}
	/////////////////////////////////////////////////////
	Name(const Name &r):mlen {r.mlen}, mpd {new char[mlen + 1] }
	{
		strcpy(mpd, r.mpd);
	}
	/////////////////////////////////////////////////////
	~Name()
	{
		if (mpd)
			delete[]mpd;
	}
	
	Name(Name &&r) : mlen{r.mlen}, mpd{r.mpd}
	{
		r.mpd = nullptr;
	}
	
	Name &operator=(Name &&r)
	{
		if (this == &r)
			return *this;

		delete[]mpd;
		mlen = r.mlen;
		mpd = r.mpd;

		r.mpd = nullptr;
		return *this;
	}

	Name &operator=(const Name &r)
	{
		if (this == &r)
			return *this;

		delete[]mpd;
		mlen = r.mlen;
		mpd = new char[mlen + 1];
		strcpy(mpd, r.mpd);

		return *this;
	}
	
	char &operator[](size_t idx)
	{
		return mpd[idx];
	}

	const char &operator[](size_t idx)const
	{
		return mpd[idx];
	}

	size_t length()const
	{
		return mlen;
	}

	friend std::ostream &operator<<(std::ostream &os, const Name &name)
	{
		return os << "(" << name.mpd << ")";
	}

	friend std::istream &operator >> (std::istream &is, Name &name)
	{
		is >> name.mpd;
		name.mlen = strlen(name.mpd);
		return is;

	}

};


int main()
{
	Name x{ "enes cakiroglu" };

	for (size_t idx = 0; idx < x.length(); ++idx)
		cout << x[idx] << "  ";
	cout << sl;

	cout << x << endl;

	cout << "deðisecek isim ne olsun : ";
	cin >> x;

	cout << x << endl;

	for (size_t idx = 0; idx < x.length(); ++idx)
		++x[idx];

	cout << x << endl;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <vector>
#include <string>

using namespace std;



int main()
{
	vector<string> svec{ "sinan", "huseyin", "necati", "aykut" };

	for (auto idx = 0; idx < svec.size(); ++idx)
		svec[idx] += "can";

	for (auto idx = 0; idx < svec.size(); ++idx)
		cout << svec[idx] << endl;



}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <vector>
#include <map>
#include <string>

using namespace std;

int main()
{
	map<string, int> telmap{
		{"huseyin", 5341298},
		{ "aykut", 5430911},
		{ "arman", 2340912},
		{ "necati", 171819},
		{ "tarik", 6236412},
		{ "polat", 9082456},
		{ "nurican", 8745422},
	};

	telmap["nihat"] = 1234567;


	cout << telmap["necati"] << endl;
	telmap["polat"] = 3333333;

	for (const auto &p : telmap)
		cout << p.first << "  " << p.second << endl;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <vector>
#include <map>
#include <string>

using namespace std;

class Myclass {
	int mx;
public:
	void set(int val)
	{
		mx = val;
	}

	int get()const
	{
		return mx;
	}

	Myclass(int val) : mx{ val }
	{
		cout << "Myclass nesnesi icin kaynaklar edinildi" << endl;
	}

	~Myclass()
	{
		cout << "Myclass nesnesinin kaynaklari iade edildi" << endl;
	}
	friend std::ostream &operator<<(std::ostream &os, const Myclass &m)
	{
		return os << "(" << m.mx << ")";
	}
};

int main()
{
	Myclass m(12);

	cout << m << endl;
	m.set(345);
	cout << m << endl;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <vector>
#include <map>
#include <string>

using namespace std;

class Myclass {
	int mx;
public:
	void set(int val)
	{
		mx = val;
	}

	int get()const
	{
		return mx;
	}

	Myclass(int val) : mx{ val }
	{
		cout << "Myclass nesnesi icin kaynaklar edinildi" << endl;
	}

	~Myclass()
	{
		cout << "Myclass nesnesinin kaynaklari iade edildi" << endl;
	}
	friend std::ostream &operator<<(std::ostream &os, const Myclass &m)
	{
		return os << "(" << m.mx << ")";
	}
};

int main()
{
	auto *pm = new Myclass{ 13 };

	cout << *pm << endl;
	pm->set(653);
	cout << pm->get() << endl;
	///
	delete pm;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <vector>
#include <map>
#include <string>

using namespace std;

class Myclass {
	int mx;
public:
	void set(int val)
	{
		mx = val;
	}

	int get()const
	{
		return mx;
	}

	Myclass(int val) : mx{ val }
	{
		cout << "Myclass nesnesi icin kaynaklar edinildi" << endl;
	}

	~Myclass()
	{
		cout << "Myclass nesnesinin kaynaklari iade edildi" << endl;
	}
	friend std::ostream &operator<<(std::ostream &os, const Myclass &m)
	{
		return os << "(" << m.mx << ")";
	}
};

int main()
{
	auto *pm = new Myclass{ 13 };

	cout << *pm << endl;
	pm->set(653);
	cout << pm->get() << endl;
	///
	delete pm;

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////


struct Myclass {
	void set(int x);
};

class A {
public:
	Myclass *operator->();
};

class B {
public:
	A operator->();
};

int main()
{
	B bptr;

	bptr->set(12);

	bptr.operator->().operator->()->set(12);
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <vector>
#include <map>
#include <string>

using namespace std;

class Myclass {
	int mx;
public:
	void set(int val)
	{
		mx = val;
	}

	int get()const
	{
		return mx;
	}

	Myclass(int val) : mx{ val }
	{
		cout << "Myclass nesnesi icin kaynaklar edinildi" << endl;
	}

	~Myclass()
	{
		cout << "Myclass nesnesinin kaynaklari iade edildi" << endl;
	}

	
	friend std::ostream &operator<<(std::ostream &os, const Myclass &m)
	{
		return os << "(" << m.mx << ")";
	}
};

class MyclassPtr {
	Myclass *mp;
public:
	MyclassPtr(Myclass *pd) : mp{pd} {}
	~MyclassPtr() 
	{
		delete mp;
	}
	Myclass &operator*()
	{
		return *mp;
	}

	Myclass *operator->()
	{
		return mp;
	}

};

int main()
{
	MyclassPtr pm = new Myclass{ 13 };
	//Myclass m = 98123;

	//*pm = m;

	cout << *pm << endl;
	pm->set(653);

	pm.operator->()->set(234);

	cout << pm->get() << endl;
	///

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include "integer.h"
#include "nutility.h"
#include <iostream>
#include <vector>
#include <map>
#include <string>

using namespace std;

class Myclass {
	int mx;
public:
	void set(int val)
	{
		mx = val;
	}

	int get()const
	{
		return mx;
	}

	Myclass(int val) : mx{ val }
	{
		cout << "Myclass nesnesi icin kaynaklar edinildi" << endl;
	}

	~Myclass()
	{
		cout << "Myclass nesnesinin kaynaklari iade edildi" << endl;
	}

	
	friend std::ostream &operator<<(std::ostream &os, const Myclass &m)
	{
		return os << "(" << m.mx << ")";
	}
};

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
template<typename T>
class SmartPtr {
	T *mp;
public:
	SmartPtr(T *pd) : mp{pd} {}
	~SmartPtr() 
	{
		delete mp;
	}
	T &operator*()
	{
		return *mp;
	}

	T *operator->()
	{
		return mp;
	}

};

int main()
{
	{
		SmartPtr<string> pd = new string{ "Necati" };

		pd->back() = 'x';

		cout << *pd << endl;
	}

	//SmartPtr<Myclass> pm = new Myclass{ 13 };
	////Myclass m = 98123;

	////*pm = m;

	//cout << *pm << endl;
	//pm->set(653);

	//pm.operator->()->set(234);

	//cout << pm->get() << endl;
	/////

}
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
#include <string>


template<typename T, typename U>
struct Pair {
	T first;
	U second;
};

using namespace std;

Pair <int, string> foo();

int main()
{

}


#include <string>
#include <map>
#include <iostream>


using namespace std;

int main()
{
	map<string, int> mymap;

	mymap.insert(pair<string, int>{"aliye", 19});
	mymap.insert(pair<string, int>{"huseyin", 30});
	mymap.insert(pair<string, int>{"aykut", 10});

	auto iter = mymap.begin();

	cout << iter->first << "  " << iter->second << endl;

}


#include <iostream>
#include <memory>

using namespace std;


int main()
{
	unique_ptr<string> uptr{ new string("muhittin") };

	if (uptr) {
		cout << "dogru" << endl;
	}
	else {
		cout << "yanlis" << endl;
	}

	unique_ptr<string> up2 = move(uptr);


	if (uptr) {
		cout << "dogru" << endl;
	}
	else {
		cout << "yanlis" << endl;
	}


	if (up2) {
		cout << "dogru" << endl;
	}
	else {
		cout << "yanlis" << endl;
	}

}
/////////////////////////////////////////////
#include <iostream>
#include <memory>
#include <vector>


using namespace std;

class Myclass {
public:
	Myclass()
	{

	}

	~Myclass()
	{
		std::cout << "Myclass nesnesi kaynaklari geri verildi\n";
	}

};

int main()
{
	cout << "main basladi" << endl;
	if (true) {
		unique_ptr<Myclass> up{ new Myclass };
	}
	cout << "main devam ediyor " << endl;

}
/////////////////////////////////////////////
#include <iostream>
#include <memory>
#include <vector>


using namespace std;

class Myclass {
public:
	Myclass()
	{

	}

	~Myclass()
	{
		std::cout << "Myclass nesnesi kaynaklari geri verildi\n";
	}

};

int main()
{
	cout << "main basladi" << endl;
	if (1) {
		shared_ptr<Myclass> sp1{ new Myclass };
		if (1) {
			auto sp2 = sp1;
			auto sp3 = sp1;
		}
		cout << "main devam ediyor 1" << endl;
	}

	cout << "main devam ediyor 1" << endl;


}
/////////////////////////////////////////////
#include <iostream>
#include <memory>
#include <vector>
#include <list>
#include <string>




using namespace std;

using Sptr = shared_ptr<string>;

int main()
{
	vector<Sptr> svec;
	
	/////
	list<Sptr> slist;

	Sptr sp{ new string{ "Necati" } };
	svec.push_back(sp);
	slist.push_back(sp);


	*svec[0] += "can";

	*slist.front() = "Hasan" + *slist.front();

	cout << *sp << endl;


}
/////////////////////////////////////////////
#include <iostream>
#include <memory>
#include <vector>
#include <list>
#include <string>

using namespace std;

class Myclass {
public:
	void operator()()
	{
		std::cout << "Myclass::operator()()\n";
		std::cout << "this  = " << this << std::endl;
	}
};


int main()
{
	Myclass m;

	m();
	m.operator()();
	cout << "&m = " << &m << endl;

}
/////////////////////////////////////////////
#include <iostream>
#include <memory>
#include <vector>
#include <list>
#include <string>

using namespace std;

class Myclass {
public:
	void operator()()
	{
		std::cout << "Myclass::operator()()\n";
		std::cout << "this  = " << this << std::endl;
	}
};


int main()
{
	Myclass m;

	m();
	m.operator()();
	cout << "&m = " << &m << endl;

}
/////////////////////////////////////////////
#include <iostream>
#include <memory>
#include <vector>
#include <list>
#include <string>

using namespace std;

class Myclass {
public:
	Myclass &func()
	{
		return *this;
	}

	void operator()()
	{
		
	}
};


int main()
{
	Myclass m;

	m.func()();
	m.func().operator();


}
/////////////////////////////////////////////
#include <iostream>
#include <memory>
#include <vector>
#include <list>
#include <string>

using namespace std;

class Myclass {
public:
	void operator()(int)
	{
		std::cout << "operator()(int)\n";
	}
	void operator()(double)
	{
		std::cout << "operator()(double)\n";
	}
	void operator()(int, int)
	{
		std::cout << "operator()(int, int)\n";
	}
};


int main()
{
	Myclass m;

	m(12);
	m(.12);
	m(1, 2);

}
/////////////////////////////////////////////
#include <iostream>
#include <memory>
#include <vector>
#include <list>
#include <string>

using namespace std;

class Myclass {
public:
	void operator()(int x = 0)
	{
		std::cout << "x = " << x << std::endl;
	}
};


int main()
{
	Myclass m;

	m();
	m(12)
}
/////////////////////////////////////////////

#include <iostream>
#include <cstdlib>
#include "nutility.h"

using namespace std;


class Random {
	int mlow, mhigh;
public:
	Random(int low, int high) : mlow{low}, mhigh{high} {}
	int operator()()
	{
		return rand() % (mhigh - mlow + 1) + mlow;
	}
};

int main()
{
	randomize();
	Random r1{ 34, 67 };
	Random r2{ 90, 99 };

	for (int k = 0; k < 10; ++k)
		cout << r1() << " ";

	cout << sl;

	for (int k = 0; k < 10; ++k)
		cout << r2() << " ";

	cout << sl;

}
/////////////////////////////////////////////
/////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include "nutility.h"

using namespace std;


class Random {
	int mlow, mhigh;
public:
	Random(int low, int high) : mlow{low}, mhigh{high} {}
	int operator()()
	{
		return rand() % (mhigh - mlow + 1) + mlow;
	}
};

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
void func(Random r)
{
	///
	for (int k = 0; k < 10; ++k)
		cout << r() << " ";
}

int main()
{


}
/////////////////////////////////////////////
/////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include "nutility.h"

using namespace std;

class Counter {
	int mx;
public:
	Counter(int val = 0) : mx{val} {}
	void set(int val)
	{
		mx = val;
	}
	Counter &operator++()
	{
		++mx;
		return *this;
	}

	Counter operator++(int)
	{
		Counter temp{ *this };
		++*this;
		return temp;
	}

	operator int()const
	{
		std::cout << "operator int()\n";

		return mx;
	}

	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return  os << "(" << c.mx << ")";
	}
};


int main()
{
	Counter c;

	for (int k = 0; k < 10; ++k)
		++c;

	cout << c << endl;

	int ival = c;
	int ival = c.operator int();

	cout << "ival = " << ival << endl;

}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include "nutility.h"

using namespace std;

class Counter {
	int mx;
public:
	Counter(int val = 0) : mx{val} {}
	void set(int val)
	{
		mx = val;
	}
	Counter &operator++()
	{
		++mx;
		return *this;
	}

	Counter operator++(int)
	{
		Counter temp{ *this };
		++*this;
		return temp;
	}

	operator int()const
	{
		std::cout << "operator int()\n";

		return mx;
	}

	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return  os << "(" << c.mx << ")";
	}
};


int main()
{
	Counter c;

	for (int k = 0; k < 10; ++k)
		++c;

	cout << c << endl;

	int i1 = c;
	int i2 = c.operator int();
	int i3 = static_cast<int>(c);
	int i4 = (int)c;

	cout << i1 << endl;
	cout << i2 << endl;
	cout << i3 << endl;
	cout << i4 << endl;


}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include "nutility.h"

using namespace std;

class Counter {
	int mx;
public:
	Counter(int val = 0) : mx{val} {}
	void set(int val)
	{
		mx = val;
	}
	Counter &operator++()
	{
		++mx;
		return *this;
	}

	Counter operator++(int)
	{
		Counter temp{ *this };
		++*this;
		return temp;
	}

	operator int()const
	{
		std::cout << "operator int()\n";

		return mx;
	}

	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return  os << "(" << c.mx << ")";
	}
};


int main()
{
	Counter c;

	for (int k = 0; k < 10; ++k)
		++c;

	double dval;

	dval = c;

}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include "nutility.h"

using namespace std;

class Counter {
	int mx;
public:
	Counter(int val = 0) : mx{val} {}
	void set(int val)
	{
		mx = val;
	}
	Counter &operator++()
	{
		++mx;
		return *this;
	}

	Counter operator++(int)
	{
		Counter temp{ *this };
		++*this;
		return temp;
	}

	explicit operator int()const  //since C++
	{
		std::cout << "operator int()\n";

		return mx;
	}

	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return  os << "(" << c.mx << ")";
	}
};


int main()
{
	Counter c{ 356 };
	Counter c1;
	int ic1;

	///
	//gecersiz ic1 = c1;
	int i2 = c.operator int();
	int i3 = static_cast<int>(c);


}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////


int main()
{
	int x;

	while (cin.operator>>(x).operator void *())
		cout << x << " ";
}



#include <iostream>
#include <cstdlib>
#include "nutility.h"

using namespace std;

class Counter {
	int mx;
public:
	Counter(int val = 0) : mx{val} {}
	void set(int val)
	{
		mx = val;
	}
	Counter &operator++()
	{
		++mx;
		return *this;
	}

	Counter operator++(int)
	{
		Counter temp{ *this };
		++*this;
		return temp;
	}

	explicit operator bool()  //since C++
	{
		return rand() % 2 ? true: false;
	}

	friend std::ostream &operator<<(std::ostream &os, const Counter &c)
	{
		return  os << "(" << c.mx << ")";
	}
};



int main()
{
	Counter c;
	double dval = 24.7;

	//dval = c;

	if (c)
		++c;
}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include "nutility.h"

using namespace std;


int main()
{
	int x;

	while (cin.operator>>(x).operator bool())
		cout << x;

}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#ifndef FRACTION_H
#define FRACTION_H

#include <iosfwd>
#include <string>



class BadFraction {

};

/*
	if (mdenom == 0)
		throw BadFraction{};
*/

class Fraction {
public:
	explicit Fraction(int nom = 0, int denom = 1);
	explicit Fraction(double);
	int Nom()const;
	int Denom()const;
	Fraction inverse();

	friend bool operator<(const Fraction &, const Fraction &);
	friend bool operator<=(const Fraction &, const Fraction &);
	friend bool operator>(const Fraction &, const Fraction &);
	friend bool operator>=(const Fraction &, const Fraction &);
	friend bool operator==(const Fraction &, const Fraction &);
	friend bool operator!=(const Fraction &, const Fraction &);
	////////////////////////////////////////////////////////////////////
	friend Fraction operator+(const Fraction &, const Fraction &);
	friend Fraction operator-(const Fraction &, const Fraction &);
	friend Fraction operator*(const Fraction &, const Fraction &);
	friend Fraction operator/(const Fraction &, const Fraction &);
	////////////////////////////////////////////////////////////////////
	Fraction & operator+=(const Fraction &);
	Fraction & operator-=(const Fraction &);
	Fraction & operator*=(const Fraction &);
	Fraction & operator/=(const Fraction &);
	////////////////////////////////////////////////////////////////////
	Fraction &operator++();  //onek
	Fraction operator++(int);  //sonek
	Fraction &operator--();  //onek
	Fraction operator--(int);  //sonek
	////////////////////////////////////////////////////////////////////
	friend double operator+(const Fraction &, double);
	friend double operator+(double, const Fraction &);
	////

	

	explicit operator bool()const;
	////////////////////////////////////////////////////////////////////
	static Fraction RandomFraction();  /// -5/7   3  -9  13 / 5
	friend std::ostream &operator<<(std::ostream &, const Fraction &);  //  (-3 / 13)
	friend std::istream &operator>>(std::istream &, Fraction &);
	////////////////////////////////////////////////////////////////////
	std::string to_str()const;    //
	 ////////////////////////////////////////////////////////////////////
private:
	int m_nom, m_denom;
};



#endif






#ifndef FRACTION_H
#define FRACTION_H

#include <iosfwd>
#include <string>



class BadFraction {

};

/*
	if (mdenom == 0)
		throw BadFraction{};
*/

class Fraction {
public:
	explicit Fraction(int nom = 0, int denom = 1);
	explicit Fraction(double);
	int Nom()const;
	int Denom()const;
	Fraction inverse();

	friend bool operator<(const Fraction &, const Fraction &);
	friend bool operator<=(const Fraction &, const Fraction &);
	friend bool operator>(const Fraction &, const Fraction &);
	friend bool operator>=(const Fraction &, const Fraction &);
	friend bool operator==(const Fraction &, const Fraction &);
	friend bool operator!=(const Fraction &, const Fraction &);
	////////////////////////////////////////////////////////////////////
	friend Fraction operator+(const Fraction &, const Fraction &);
	friend Fraction operator-(const Fraction &, const Fraction &);
	friend Fraction operator*(const Fraction &, const Fraction &);
	friend Fraction operator/(const Fraction &, const Fraction &);
	////////////////////////////////////////////////////////////////////
	Fraction & operator+=(const Fraction &);
	Fraction & operator-=(const Fraction &);
	Fraction & operator*=(const Fraction &);
	Fraction & operator/=(const Fraction &);
	////////////////////////////////////////////////////////////////////
	Fraction &operator++();  //onek
	Fraction operator++(int);  //sonek
	Fraction &operator--();  //onek
	Fraction operator--(int);  //sonek
	////////////////////////////////////////////////////////////////////
	friend double operator+(const Fraction &, double);
	friend double operator+(double, const Fraction &);
	////

	

	explicit operator bool()const;
	////////////////////////////////////////////////////////////////////
	static Fraction RandomFraction();  /// -5/7   3  -9  13 / 5
	friend std::ostream &operator<<(std::ostream &, const Fraction &);  //  (-3 / 13)
	friend std::istream &operator>>(std::istream &, Fraction &);
	////////////////////////////////////////////////////////////////////
	std::string to_str()const;    //
	 ////////////////////////////////////////////////////////////////////
private:
	int m_nom, m_denom;
};



#endif


#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

int main()
{
	//vector<Date> fvec;
	Date d1{ 11, 2, 1987 };
	Date d2{"5 Aralik 1987"};

	cout << d1 << " " << d2 << endl;
	cout << "tarih girin : ";
	cin >> d1;

	if (d1 > d2)
		++d1;

	set<Date> myset;

	while (myset.size() < 1000)
		myset.insert(Date::RandomDate());

	for (const auto &d : myset)
		cout << d << endl;

	Date today;
	Date yr_bdate;

	cout << "dogum tarihini gir : ";
	cin >> yr_bdate;

	cout << "Bu fani dunyada " << today - yr_bdate << ". gunun. tadini cikart!!!!" << endl;
	for (int k = 1; k < 1000000000; k *= 10) {
		cout << k << " gun sonrasi : " << today + k << endl;
	}

}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

class Myclass {
	static int mx;
	static int my;

	static int foo();
	//
};

//myclass.cpp
int foo();
int Myclass::mx = foo();
int Myclass::my = ::foo();


int main()
{

}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

//sýnýfýn tür öðeleri (type members)

class Myclass {
public:
	typedef int Word;
	using Uint = unsigned int;  //since C++11
	class Member {
	public:
		void func();
	};

	enum {Off, On, Hold, StandBy};
};


int main()
{
	//Word x; //gecersiz.
	Myclass::Word x;
	int y = Myclass::Off;
	Myclass::Member m; 
}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

//sýnýfýn tür öðeleri (type members)

class Myclass {
	typedef int Word;

public:
	using Uint = unsigned int;  //since C++11
	class Member {
	public:
		void func();
	};

	enum {Off, On, Hold, StandBy};
};


int main()
{
	//Word x; //gecersiz.
	Myclass::Word x;  //hata access kontrol
	int y = Myclass::Off;
	Myclass::Member m; 
}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

//sýnýfýn tür öðeleri (type members)

class Myclass {
	class Member {
		void pfoo();
	public:
		void func();
	};

	Member mx;
};


int main()
{


}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

//sýnýfýn tür öðeleri (type members)

class Myclass {
	class Member {
		void pfoo();
	public:
		void func();
	};
	
	void mcfunc()
	{
		Member m;
		m.pfoo();  //gecersiz access control
	}
};


int main()
{


}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

//sýnýfýn tür öðeleri (type members)

class Myclass {
	class Member {
		void pfoo();
	public:
		void func();
		friend Myclass;
	};
	
	void mcfunc()
	{
		Member m;
		m.pfoo();  //gecersiz access control
	}
};


int main()
{


}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

class Myclass {
public:
	Word mword;  //gecersiz
	typedef int Word;

};


int main()
{


}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

class Word {
public:
	void foo();
};

class Myclass {
public:
	typedef int Word;

	Word mword;  

};


int main()
{
	Myclass m;

	m.mword.foo();

}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

class Word {
public:
	void foo();
};

class Myclass {
public:
	void func();
	typedef int Word;


};

///cpp

void Myclass::func()
{
	Word wx;
}

int main()
{


}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

class Word {
public:
	void foo();
};

class Myclass {
public:
	void func()
	{
		Word wx = 10;  //gecerli
	}
	typedef int Word;


};


int main()
{


}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <memory>
#include <vector>
#include <set>

#include <algorithm>
#include "nutility.h"
#include "fraction.h"
#include "date.h"

using namespace std;

class Myclass {
	typedef int Word;

private:
	Word mx;

};


int main()
{


}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
#pragma once

//version 1
#include <string>
#include <vector>
#include "weapon.h"

class Fighter {
	Weapon mweapon;
	std::string mname;
	std::vector<std::string> mfriendvec;
	int mage;
public:
	Fighter();
	void func();
};
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
#include "fighter.h"

#include <vector>
#include <string>
#include "weapon.h"

struct Fighter::Pimple
{
	Weapon mweapon;
	std::string mname;
	std::vector<std::string> mfriendvec;
	int mage;
	Pimple() : mname{ "hasan" }, mage{ 13 }, mfriendvec{ "nuri", "cezmi", "ayse" }
	{
		//
	}

};

Fighter::Fighter() : mp{ new Pimple }
{
}


void Fighter::func()
{
	++mp->mage;
	mp->mname += "can";
	mp->mfriendvec.push_back("Nizamettin");
	//
	mp->mweapon.maintain();
}


///



class Myclass {
	class Neco {
		int mx, my;
	public:
		Neco(int a, int b) : mx{ a }, my{ b }
		{
			//+++++code
		}
		void func()
		{
			++mx;
			++my;
		}
	};
};





class Myclass {
	class Neco {
		int mx, my;
	public:
		Neco(int a, int b);
		void func();
	};
};


///myclass.cpp

Myclass::Neco::Neco(int a, int b) : mx{a}, my{b}
{
	///++code
}

void Myclass::Neco::func()
{
	++mx;
	++my;
}





class Myclass {
	class Neco {
		int mx, my;
	public:
		Neco(int a, int b);
		void func();
		Neco(const Neco &r);
		Neco &operator=(const Neco &r);
	};
};


///myclass.cpp

Myclass::Neco &Myclass::Neco::operator=(const Neco &r)
{
	mx = r.mx;
	my = r.my;
	return *this;
}

Myclass::Neco::Neco(const Neco &r) :mx{r.mx}, my{r.my}
{
	////
}

Myclass::Neco::Neco(int a, int b) : mx{a}, my{b}
{
	///++code
}

void Myclass::Neco::func()
{
	Neco nec{ 2, 5 };
	++mx;
	++my;
}
////////////////////////////////////////////////////////////



class Myclass {
	class Neco {
		int mx, my;
	public:
		Neco(int a, int b);
		void func();
		Neco(const Neco &r);
		Neco &operator=(const Neco &r);
	};
	////
	static Neco necx;
};


///myclass.cpp


Myclass::Neco &Myclass::Neco::operator=(const Neco &r)
{
	mx = r.mx;
	my = r.my;
	return *this;
}

Myclass::Neco::Neco(const Neco &r) :mx{r.mx}, my{r.my}
{
	////
}

Myclass::Neco::Neco(int a, int b) : mx{a}, my{b}
{
	///++code
}

void Myclass::Neco::func()
{
	Neco nec{ 2, 5 };
	++mx;
	++my;
}
////////////////////////////////////////////////////////////


class List{
public:
	class iterator {
		////
	public:
		int &operator*();
		int *operator->();
		iterator &operator++();
		iterator operator++(int);
		/////

	};
	iterator begin();
	iterator end();
};


int main()
{
	List mylist;

	///
	//List::iterator iter = mylist.begin();
	auto iter = mylist.begin();

	*iter = 12;
	++iter;
}


#include <list>
#include <string>
#include <iostream>


using namespace std;

int main()
{
	list<string> mylist{ "kerim", "sinan", "aliye", "safinaz", "nuri" };

	list<string>::iterator iter = mylist.begin();

	while (iter != mylist.end()) {
		cout << *iter << endl;
		++iter;
	}

}



class String {

public:
	typedef size_t size_type;
}


#include <list>
#include <string>
#include <iostream>

using namespace std;

int main()
{
	string s{ "mustafa elkar" };

	//string::size_type len = s.length();
	auto len = s.length();
}


#include <list>
#include <string>
#include <iostream>

using namespace std;

class Widget {
public:
	enum WidgetSize { Small, Medium, Large, VeryLarge };
};

int main()
{
	Widget::Small;
}

#include <list>
#include <string>
#include <iostream>

using namespace std;

class IList {
	class Node {
		int mval;
		Node *mpnext;
	public:
		Node(int val) : mval{ val }, mpnext{ nullptr } {}
		friend class IList;
	};
	Node *mpfirst;
	size_t mcnt;
public:
	IList() : mpfirst{nullptr}, mcnt{0} {}
	void push_front(int x)
	{
		auto p = new Node{ x };
		p->mpnext = mpfirst;
		mpfirst = p;
		++mcnt;
	}

	void pop_front()
	{
		Node *ptemp = mpfirst;
		mpfirst = mpfirst->mpnext;
		--mcnt;
		delete ptemp;
	}
	int &getFirst() const
	{
		if (mcnt == 0)
			throw 1;
		return mpfirst->mval;
	}
	void display()const
	{
		for (Node *pc = mpfirst; pc != nullptr; pc = pc->mpnext)
			std::cout << pc->mval << " ";
		std::cout << "\n";
	}
	size_t size()const
	{
		return mcnt;
	}
};


///list.cpp

string::size_type
tane adet türü
uzunluk türü
index türü

string::iterator
string::const_iterator
string::reverse_iterator
string::const_reverse_iterator



[beg, end)


#include <string>
#include <iostream>

using namespace std;

int main()
{
	int a[] = { 2, 5, 7, 1, 8, 13, 78 };

	for (auto iter = begin(a); iter != end(a); ++iter)
		cout << *iter << endl;


}



#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

template<typename Iter>
void display(Iter beg, Iter end)
{
	while (beg != end) {
		std::cout << *beg << " ";
		++beg;
	}
	std::cout << std::endl;
}

int main()
{
	int a[] = { 2, 45, 34, 35, 24, 35, 12, 678, 44 };

	display(begin(a), end(a));

	list<string> slist{ "muzaffer", "taylan", "coskun", "zeynep" };

	display(begin(slist), end(slist));

}



#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

template<typename Iter>
void display(Iter beg, Iter end)
{
	while (beg != end) {
		std::cout << *beg << " ";
		++beg;
	}
	std::cout << std::endl;
}

int main()
{
	string s{ "muharrem" };
	display(s.begin(), s.end());
	display(begin(s), end(s));



}



#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	string s;
	string name{ "muhittin" };
	char str[] = "berkay";


	s.assign(name, 2, 3);
	cout << "(" << s << ")" << endl;

	s.assign(str);
	cout << "(" << s << ")" << endl;
	s.assign(str + 1, 4);
	cout << "(" << s << ")" << endl;
	s.assign(str + 1, str + 4);
	cout << "(" << s << ")" << endl;
	s.assign(22, 'a');
	cout << "(" << s << ")" << endl;
	s.assign({ 'a', 'b', 'd' });
	cout << "(" << s << ")" << endl;
	s.assign(name);

}



#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	string s;

	cout << "uzunluk: " << s.size() << endl;
	cout << "uzunluk: " << s.length() << endl;

	if (s.empty())
		cout << "bos\n";
	else
		cout << "bos degil\n";
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	string s{ "aykut demiralp" };

	while (!s.empty()) {
		cout << "(" << s << ")" << endl;
		s.pop_back();
	}
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	string s{ "aykut demiralp" };

	cout << "(" << s << ")" << endl;
	s.clear();
	cout << "(" << s << ")" << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	string s{ "aykut demiralp" };

	cout << "(" << s << ")" << endl;
	s.erase(1, 3);
	cout << "(" << s << ")" << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	string s('A');  //gecersiz

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	string s1("A");
	cout << "(" << s1 << ")" << endl;
	string s2(1, 'A');

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	string s1(35, 'A');
	cout << "(" << s1 << ")" << endl;
	string s2{ 35, 'A' };  //initializer_list ctor
	cout << "(" << s2 << ")" << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;


int main()
{
	char *p = "bugun hava o kadar soguk ki \
ben cok usudum";

	cout << p << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	cout << R"(\"murat\")" << endl;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
arama iþlemleri
	belirli bir karakter arama
	belirli bir karakter grubu içindeki karakterlerden birini arama
	yazý içinde baþka bir yazý arama
	----
	aramayý baþtan sona mý sondan baþa mý doðru yapalým

ekleme (insert)
silme
replace
tokenize 
dönüþüm
trim
substring


#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	string s;
	auto cap = s.capacity();

	for (;;) {
		s.push_back('A');
		if (s.capacity() > cap) {
			cout << "kapasite " << cap << " degerinden " << s.capacity() << " degerine yukseldi" << endl;
			cap = s.capacity();
			getchar();
		}
	}



}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include "nutility.h"
using namespace std;

int main()
{
	string s(987777, 'A');

	cout << "size : " << s.size() << endl;
	cout << "cap  : " << s.capacity() << sl;

	s.erase(5);

	cout << "size : " << s.size() << endl;
	cout << "cap  : " << s.capacity() << sl;

	s.shrink_to_fit();

	cout << "size : " << s.size() << endl;
	cout << "cap  : " << s.capacity() << sl;


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main()
{
	string s;

	s.reserve(200000);

	s[10000] = 'A';  //RTE

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////


//size ne zaman (nasýl) büyür

resize
.insert()
.assign
=
+=
push_back()


//size ne zaman (nasýl) küçülür

resize
.erase()
.assign
=
clear
pop_back()


#include <string>
#include <iostream>
#include <vector>
#include "nutility.h"
using namespace std;

int main()
{
	string s{ "murat" };

	s.resize(20);

	for (size_t k = 0; k < s.size(); ++k)
		cout << static_cast<int>(s[k]) << " ";

	cout << sl;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////


string::npos


#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string s;

	cout << "bir cumle gir bakalim : ";
	getline(cin, s);
	//cin >> s;
	auto idx = s.find('a');
	if (idx != string::npos) {
		cout << "bulundu idx = " << idx << endl;
		s[idx] = 'X';
		cout << "(" << s << ")" << endl;
	}
	else {
		cout << "bulunamadi\n";
	}



}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
string, size_type idx, size_type n

5, string::npos)


#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string s;

	cout << "bir cumle gir bakalim : ";

	//cin >> s;
	getline(cin, s, '*');

	cout << "(" << s << ")" << endl;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

//[] iþlevleri gecersz idx olmasý surumunda exception throw etmezler
int main()
{
	string s{ "Eskisehir" };

	for (size_t k = 0; k < s.size(); ++k)
		cout << s[k] << " ";

	cout << sl;
	s[6] = 'X';

	cout << s << endl;

	s[352] = 'A';  //RTE no exception


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////




#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

//[] iþlevleri gecersz idx olmasý surumunda exception throw etmezler
int main()
{
	string s{ "Eskisehir" };

	for (size_t k = 0; k < s.size(); ++k)
		cout << s.at(k) << " ";

	cout << sl;
	s.at(6) = 'X';

	cout << s << endl;

	try {
		s.at(352) = 'A';  //throws out_or_range
	}
	catch (exception &r) {
		cout << "hata yakalandi... : " << r.what() << endl;
	}

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////




#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string s{ "ali" };

	cout << s[0] << endl;
	s[2] = 'X';

	const string cs{ "ali" };

	cout << cs[0] << endl;
	cs[2] = 'E';


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
	#include <string>
	#include <iostream>
	#include <vector>
	#include <list>
	#include <algorithm>
	#include "nutility.h"
	using namespace std;

	int main()
	{
		string s{ "neco" };

		s.back() = 'a';

		cout << "(" << s << ")" << endl;

		s.front() = 't';

		cout << "(" << s << ")" << endl;

	}
	/////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////




	#include <string>
	#include <iostream>
	#include <vector>
	#include <list>
	#include <algorithm>
	#include "nutility.h"
	using namespace std;

	int main()
	{
		string s{ "murathan" };

		//string::iterator iter = s.begin();
		auto iter = s.begin();

		*iter = 'X';

		cout << "(" << s << ")" << endl;



	}
	/////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////




#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string s{ "murathan" };

	for (auto iter = s.begin(); iter != s.end(); ++iter) {
		*iter = toupper(*iter);
	}

	cout << s << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string s{ "murathan" };

	cout << s.back() << endl;
	cout << s[s.length() - 1] << endl;
	cout << *--s.end() << endl;
	cout << *prev(s.end()) << endl;
	cout << *next(s.begin()) << endl;


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string s{ "HUSEYIN" };

	++*next(begin(s));

	cout << s << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////


#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string str{ "Muzaffer" };

	string::const_iterator citer = str.begin();

	cout << *citer << endl;

	*citer = 'A';  //gecersiz

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	vector<string> svec{ "aykut", "arman", "huseyin", "kardelen", "sinan", "omer" };

	for (auto iter = svec.begin(); iter != svec.end(); ++iter)
		iter->back()++;

	for (auto iter = svec.cbegin(); iter != svec.end(); ++iter)
		cout << *iter << endl;


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	int a[] = { 4, 7, 2, 8, 9, 1, 3, 6 };

	for (auto iter = begin(a); iter != end(a); ++iter)
		++*iter;
	///
	for (auto iter = cbegin(a); iter != cend(a); ++iter)
		cout << *iter << " ";

	cout << sl;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string s{ "nurettin" };

	string::const_reverse_iterator iter = s.rbegin();

	for (; iter != s.rend(); ++iter)
		cout << *iter << endl;


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string s{ "nurettin" };

	
	*(s.begin() + 2) = 'S';
	cout << s << endl;

	cout << end(s) - begin(s) << endl;


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string s{ "taylan akduman" };

	for (char c : s)
		cout << c << " ";

	cout << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string s{ "taylan akduman" };

	for (char c : s)
		cout << c << " ";

	cout << endl;


	for (char &c : s)
		++c;

	cout << s << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	vector<int> ivec{ 1, 34, 6, 3, 5, 1, 9 };

	for (auto i : ivec)
		++i;

	for (auto iter = ivec.begin(); iter != ivec.end(); ++iter) {
		int temp = *iter;
		++temp;
	}
		


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	vector<int> ivec{ 1, 34, 6, 3, 5, 1, 9 };

	for (auto &i : ivec)
		++i;

	for (auto iter = ivec.begin(); iter != ivec.end(); ++iter) {
		int &temp = *iter;
		++temp;
	}
		


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"
using namespace std;

int main()
{
	string str{ "necati-ekrem-ihsan-tahir-suzan" };

	//reverse(str.begin(), str.end());
	sort(str.begin(), str.end());

	cout << "(" << str << ")" << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////


#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//arama grubu iþlevleri

int main()
{
	string s;

	cout << "bir cumle soyle bana : ";
	getline(cin, s);

	auto idx = s.find('a');

	if (idx == string::npos)
		cout << "bulunamadi" << endl;
	else {
		cout << "bulundu idx = " << idx << endl;
	}




}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//arama grubu iþlevleri

int main()
{
	string s {"Vali geldi ali buraya"};

	auto idx = s.rfind("ali");

	if (idx == string::npos)
		cout << "bulunamadi" << endl;
	else {
		cout << "bulundu idx = " << idx << endl;
	}




}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//sub string iþlevi

int main()
{
	string str{ "eskisehir" };
	cout << str.substr(4, 5) << endl;
	cout << str.substr(3, 3) << endl;
	cout << str.substr(2) << endl;
	cout << str.substr() << endl;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//sub string iþlevi

int main()
{
	string s{ "<div><p>mustafa</p></div>" };

	auto idx1 = s.find("<p>");
	if (idx1 == string::npos) {
		cout << "paragraf yok" << endl;
		return 0;
	}

	auto idx2 = s.find("</p>", idx1 + 3);
	if (idx2 == string::npos) {
		cout << "kapanmamis tag hatasi\n";
		return 0;
	}

	cout << s.substr(idx1 + 3, idx2 - idx1 - 3) << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////




#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//sub string iþlevi

int main()
{
	string s{ "<div><p>mustafa</p></div>" };

	auto idx1 = s.find("<p>");
	if (idx1 == string::npos) {
		cout << "paragraf yok" << endl;
		return 0;
	}

	auto idx2 = s.find("</p>", idx1 + 3);
	if (idx2 == string::npos) {
		cout << "kapanmamis tag hatasi\n";
		return 0;
	}

	cout << string(s.begin() + idx1 + 3, s.begin() + idx2) << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//sub string iþlevi

int main()
{
	string str{ "bugun hava cok guzel" };

	str.erase(5, 5);

	cout << "(" << str << ")" << endl;

	str.erase(5);

	cout << "(" << str << ")" << endl;

	str.erase(1, 1);

	cout << "(" << str << ")" << endl;


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//sub string iþlevi

int main()
{
	string str{ "sinan" };

	str.erase(str.begin() + 1);

	cout << "(" << str << ")" << endl;
	str.erase(1, 1);
	cout << "(" << str << ")" << endl;



}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////




#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//sub string iþlevi

int main()
{
	string str;

	cout << "kelime gir : ";
	cin >> str;

	auto idx = str.find('a');
	if (idx == string::npos) {
		cout << "bulunamadi" << endl;
	}
	else {
		//str.erase(idx, 1);
		str.erase(str.begin() + idx);
		cout << "(" << str << ")" << endl;
	}

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//sub string iþlevi

int main()
{
	string s1, s2;

	cout << "iki kelime : ";
	cin >> s1 >> s2;

	auto idx = s1.find(s2);
	if (idx == string::npos) {
		cout << "bulunamadi" << endl;
	}
	else {
		s1.erase(idx, s2.size());
		cout << "(" << s1 << ")" << endl;

	}

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;


int main()
{
	vector<string> svec{ "aykut", "arman", "huseyin", "kardelen", "sinan", "omer" };

	//svec.erase(svec.begin() + 4);
	svec.erase(svec.begin() + 1, svec.end() - 2);

	display(svec.begin(), svec.end());
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////


#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//insert

int main()
{
	string str{ "ali" };

	cout << "uzunluk = " << str.size() << endl;

	str = "mustafa";

	cout << "uzunluk = " << str.size() << endl;


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//insert

int main()
{
	string str{ "ali" };

	cout << "uzunluk = " << str.size() << endl;

	str.resize(20, 'A');

	cout << "uzunluk = " << str.size() << endl;


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////




#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//insert

int main()
{
	string str{ "ali" };

	cout << "uzunluk = " << str.size() << endl;

	str += 'x';

	cout << "uzunluk = " << str.size() << endl;

	str += "123";

	cout << "uzunluk = " << str.size() << " " << str << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//insert

int main()
{
	string str{ "ali" };

	cout << "uzunluk = " << str.size() << endl;

	str.append(10, 'X');

	cout << "uzunluk = " << str.size() << endl;
	
	cout << str << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//insert

int main()
{
	string s1{ "can" };
	string str{ "ali" };

	str.insert(0, s1);
	cout << "(" << str << ")" << endl;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//harf karakterlerini sil rakam karakterlerinden bir tane daha ekle

int main()
{
	string s{ "*76kp-a1?34m" };

	for (size_t i = 0; i < s.length(); ++i) {
		if (isalpha(s[i])) {
			s.erase(i--, 1);
		}
		else if (isdigit(s[i])) {
			s.insert(i, 1, s[i]);
			++i;
		}
	}

	cout << "(" << s << ")" << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////




#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//harf karakterlerini sil rakam karakterlerinden bir tane daha ekle

int main()
{
	string str{ "istanbul antalya yozgat" };

	string s1, s2;

	cout << "hangi yazinin : ";
	cin >> s1;
	cout << "hangi yazi gelecek : ";
	cin >> s2;

	auto idx = str.find(s1);
	if (idx != string::npos) {
		str.erase(idx, s1.length());
		str.insert(idx, s2);
	}

	cout << "(" << str << ")" << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

//harf karakterlerini sil rakam karakterlerinden bir tane daha ekle

int main()
{
	string s1{ "istanbul" };
	string s2{ "antalya" };


	s1.replace(next(s1.begin()), prev(s1.end()), s2.begin(), s2.begin() + 4);

	cout << "(" << s1 << ")" << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

int main()
{
	string s{ "mustafa aksoy" };
	const char *p = s.c_str();

	puts(p);

	s += " uzun suredir gorusemedik seninle";

	puts(p);

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

int main()
{
	string str{ "bugun kendimi cok iyi hissetmiyorum babacim" };
	cout << "silinecek karakteri girin ";
	char c;
	cin >> c;

	cout << str.length() << endl;
	remove(str.begin(), str.end(), c);

	cout << str.length() << endl;



}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

int main()
{
	string str{ "ankarali kahraman asker adanaya vardi" };
	cout << "silinecek karakteri girin ";
	char c;
	cin >> c;

	cout << str.length() << endl;
	auto logic_end_iter = remove(str.begin(), str.end(), c);;
	display(str.begin(), logic_end_iter);

	cout << str.length() << endl;



}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

int main()
{
	string str{ "ankarali kahraman asker adanaya vardi" };
	cout << "silinecek karakteri girin ";
	char c;
	cin >> c;

	cout << str.length() << endl;
	auto logic_end_iter = remove(str.begin(), str.end(), c);;
	display(str.begin(), logic_end_iter);
	display(logic_end_iter, str.end());


	cout << str.length() << endl;



}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;

int main()
{
	string str{ "ankarali kahraman asker adanaya vardi" };
	cout << "silinecek karakteri girin ";
	char c;
	cin >> c;

	cout << "uzunluk = " << str.size() << endl;
	str.erase(remove(str.begin(), str.end(), c), str.end());

	display(str.begin(), str.end());
	cout << "uzunluk = " << str.size() << endl;





}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;


int main()
{
	string str{ "ankarali kahraman asker adanaya vardi" };

	cout << "uzunluk = " << str.size() << endl;
	str.erase(remove_if(str.begin(), str.end(), &isxdigit), str.end());

	display(str.begin(), str.end());
	cout << "uzunluk = " << str.size() << endl;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;


int main()
{
	vector<int> ivec(234, 8);
	int a[] = { 2, 56, 6, 3, 7 };
	////
	display(begin(ivec), end(ivec));
	display(begin(a), end(a));



}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;


//engine.h
class Engine {
	int x, y, z;
public:
	void start();
	void stop();
	void run();
};


//car.h
//#include "car.h"
class Car {
	Engine eng;
	int a[10];
public:

};

int main()
{
	cout << "sizeof(Car) = " << sizeof(Car) << endl;


}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;


//engine.h
class Engine {
	int x, y, z;
public:
	Engine()
	{
		std::cout << "Engine::Engine()" << endl;
	}
	void start();
	void stop();
	void run();
};


//car.h
//#include "car.h"
class Car {
	Engine eng;
public:
	Car() 
	{
		std::cout << "Car::Car()" << endl;
	}

};

int main()
{
	Car mycar;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;


class GearBox{
	int x, y, z;
public:
	GearBox()
	{
		std::cout << "GearBox::GearBox()" << endl;
	}
};




//engine.h
class Engine {
	int x, y, z;
public:
	Engine()
	{
		std::cout << "Engine::Engine()" << endl;
	}
	void start();
	void stop();
	void run();
};


//car.h
//#include "car.h"
class Car {
	GearBox gbx;
	Engine eng;
public:
	Car() 
	{
		std::cout << "Car::Car()" << endl;
	}

};

int main()
{
	Car mycar;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;


class GearBox{
	int x, y, z;
public:
	GearBox()
	{
		std::cout << "GearBox::GearBox()" << endl;
	}
};




//engine.h
class Engine {
	int x, y, z;
public:
	Engine()
	{
		std::cout << "Engine::Engine()" << endl;
	}
	void start();
	void stop();
	void run();
};


//car.h
//#include "car.h"
class Car {
	GearBox gbx;
	Engine eng;
public:
	Car() : eng{}, gbx{}
	{
		std::cout << "Car::Car()" << endl;
	}

};

int main()
{
	Car mycar;

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;


//engine.h
class Engine {
	int x, y, z;
public:
	Engine(int cyl)
	{
		std::cout << "Engine::Engine(int)" << endl;
	}
	void start();
	void stop();
	void run();
};


//car.h
//#include "car.h"
class Car {
	Engine eng;
public:
	Car()  //gecersiz
	{
		std::cout << "Car::Car()" << endl;
	}

};

int main()
{

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;


//engine.h
class Engine {
	int x, y, z;
public:
	Engine(int cyl)
	{
		std::cout << "Engine::Engine(int)" << endl;
	}
	void start();
	void stop();
	void run();
};


//car.h
//#include "car.h"
class Car {
	Engine eng;
public:
	Car(int x, int y): eng{x}
	{
		std::cout << "Car::Car()" << endl;
	}

};

int main()
{

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include "nutility.h"

using namespace std;


class Ticket{
	int mx{ 23 };
	std::vector<int> mvec{ 1, 5, 9, 9 }; //in-class initializer
public:
};


int main()
{

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#pragma once

#include <vector>
#include <iostream>


class Stack {
	std::vector<int> mvec;
public:
	void push(const int &val)
	{
		mvec.push_back(val);
	}
	void pop()
	{
		if (mvec.empty()) {
			std::cout << "bos yigindan pop hatasi..." << std::endl;
			exit(EXIT_FAILURE);
		}
		//mvec.erase(prev(mvec.end()));
		mvec.pop_back();
	}
	int &top()
	{
		if (mvec.empty()) {
			std::cout << "bos yigindan top hatasi..." << std::endl;
			exit(EXIT_FAILURE);
		}
		return mvec.back();
	}

	bool empty()const
	{
		return mvec.empty();
	}

	size_t size()
	{
		return mvec.size();
	}
	void clear()
	{
		mvec.clear();
	}
};


#include "istack.h"
#include "nutility.h"
#include <iostream>
#include <string>


using namespace std;

int main()
{
	Stack<string> st;

	st.push("Murat");
	st.push("Huseyin");
	st.push("Aykut");
	st.push("Kardelen");
	st.push("Sinan");
	st.push("Poyraz");

	cout << "size = " << st.size() << endl;

	while (!st.empty()) {
		cout << st.top() << " ";
		st.pop();
	}


}

#include "istack.h"
#include "nutility.h"
#include "fraction.h"

#include "date.h"

#include <iostream>
#include <string>
#include <stack>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;

bool isOk(const Fraction &f)
{
	return f < Fraction(1.);
}

int main()
{
	vector<Fraction> fvec;

	randomize();
	while (fvec.size() < 20)
		fvec.push_back(Fraction::RandomFraction());

	display(fvec.begin(), fvec.end());
	fvec.erase(remove_if(fvec.begin(), fvec.end(), &isOk), fvec.end());
	display(fvec.begin(), fvec.end());


}


#include "istack.h"
#include "nutility.h"
#include "fraction.h"
#include "date.h"
#include <iostream>
#include <string>
#include <stack>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;


class Game {
	std::vector<int> mvec{ 2, 3, 5, 7, 11 };  //since C++11
public:
	void display()const
	{
		for (auto i : mvec)
			std::cout << i << " ";
		std::cout << std::endl;
	}

};


int main()
{
	Game g;

	g.display();
}


#include "istack.h"
#include "nutility.h"
#include "fraction.h"
#include "date.h"
#include <iostream>
#include <string>
#include <stack>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;


class Engine {
public:
	Engine() {
		std::cout << "Engine::default ctor" << std::endl;

	}
	
	Engine(const Engine &c)
	{
		std::cout << "Engine::copy ctor" << std::endl;
	}
};


class Car {
	Engine e;
public:
	Car() = default;
	Car(const Car &c)
	{
		std::cout << "Car::copy ctor" << std::endl;
	}
};

int main()
{
	Car c1;

	Car c2{ c1 };

}


#include "istack.h"
#include "nutility.h"
#include "fraction.h"
#include "date.h"
#include <iostream>
#include <string>
#include <stack>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;


class CryptoTrader {
	std::string mname;
	Date mbdate;
	///
public:
	CryptoTrader(const std::string &name, const Date &d): mname{name}, mbdate{d} {}
	//
	void display()const {
		std::cout << "(" << mname << ", " << mbdate << ")" << std::endl;
	}
};

int main()
{
	CryptoTrader ctp{ "Aykut Ugurlar", Date{4, 7, 2002} };

	ctp.display();

	CryptoTrader ctp2{ ctp };

	ctp2.display();

}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
#include "istack.h"
#include "nutility.h"
#include "fraction.h"
#include "date.h"
#include <iostream>
#include <string>
#include <stack>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;


class CryptoTrader {
	std::string mname;
	Date mbdate;
	///
public:
	CryptoTrader(const std::string &name, const Date &d): mname{name}, mbdate{d} {}
	//
	CryptoTrader(const CryptoTrader &c)
	{
		/////
	}
	void display()const {
		std::cout << "(" << mname << ", " << mbdate << ")" << std::endl;
	}
};

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
int main()
{
	CryptoTrader ctp{ "Aykut Ugurlar", Date{4, 7, 2002} };

	ctp.display();

	CryptoTrader ctp2{ ctp };

	ctp2.display();

}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////


#include <string>
#include <utility>
#include <exception>
#include <Windows.h>




class ImageHelp {
public:
	static std::pair<size_t, size_t> getImageSize(const std::string &fname);
	static bool addSizeToName(const std::string &fname);

	///
};


class ImageHelpError : public std::exception{

};
///imagehelp.cpp

#define    STATIC
#define    PUBLIC

using namespace std;

STATIC PUBLIC 
std::pair<size_t, size_t> ImageHelp::getImageSize(const std::string &fname)
{
	FILE *f = fopen(fname.c_str(), "rb");
	if (!f)
		throw ImageHelpError{};
	
	fseek(f, 0L, SEEK_END);
	auto file_length = ftell(f);
	rewind(f);
	
	if (file_length < 24) {
		fclose(f);
		throw ImageHelpError{};
	}

	// Strategy:
	// reading GIF dimensions requires the first 10 bytes of the file
	// reading PNG dimensions requires the first 24 bytes of the file
	// reading JPEG dimensions requires scanning through jpeg chunks
	// In all formats, the file is at least 24 bytes big, so we'll read that always
	unsigned char buf[24]; 
	fread(buf, 1, 24, f);

	// For JPEGs, we need to read the first 12 bytes of each chunk.
	// We'll read those 12 bytes at buf+2...buf+14, i.e. overwriting the existing buf.
	if (buf[0] == 0xFF && buf[1] == 0xD8 && buf[2] == 0xFF && buf[3] == 0xE0 && buf[6] == 'J' && buf[7] == 'F' && buf[8] == 'I' && buf[9] == 'F')
	{
		long pos = 2;
		while (buf[2] == 0xFF)
		{
			const auto &c = buf[3];

			if (c == 0xC0 || c == 0xC1 || c == 0xC2 || c == 0xC3 || c == 0xC9 || c == 0xCA || c == 0xCB) 
				break;

			pos += 2 + (buf[4] << 8) + buf[5];
			
			if (pos + 12 > file_length) 
				break;
			
			fseek(f, pos, SEEK_SET);
			fread(buf + 2, 1, 12, f);
		}
	}

	fclose(f);

	
	// JPEG: (first two bytes of buf are first two bytes of the jpeg file; rest of buf is the DCT frame
	if (buf[0] == 0xFF && buf[1] == 0xD8 && buf[2] == 0xFF)
	{
		return make_pair((buf[9] << 8) + buf[10], (buf[7] << 8) + buf[8]);
	}

	// GIF: first three bytes say "GIF", next three give version number. Then dimensions
	if (string(reinterpret_cast<char *>(buf), 3) == "GIF")
	{
		return make_pair(buf[6] + (buf[7] << 8), buf[8] + (buf[9] << 8));
	}

	// PNG: the first frame is by definition an IHDR frame, which gives dimensions
	if (buf[0] == 0x89 && buf[1] == 'P' && buf[2] == 'N' && buf[3] == 'G' && buf[4] == 0x0D && buf[5] == 0x0A && buf[6] == 0x1A && buf[7] == 0x0A
		&& buf[12] == 'I' && buf[13] == 'H' && buf[14] == 'D' && buf[15] == 'R')
	{
		return make_pair((buf[16] << 24) + (buf[17] << 16) + (buf[18] << 8) + (buf[19] << 0),
			(buf[20] << 24) + (buf[21] << 16) + (buf[22] << 8) + (buf[23] << 0));
	}

	throw ImageHelpError{};

}

#include <cstdio>
#include <sstream>


PUBLIC
STATIC bool ImageHelp::addSizeToName(const string &fname)
{
	auto p = getImageSize(fname);
	ostringstream oss;

	oss << "-" << p.first << 'x' << p.second;
	string newName{ fname };
	auto idx = newName.rfind('.');
	if (idx == string::npos)
		throw 1;

	newName.insert(idx, oss.str());

	return static_cast<bool>(!rename(fname.c_str(), newName.c_str()));
}


#include <iostream>
#include "nutility.h"


int main()
{
	ImageHelp::addSizeToName("a.jpg");
	ImageHelp::addSizeToName("b.jpg");
	ImageHelp::addSizeToName("indir.jpg");
	ImageHelp::addSizeToName("images.jpg");


}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <windows.h>

void main()
{
    HANDLE fileHandle;
    WIN32_FIND_DATA ffd;
    LARGE_INTEGER szDir;
    WIN32_FIND_DATA fileData;
    fileHandle = FindFirstFile("C:\\Users\\rest_of_the_Address\\*", &ffd);

    if (INVALID_HANDLE_VALUE == fileHandle)
        printf("Invalid File Handle Value \n");

    do
    {
        printf("%s\n", ffd.cFileName);
    } while (FindNextFile(fileHandle, &ffd) != 0);
    system("pause");
}


#include <iostream>

using namespace std;

class Member {
	Member(Member &&) {}
public:
	Member() {}
	Member(const Member &) { cout << "Member Copy Ctor"; }
};

class A {
	Member m;
};

int main()
{
	A a1;
	A a2(move(a1));
}


#include <iostream>

using namespace std;

class Member {
public:
	Member &operator=(const Member &m)
	{
		std::cout << "Member copy assignmebt function\n";

		return *this;
	}
};

class A {
	Member m;
public:
};

int main()
{
	A a1, a2;

	a1 = a2;
}

#include <iostream>

using namespace std;

class Member {
public:
	Member &operator=(const Member &m)
	{
		std::cout << "Member copy assignment function\n";

		return *this;
	}
};

class A {
	Member m;
public:
	A& operator=(const A &r)
	{
		std::cout << "A copy assignment function\n";
		m = r.m;

		return *this;
	}
};

int main()
{
	A a1, a2;

	a1 = a2;
}
/////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

template<typename T>
void func(T x)
{
	cout << "template function type T is " << typeid(T).name() << endl;
}

void func(int)
{
	cout << "real runction func(int) " << endl;

}


int main()
{
	int x = 10;

	func(x);

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

template<typename T>
void func(T) = delete;



void func(int)
{
	cout << "real runction func(int) " << endl;

}


int main()
{
	int x = 10;

	func(&x);

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
vector<int>
getFreqVec(const string &s)
{
	vector<int> count_vec(26);
	for (char c: s) {  
		++count_vec[c - 'a'];

	return count_vec;  ///
}



string getSpecialCopy(const string &s, size_t n)
{
	map<char, int> cmap;
	string stemp{ s };

	for (size_t i = 0; i < stemp.length(); ++i) {
		++cmap[stemp[i]];
	}

	for (const auto &p : cmap) {
		if (p.second >= n) {
			stemp.erase(remove(stemp.begin(), stemp.end(), p.first), stemp.end());
		}
	}

	return stemp;
}


#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <string>


using namespace std;

string getSpecialCopy(const string &s, size_t n)
{
	map<char, int> cmap;
	string stemp{ s };

	for (size_t i = 0; i < stemp.length(); ++i) {
		++cmap[stemp[i]];
		if (cmap[stemp[i]] >= n) {
			stemp.erase(remove(stemp.begin(), stemp.end(), stemp[i]), stemp.end());
		}
	}

	return stemp;
}


int main()
{
	string s;
	size_t n;

	cout << "bir yazi bir de tamsayi : ";
	cin >> s >> n;

	cout << "(" << getSpecialCopy(s, n) << ")" << endl;

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <string>


using namespace std;

string getSpecialCopy(const string &s, size_t n)
{
	unordered_map<char, int> cmap;
	string stemp{ s };

	for (size_t i = 0; i < stemp.length(); ++i) {
		++cmap[stemp[i]];
		if (cmap[stemp[i]] >= n) {
			stemp.erase(remove(stemp.begin(), stemp.end(), stemp[i]), stemp.end());
		}
	}

	return stemp;
}


int main()
{
	string s;
	size_t n;

	cout << "bir yazi bir de tamsayi : ";
	cin >> s >> n;

	cout << "(" << getSpecialCopy(s, n) << ")" << endl;

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////



//incomplete (tamamlanmamýþ) türlerden türetme yapýlamaz.

class Base;

class Der : public Base {   //gecersiz

};

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////



//incomplete (tamamlanmamýþ) türlerden türetme yapýlamaz.

class Base {
public:
	void func(int);
	void foo(int, int);
	//
};

class Der : Base {   //private kalýtýmý   

};

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////



//incomplete (tamamlanmamýþ) türlerden türetme yapýlamaz.

class Base {
public:
	void func(int);
	void foo(int, int);
	//
};

class Der : public Base {   //private kalýtýmý   

};

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////




class Base {
public:
	void func(int);
	void foo(int, int);
	//
};

struct Der :  Base {   

};

int main()
{
	Der myder;

	myder.foo(23, 45);
}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

class Base {
public:
	void func(int);
	//
};

class Der :  public Base{   
	void func();
};

int main()
{
	Der myder;

	myder.func(23);
}






class Base {
public:
	void func(int);
	//
};

class Der : public Base {
public:
	void func();
};

int main()
{
	Der myder;

	myder.func();
	myder.Der::func();
	myder.Base::func(10);

}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
class Base {
public:
	void func(int);
	//
};

class Der : public Base {
	void func(int);
public:
};

int main()
{
	Der myder;
	
	myder.func(23);




void SpeedFighter::kill()
{

	/////
	shoot();

}


#include <iostream>


class Base {
private:
	void pri_func() {}
protected:
	void pro_func() {}
public:
	void pub_func() {}
};

class Der : public Base {
public:
	void derfoo()
	{
		//pri_func();  //gecersiz
		pro_func();
		pub_func();
	}
};

int main()
{
	Der myder;

	myder.pub_func();
	//myder.pro_func(); //gecersiz
	//myder.pri_func(); //gecersiz




}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
};

class Der : public Base{
public:
};

int main()
{
	Base mybase;
	Der myder;

	mybase = myder; //gecerli
	Base *baseptr = &myder;
	Base &baseref = myder;
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
};

class Der : public Base{
public:
};

int main()
{
	Base mybase;
	Der myder;

	//mybase = myder; //gecerli -----> object slicing (nesne dilimlenmesi)
	Base *baseptr = &myder;  //gecerli
	Base &baseref = myder;    //gecerli
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
};

class Der : public Base{
public:
};

int main()
{
	Base mybase;
	Der myder;

	//myder = mybase; //gecersiz
	//Der *derptr = &mybase;  //gecersiz
	//Der &derref = mybase;	//gecersiz
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
	int mx, my;
public:
	void setbase(int x, int y)
	{
		mx = x;
		my = y;
	}

};

class Der : public Base{
	double ma;
public:

};

int main()
{
	Der myder;

	myder.setbase(10, 20);

}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////


void carGame(Car *ptr)
{
	ptr->start();
	ptr->run();
}


void carGame(Car &r)
{
	r.start();
	r.run();
	//
}


#include <iostream>


class Base {
public:
	Base() {
		std::cout << "Base::Base()\n";
	}

};

class Der : public Base{
public:

};

int main()
{
	Der myder;


}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base() {
		std::cout << "Base::Base()\n";
	}

};

class Der : public Base{
public:
	Der() : Base{}
	{
		std::cout << "Der::Der()\n";
	}
};

int main()
{
	Der myder;


}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base(int x) {
		std::cout << "Base::Base(int)\n";
		std::cout << "x = " << x << std::endl;
	}

};

class Der : public Base{
public:
	Der() : Base(10)
	{
		std::cout << "Der::Der()\n";
	}
};

int main()
{
	Der myder;

}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base(int x) {
		std::cout << "Base::Base(int)\n";
		std::cout << "x = " << x << std::endl;
	}

};

class Der : public Base{
public:
	Der() : Base{10}
	{
		std::cout << "Der::Der()\n";
	}
};

int main()
{
	Der myder;

}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base() {
		std::cout << "Base::Base()\n";
	}
	Base(int x) {
		std::cout << "Base::Base(int)\n";
		std::cout << "x = " << x << std::endl;
	}
	Base(double x) {
		std::cout << "Base::Base(double)\n";
		std::cout << "x = " << x << std::endl;
	}
	Base(int x, int y) {
		std::cout << "Base::Base(int, int)\n";
		std::cout << "x = " << x << std::endl;
		std::cout << "y = " << y << std::endl;
	}
};


class DerA : public Base {

};

class DerB : public Base {
public:
	DerB() : Base{ 0 }
	{

	}
};


class DerC : public Base {
public:
	DerC() : Base{ 2.3 }
	{

	}
};

class DerD : public Base {
public:
	DerD() : Base{ 1, -1}
	{

	}
};



int main()
{
	DerA x;
	DerB y;
	DerC z;
	DerD t;



}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base() {
		std::cout << "Base::Base()\n";
	}
};

class Member{
public:
	Member() {
		std::cout << "Member::Member()\n";
	}
};


class Der : public Base {
	Member m;
public:
	Der() 
	{
		std::cout << "Der::DER()" << std::endl;
	}
};

int main()
{
	Der myder;

}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base() {
		std::cout << "Base::Base()\n";
	}
	Base(const Base &r) {
		std::cout << "Base(const Base &r)\n";
	}
};

class Der : public Base {
public:
};

int main()
{
	Der myder1;
	Der myder2{ myder1 };

}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base() {
		std::cout << "Base::Base()\n";
	}
	Base(const Base &r) {
		std::cout << "Base(const Base &r)\n";
	}
};

class Der : public Base {
public:
	Der() = default;
	Der(const Der &r) 
	{
		std::cout << "Der(const Der &r)\n";

	}
};

int main()
{
	Der myder1;
	Der myder2{ myder1 };

}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base() {
		std::cout << "Base::Base()\n";
	}
	Base(const Base &r) {
		std::cout << "Base(const Base &r)\n";
	}
};

class Der : public Base {
public:
	Der() = default;
	Der(const Der &r) : Base{r}
	{
		std::cout << "Der(const Der &r)\n";

	}
};

int main()
{
	Der myder1;
	Der myder2{ myder1 };

}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base &operator=(const Base &r)
	{
		std::cout << "Base::operator=(const Base &r)\n";
		return *this;
	}

};

class Der : public Base {
public:
};

int main()
{
	Der myder1;
	Der myder2;

	myder1 = myder2;

}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base &operator=(const Base &r)
	{
		std::cout << "Base::operator=(const Base &r)\n";
		return *this;
	}

};

class Der : public Base {
public:
	Der &operator=(const Der &r)
	{
		std::cout << "Der::operator=(const Der &r)\n";
		Base::operator=(r);

		return *this;
	}
};

int main()
{
	Der myder1;
	Der myder2;

	myder1 = myder2;

}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>


class Base {
public:
	Base &operator=(const Base &r)
	{
		std::cout << "Base::operator=(const Base &r)\n";
		return *this;
	}

};

class Der : public Base {
public:
	Der &operator=(const Der &r)
	{
		std::cout << "Der::operator=(const Der &r)\n";
		
		Base::operator=(r);
		(static_cast<Base *>(this))->operator=(r);
		*(Base *)this = r;

		return *this;
	}
};

int main()
{
	Der myder1;
	Der myder2;

	myder1 = myder2;

}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"	

class Car {
public:
	virtual void start()
	{
		std::cout << "Car engine is starting.....\n";
	}
	virtual void run()
	{
		std::cout << "Car is running.....\n";
	}

	virtual void stop()
	{
		std::cout << "Car has just stopped.....\n";
	}
};


class Mercedes : public Car {
public:
	void start()
	{
		std::cout << "Mercedes engine is starting.....\n";
	}
	void run()
	{
		std::cout << "Mercedes is running.....\n";
	}

	void stop()
	{
		std::cout << "Mercedes has just stopped.....\n";
	}
};


class Audi: public Car {
public:
	void start()
	{
		std::cout << "Audi engine is starting.....\n";
	}
	void run()
	{
		std::cout << "Audi is running.....\n";
	}

	void stop()
	{
		std::cout << "Audi has just stopped.....\n";
	}
};


class Opel : public Car {
public:
	void start()
	{
		std::cout << "Opel engine is starting.....\n";
	}
	void run()
	{
		std::cout << "Opel is running.....\n";
	}

	void stop()
	{
		std::cout << "Opel has just stopped.....\n";
	}
};


void carGame(Car *ptr)
{
	ptr->start();
	ptr->run();
	ptr->stop();
}

int main()
{
	randomize();

	for (;;) {
		switch (rand() % 3) {
		case 0: std::cout << "Mercedes\n"; carGame(new Mercedes);  break;
		case 1: std::cout << "Audi\n"; carGame(new Audi);  break;
		case 2: std::cout << "Opel\n"; carGame(new Opel);  break;
		}
		getchar();
	}
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"	


class Base {
public:
	void f1();
	virtual void f2(); //virtual
	virtual void f3() = 0;  //pure virtual
};


int main()
{
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"	


class Base {
public:
	virtual void vfunc(int);
};

class Der : public Base {
public:
	void vfunc(int);  ///overrides Bases's vfunc
};

int main()
{
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"	


class Base {
public:
	virtual void vfunc(int);
};

class Der : public Base {
public:
	void vfunc(int, int); //Der declares  its own vfunc (legal)
};

int main()
{
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"	

using namespace std;

class Base {
public:
	virtual void vfunc(int x)
	{
		cout << "void Base::vfunc(int)" << endl;
	}
};

class Der1 : public Base {
public:
	void vfunc(int x)
	{
		cout << "void Der1::vfunc(int)" << endl;
	}
};

class Der2 : public Base {
public:
	void vfunc(int x)
	{
		cout << "void Der2::vfunc(int)" << endl;
	}
};

int main()
{
	Base *ptr;
	Der1 der1;
	Der2 der2;

	for (;;) {
		if (rand() % 2) {
			cout << "Der1" << endl;
			ptr = new Der1;
		}
		else {
			cout << "Der2" << endl;
			ptr = new Der2;
		}
		ptr->vfunc(10);
		getchar();
	}
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"	

using namespace std;

class Base {
public:
	virtual void vfunc(int x)
	{
		cout << "void Base::vfunc(int)" << endl;
	}
};

class Der1 : public Base {
public:
	void vfunc(int x)
	{
		cout << "void Der1::vfunc(int)" << endl;
	}
};

class Der2 : public Base {
public:
	void vfunc(int x)
	{
		cout << "void Der2::vfunc(int)" << endl;
	}
};

void func(Base &r)
{
	r.vfunc(10);
}

int main()
{
	for (;;) {
		if (rand() % 2) {
			cout << "Der1" << endl;
			func(*new Der1);
		}
		else {
			cout << "Der2" << endl;
			func(*new Der2);
		}
		getchar();
	}
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"	

using namespace std;

class Base {
public:
	virtual void vfunc(int x)
	{
		cout << "void Base::vfunc(int)" << endl;
	}
};

class Der1 : public Base {
public:
	void vfunc(int x)
	{
		cout << "void Der1::vfunc(int)" << endl;
	}
};

class Der2 : public Base {
public:
	void vfunc(int x)
	{
		cout << "void Der2::vfunc(int)" << endl;
	}
};

void func(Base r)  //object slicing
{
	r.vfunc(10);
}

int main()
{
	for (;;) {
		if (rand() % 2) {
			cout << "Der1" << endl;
			func(*new Der1);
		}
		else {
			cout << "Der2" << endl;
			func(*new Der2);
		}
		getchar();
	}
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"	

using namespace std;

class Base {
public:
	virtual void vfunc(int x)
	{
		cout << "void Base::vfunc(int)" << endl;
	}
};

class Der1 : public Base {
public:
	void vfunc(int x)
	{
		cout << "void Der1::vfunc(int)" << endl;
	}
};

class Der2 : public Base {
public:
	void vfunc(int x)
	{
		cout << "void Der2::vfunc(int)" << endl;
	}
};

void func(Base r)  //object slicing
{
	r.vfunc(10);
}

int main()
{
	for (;;) {
		if (rand() % 2) {
			cout << "Der1" << endl;
			func(*new Der1);
		}
		else {
			cout << "Der2" << endl;
			func(*new Der2);
		}
		getchar();
	}
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include "nutility.h"	

using namespace std;

class Base {
public:
	virtual void vfunc()
	{
		cout << "void Base::vfunc()" << endl;
	}
};

class Der : public Base {
public:
	void vfunc()
	{
		cout << "void Der::vfunc()" << endl;
	}
};


class SDer : public Der{
public:
	void vfunc()
	{
		cout << "void SDer::vfunc()" << endl;
	}
};


class SSDer : public SDer {
public:
	void vfunc()
	{
		cout << "void SSDer::vfunc()" << endl;
	}
};



void foo(Base *p)
{
	p->vfunc();
}


int main()
{
	randomize();

	for (;;) {
		switch (rand() % 3) {
		case 0: cout << "Der" << endl; foo(new Der); break;
		case 1: cout << "SDer" << endl; foo(new SDer); break;
		case 2: cout << "SSDer" << endl; foo(new SSDer); break;
		}
		getchar();
	}
}


#include <iostream>
#include "nutility.h"	

using namespace std;

class Car{
public:
	virtual void vfunc()const;
};


void override(int x)
{

}

int main()
{
	int override = 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

#include <iostream>
#include "nutility.h"	

using namespace std;

class Base {
public:
	virtual void vfunc()
	{
		cout << "void Base::vfunc()" << endl;
	}
};

class Der : public Base {
public:
	void vfunc()override
	{
		cout << "void Der::vfunc()" << endl;
	}
};


void foo(Base *p)
{
	p->vfunc();
	p->Base::vfunc();

}


int main()
{
	foo(new Der);
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////


#include <iostream>
#include "nutility.h"	

using namespace std;

class Base {
public:
	virtual void vfunc()
	{
		cout << "void Base::vfunc()" << endl;
	}
};

class Der1 : public Base {
public:
	void vfunc()override
	{
		cout << "void Der1::vfunc()" << endl;
	}
};


class Der2 : public Der1 {
public:
	void vfunc()override
	{
		cout << "void Der2::vfunc()" << endl;
	}
};


class Der3 : public Der2 {
public:
	/*void vfunc()override
	{
		cout << "void Der3::vfunc()" << endl;
	}*/
};

void foo(Base *p)
{
	p->vfunc();
}


int main()
{
	foo(new Der3);
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////


#include <iostream>
#include "nutility.h"	

using namespace std;

class Base {
public:
	Base()
	{
		cout << "void Base::Base()" << endl;
		this->vfunc();
	}

	virtual void vfunc()
	{
		cout << "void Base::vfunc()" << endl;
	}
};

class Der : public Base {
public:
	void vfunc()override
	{
		cout << "void Der::vfunc()" << endl;
	}
};


int main()
{
	Der myder;

}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////


sanallýk mekanizmasýnýn devreye girmediði yerler

1) Sanal iþleve çaðrý taban sýnýf nesnesi ile yapýlýrsa (object slicing)
2) Sanal iþleve çaðrý çözünürlük op. ile yapýlýrsa (object slicing)
3) Sanal iþleve çaðrý taban sýnýf ctor.ý içinde 
4) Sanal iþleve çaðrý taban sýnýf destructor.ý içinde 

------------------------------------------------------------------------------------


void carRace(Car &r)
{
	Buraya hangi türden araba gelmiþsw o türden bi araba daha hayata gelsin
	r.drive();

}



ptr->func();




class Car {

public:
	virtual void drive()
	{
		std::cout << "Car is running" << endl;
	}
};

class Dacia : public Car{
	virtual void drive()override
	{
		std::cout << "Dacia is running" << endl;
	}
public:
};

void foo(Car *ptr)
{
	////
	ptr->drive();
}

int main()
{
	foo(new Dacia);

}


#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Car {

public:
	virtual void drive()
	{
		std::cout << "Car is running" << endl;
	}
};

class Dacia : public Car {
	virtual void drive()override
	{
		std::cout << "Dacia is running" << std::endl;
	}
public:
};

void foo(Car *ptr)
{
	////
	ptr->drive();
}

int main()
{
	auto p = new Dacia;
	foo(p);

	p->drive(); //gecersiz

}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Car {

public:
	virtual void drive(double speed = 180.)
	{
		std::cout << "Car is running at speed  " << speed << endl;
	}
};

class Bmw : public Car {
public:
	virtual void drive(double speed = 90.)override
	{
		std::cout << "Bmw is running at speed  " << speed << endl;
	}
public:
};

void foo(Car *ptr)
{
	ptr->drive();
}

int main()
{
	auto p = new Bmw;
	foo(p);
	p->drive();


}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Car {

public:
	virtual void drive(double speed = 180.)
	{
		std::cout << "Car is running at speed  " << speed << endl;
	}
};

class Bmw : public Car {
	
public:
};

int main()
{
	Car *p = new Bmw;

	cout << typeid(*p).name() << endl;

}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Car {
	std::string m_color;
	int m_age;
public:
	Car(const std::string &color, int age) : m_color{ color }, m_age{age}{}
	virtual void display(std::ostream &os)const = 0;
};


class Bmw : public Car{
public:
	Bmw(const std::string &color, int age) : Car{color, age} {}
	virtual void display(std::ostream &os) const override
	{
		os << "Bu bir Bmw" << endl;
	}




};


class Mercedes : public Car {
public:
	Mercedes(const std::string &color, int age) : Car{ color, age } {}
	virtual void display(std::ostream &os) const override
	{
		os << "Bu bir Mercedes" << endl;
	}
};

class Volvo : public Car {
public:
	Volvo(const std::string &color, int age) : Car{ color, age } {}
	virtual void display(std::ostream &os) const override
	{
		os << "Bu bir Volvo" << endl;
	}
};

using namespace std;

std::ostream & operator<<(std::ostream &os, const Car &rcar)
{
	rcar.display(os);
	return os;
}


int main()
{
	randomize();
	Car *p;

	for (;;) {
		switch (rand() % 3) {
		case 0: cout << "BMW case";  p = new Bmw{ "Kirmizi", 5 }; break;
		case 1: cout << "Mercedes case";  p = new Mercedes{ "Mavi", 3 }; break;
		case 2: cout << "Volvo case";  p = new Volvo{ "Sari", 5 }; break;
		}

		cout << *p << endl;
		getchar();
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Car {
	std::string m_color;
	int m_age;
public:
	Car(const std::string &color, int age) : m_color{ color }, m_age{age}{}
	virtual void display(std::ostream &os)const = 0;
	virtual void drive() = 0;

};

class Audi : public Car {
public:
	Audi(const std::string &color, int age) : Car{ color, age } {}
	virtual void display(std::ostream &os)const override;
};

int main()
{
	Audi myaudi{ "green", 3 };

	//Car mycar{ "blue", 10 };  //gecersiz
	//Car *ptr;

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

	Virtual destructor
	(sanal sonlandýrýcý iþlev)


Bmw *p = new Bmw;

//////
delete ptr;


#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;


class Base {
public:
	Base() {
		std::cout << "Base nesnesi onlarca kaynak edinildi\n";
	}

	~Base() {
		std::cout << "Base nesnesi icin ayrilan onlarca kaynak geri verildi\n";
	}
};


class Der : public Base{
public:
	Der() {
		std::cout << "Der ctor\n";
	}

	~Der() {
		std::cout << "Der destructor\n";
	}
};



int main()
{
	Der *derptr = new Der;

	delete derptr;

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;


class Base {
public:
	Base() {
		std::cout << "Base nesnesi onlarca kaynak edinildi\n";
	}

	virtual ~Base() {
		std::cout << "Base nesnesi icin ayrilan onlarca kaynak geri verildi\n";
	}
};


class Der : public Base{
public:
	Der() {
		std::cout << "Der nesnesi icin yuzlerce kaynak edinildi\n";
	}

	~Der() {
		std::cout << "Der nesnesi icin yuzlerce kaynak geri verildi \n";
	}
};



int main()
{
	Base *baseptr = new Der;

	delete baseptr;

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Base {
public:
	void func()
	{
		cout << "Base::func()" << endl;
	}
};


class Der : public Base{
public:
	void func(int)
	{
		cout << "Base::func(int)" << endl;
	}
};

int main()
{
	Der myder;

	myder.func(); //gecersiz
}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Base {
public:
	void func()
	{
		cout << "Base::func()" << endl;
	}
};


class Der : public Base{
public:
	void func()
	{
		Base::func();
	}
	void func(int)
	{
		cout << "Base::func(int)" << endl;
	}
};

int main()
{
	Der myder;

	myder.func();
	myder.func(12);

	
}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Base {
public:
	void func()
	{
		cout << "Base::func()" << endl;
	}
	void func(double)
	{
		cout << "Base::func(double)" << endl;
	}

	void func(int, int)
	{
		cout << "Base::func(int, int)" << endl;
	}

	void func(double, double)
	{
		cout << "Base::func(double, double)" << endl;
	}

};


class Der : public Base{
public:
	void func()
	{
		Base::func();
	}
	void func(double d)
	{
		Base::func(d);
	}

	void func(int x , int y)
	{
		Base::func(x, y);
	}

	void func(double x , double y)
	{
		Base::func(x, y);

	}
	void func(int)
	{
		cout << "Base::func(int)" << endl;
	}
};

int main()
{
	Der myder;

	myder.func();
	myder.func(12);
	myder.func(12.3);
	myder.func(12, 3);
	myder.func(12., 3.);
}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Base {
public:
	void func()
	{
		cout << "Base::func()" << endl;
	}
	void func(double)
	{
		cout << "Base::func(double)" << endl;
	}

	void func(int)
	{
		cout << "Base::func(int)" << endl;
	}

	void func(int, int)
	{
		cout << "Base::func(int, int)" << endl;
	}

	void func(double, double)
	{
		cout << "Base::func(double, double)" << endl;
	}

};


class Der : public Base{
public:
	using Base::func;

	void func(int)
	{
		cout << "Der::func(int)" << endl;
	}
};

int main()
{
	Der myder;

	myder.func(12);  //Der::func(int)
	
}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

//fighter.h
class Fighter {
	////
public:
	Fighter(const std::string &name, int age);
	Fighter(int wpcnt, const string &rname);
	Fighter(const std::string &fathername);
	////
	void run();
	void jump();
	void shoot();
};


class XFighter : public Fighter {
public:
	XFighter(const std::string &name, int age) : Fighter{ name, age } {}
	XFighter(int wpcnt, const string &rname) : Fighter{ wpcnt, rname} {}
	XFighter(const std::string &fathername) : Fighter{fathername} {}
	void strangle();
};



int main()
{
	XFighter x("Murtaza", 34);

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

//fighter.h
class Fighter {
	////
public:
	Fighter(const std::string &name, int age);
	Fighter(int wpcnt, const string &rname);
	Fighter(const std::string &fathername);
	////
	void run();
	void jump();
	void shoot();
};


class XFighter : public Fighter {
public:
	using Fighter::Fighter;
	void strangle();
};



int main()
{
	XFighter x("Murtaza", 34);

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Fighter {
	void run();
public:
	
};


class XFighter : public Fighter {
public:
	using Fighter::run;  //gecersiz
};



int main()
{

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Base {
public:
	void func();
	///
};


class Der final : public Base {

};


class SDer  : public Der{  //gecersiz

};

int main()
{

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Base {
public:
	virtual void func();
	///
};


class Der : public Base {
public:
	void func()final override;
};

class SDer : public Der {
public:
	void func()override;  //gecersiz
};


int main()
{

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;


int main()
{
	int final = 0, override = 10;

}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

polimorfik liste


#include <string>
#include <ostream>
#include <iostream>
#include <iomanip>
#include <vector>
#include <sstream>
#include <cmath>
#include <memory>
#include "nutility.h"


class Shape {
public:
	//
	virtual double getArea()const = 0;
	virtual double getPerimeter()const = 0;
	virtual std::string getValues()const = 0;
	virtual std::string getName()const = 0;
};

class Square : public Shape {
	double m_side;
public:
	Square(double side) : m_side{side} {}
	double getArea()const override { return m_side * m_side; }
	double getPerimeter()const override { return 4. * m_side; }
	std::string getValues()const override 
	{
		std::ostringstream oss;
		oss << "Kenar : " << m_side;
		return oss.str();
	}
	std::string getName()const override
	{
		return "Kare";
	}
};

class Rectangle: public Shape {
	double m_side1, m_side2;
public:
	Rectangle(double side1, double side2) : m_side1{ side1 }, m_side2 {side2}{}
	double getArea()const override { return m_side1 * m_side2; }
	double getPerimeter()const override { return 2. * (m_side1 + m_side2); }
	std::string getValues()const override
	{
		std::ostringstream oss;
		oss << "Kenar 1 : " << m_side1 << std::endl;
		oss << "Kenar 2 : " << m_side2;;

		return oss.str();
	}
	std::string getName()const override
	{
		return "Dikdortgen";
	}
};

class Triangle: public Shape {
	double ms1, ms2, ms3;
public:
	Triangle(double side1, double side2, double side3) : ms1{ side1 }, ms2{ side2 }, ms3{ side3 } {}
	double getArea()const override 
	{
		double u = getPerimeter() / 2;
		return sqrt(u * (u - ms1) * (u - ms2) * (u - ms3));
	}

	double getPerimeter()const override
	{
		return ms1 + ms2 + ms3;
	}

	std::string getValues()const override
	{
		std::ostringstream oss;
		oss << "Kenar 1 : " << ms1 << std::endl;
		oss << "Kenar 2 : " << ms2 << std::endl;
		oss << "Kenar 3 : " << ms3;

		return oss.str();
	}

	std::string getName()const override
	{
		return "Ucgen";
	}
};

enum Eshape {SQUARE, RECTANGLE, TRIANGLE, CIRCLE};

class Circle : public Shape {
	double mr;
public:
	Circle(double r) : mr{r} {}
	double getArea()const override { return 3.1415928 * mr * mr; }
	double getPerimeter()const override {
		return 2. * 3.1415928 * mr;
	}
	std::string getValues()const override
	{
		std::ostringstream oss;
		oss << "Yaricap : " << mr;
		return oss.str();
	}
	std::string getName()const override
	{
		return "Daire";
	}
};

using namespace std;

double drand()
{
	return rand() % 10 + 1 + static_cast<double>(rand()) / RAND_MAX;
}

void displayShapeInfo(std::ostream &os, const Shape &s)
{
	os << "sekil   : " << s.getName() << endl;
	os << "degerler : " << endl;
	os << s.getValues() << endl;
	os << "Alan  : " << s.getArea() << endl;
	os << "Cevre : " << s.getPerimeter() << endl;
	os << sl;
}

bool isTriangle(double d1, double d2, double d3)
{
	return  abs(d1 - d2) < d3 && d1 + d2 > d3 &&
		abs(d1 - d3) < d2 && d1 + d3 > d2 &&
		abs(d3 - d2) < d1 && d3 + d2 > d1;
}

void getRandomT(double &d1, double &d2, double &d3)
{
	while (d1 = drand(), d2 = drand(), d3 = drand(), !isTriangle(d1, d2, d3))
		;
}

Shape *createRandomShape()
{
	double d1, d2, d3;

	switch (rand() % 4) {
	case Eshape::SQUARE : return new Square{ drand() }; 
	case Eshape::RECTANGLE: return new Rectangle{ drand(),  drand()};
	case Eshape::CIRCLE: return new Circle{ drand()};
	case Eshape::TRIANGLE: 
		getRandomT(d1, d2, d3);
		return new Triangle(d1, d2, d3);
	}
}


int main()
{
	vector<Shape *> spvec;

	randomize();

	for (int k = 0; k < 1000; ++k)
		spvec.push_back(createRandomShape());
	//////

	for (const auto &sp : spvec) {
		displayShapeInfo(cout, *sp);
		getchar();
	}

	////
}


#include <string>
#include <ostream>
#include <iostream>
#include <iomanip>
#include <vector>
#include <sstream>
#include <cmath>
#include <iostream>
#include "nutility.h"
#include "imgutil.h"

using namespace std;

int main()
{
	if (addSizeToName("c.jpg"))
		cout << "operasyon basarili" << endl;
	else
		cout << "operasyon basarisiz" << endl;
}
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"


class Base1 {
public:
	void func1();
	void foo1();
	void g1();
};

class Base2 {
public:
	void func2();
	void foo2();
	void g2();
};


class Mder : public Base1, public Base2 {

};

using namespace std;



int main()
{
	Mder myder;

}
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"


class Base1 {
public:
	Base1()
	{
		std::cout << "Base1::constructor\n";
	}
};

class Base2 {
public:
	Base2()
	{
		std::cout << "Base2::constructor\n";
	}
};


class Mder : public Base2, public Base1 {

};

using namespace std;



int main()
{
	Mder myder;

}
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"


class Base1 {
public:
	void func() {}
};

class Base2 {
public:
	void func(int) {}
};


class Mder : public Base1, public Base2 {

};

using namespace std;



int main()
{
	Mder myder;

	myder.func();  //gecersiz

}
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"


class Base1 {
public:
	void func() {}
};

class Base2 {
public:
	void func(int) {}
};


class Mder : public Base1, public Base2 {

};

using namespace std;



int main()
{
	Mder myder;

	myder.Base1::func();  //gecerli
	myder.Base2::func(10);  //gecerli

}
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"


class Base1 {
public:
	void func() {}
};

class Base2 {
public:
	void func(int) {}
};


class Mder : public Base1, public Base2 {
public:
	void g()
	{
		//func(12);  name lookup error (ambigous)
		Base1::func();
		Base2::func(12);  //gecersiz

	}
};

using namespace std;



int main()
{
	Mder myder;

	myder.Base1::func();  //gecerli
	myder.Base2::func(10);  //gecerli

}
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"


class Base1 {
public:
};

class Base2 {
public:
};


class Mder : public Base1, public Base2 {
public:
};

using namespace std;

void gfunc1(Base1 &);
void gfunc2(Base2 &);



int main()
{
	Mder myder;

	gfunc1(myder);
	gfunc2(myder);

}
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"


class Base1 {
public:
	virtual void cf1() = 0;
};

class Base2 {
public:
	virtual void cf2() = 0;
};


class Mder : public Base1, public Base2 {
public:
	void cf1()override;
	void cf2()override;
};

using namespace std;

int main()
{
	Mder myder;


}
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"


class Device {
public:
	void turn_on() {}
};

class Fax : public Device{
public:
};

class Modem : public Device{
public:
};


class FaxModem : public Fax, public Modem{
public:
};

using namespace std;

int main()
{
	FaxModem fm;

	//fm.turn_on();  //gecersiz cift anlamlýlýk hatasý
	fm.Fax::turn_on();  //gecerli
	fm.Modem::turn_on();  //gecerli


}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

#include <string>
#include <iostream>
#include "nutility.h"


class Device {
public:
	void turn_on() {}
};

class Fax : public Device{
public:
};

class Modem : public Device{
public:
};


class FaxModem : public Fax, public Modem{
public:
	void checkxyz()
	{
		//turn_on();  c.a.h
		Fax::turn_on();
		Modem::turn_on();

		//static_cast<Modem *>(this)->turn_on
	}
};

using namespace std;

int main()
{

}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"


class Device {
public:
	void turn_on() {}
};

class Fax : public Device{
public:
};

class Modem : public Device{
public:
};


class FaxModem : public Fax, public Modem{
public:
};

void func(Device &);


using namespace std;

int main()
{
	FaxModem fm;

	//func(fm); gecersiz
	func(static_cast<Fax &>(fm));
	func(static_cast<Modem &>(fm));

}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Device {
	bool m_on_flag;
public:
	Device() : m_on_flag{false} {}
	bool ison() const { return m_on_flag; }
	void turn_on() {
		m_on_flag = true;
		std::cout << "cihaz acildi.... beeeeep!!!!!!!" << std::endl;
	}

	void turn_off()
	{
		m_on_flag = false;
		std::cout << "cihaz kapatildi.... diiiiit!!!!!!!" << std::endl;
	}

};

class Fax : virtual public Device{
public:
	void sendFax()
	{
		if (!ison()) {
			std::cout << "cihaz kapali olduugundan fax gonderemiyoruz...." << endl;
			std::cout << "cihazi ac geri zekali!!!!" << endl;
		}
		else {
			std::cout << "fax gonderildi" << endl;
		}
	}
};

class Modem : virtual public Device {
public:
	void sendData()
	{
		if (!ison()) {
			std::cout << "cihaz kapali olduugundan data transferi yapilamiyor ...." << endl;
			std::cout << "cihazi acin lutfen!!!!!!!!" << endl;
		}
		else {
			std::cout << "data transferi yapildi" << endl;
		}
	}
};



class FaxModem : public Fax, public Modem{
public:
};

using namespace std;

class Base {
public:
	Base(int) {};
};

class Der : public Base {
public:
	Der(int x, int y): Base{x} {}
};

class SDer : public Der {
public:
	SDer(int x) : Der{x, 0} {}
};



int main()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Device {
	bool m_on_flag;
public:
	Device() : m_on_flag{false} {}
	bool ison() const { return m_on_flag; }
	void turn_on() {
		m_on_flag = true;
		std::cout << "cihaz acildi.... beeeeep!!!!!!!" << std::endl;
	}

	void turn_off()
	{
		m_on_flag = false;
		std::cout << "cihaz kapatildi.... diiiiit!!!!!!!" << std::endl;
	}

};

class Fax : virtual public Device{
public:
	void sendFax()
	{
		if (!ison()) {
			std::cout << "cihaz kapali olduugundan fax gonderemiyoruz...." << endl;
			std::cout << "cihazi ac geri zekali!!!!" << endl;
		}
		else {
			std::cout << "fax gonderildi" << endl;
		}
	}
};

class Modem : virtual public Device {
public:
	void sendData()
	{
		if (!ison()) {
			std::cout << "cihaz kapali olduugundan data transferi yapilamiyor ...." << endl;
			std::cout << "cihazi acin lutfen!!!!!!!!" << endl;
		}
		else {
			std::cout << "data transferi yapildi" << endl;
		}
	}
};



class FaxModem : public Fax, public Modem{
public:
};

using namespace std;

class Base {
public:
	Base(int) {};
};

class Der : public Base {
public:
	Der(int x, int y): Base{x} {}
};

class SDer : public Der {
public:
	SDer(int x) : Der{x, 0} {}
};



int main()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class Device {
public:
	Device(int x) 
	{
		std::cout << "Device(int)" << std::endl;
		std::cout << "x = " << x << std::endl;
		std::cout << sl;

	}
};

class Fax : virtual public Device{
public:
	Fax() : Device{ 12 } {
		std::cout << "Fax(int)" << std::endl;
	}
};

class Modem : virtual public Device {
public:
	Modem() : Device{ 234 } {
		std::cout << "Modem(int)" << std::endl;
	}
};



class FaxModem : public Fax, public Modem{
public:
	FaxModem():Device{987} {}
};

class SpeedyFM : public FaxModem{
public:
	SpeedyFM() : Device{98652}{}
};

using namespace std;


int main()
{
	SpeedyFM sfm;

}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////


x = doSometing();
if (x == -1) {
	//////

}

if (x > 10) {

}
else {

}
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

void f4(int x)
{
	cout << "f4 cagrildi\n";
	if (x > 10)
		throw 4u;
	cout << "f4 sona erdi\n";
}

void f3(int x)
{
	cout << "f3 cagrildi\n";
	f4(x);
	cout << "f3 sona erdi\n";
}


void f2(int x)
{
	cout << "f2 cagrildi\n";
	f3(x);
	cout << "f2 sona erdi\n";
}


void f1(int x)
{
	cout << "f1 cagrildi\n";
	f2(x);
	cout << "f1 sona erdi\n";
}

using namespace std;


int main()
{
	cout << "main basladi" << endl;
	try {
		f1(47);
	}
	catch (int x) {
		cout << "hata main islevi icinde yakalandi (catch int) x = " << x << endl;
	}
	catch (double x) {
		cout << "hata main islevi icinde yakalandi (catch double) x = " << x << endl;
	}
	catch (float x) {
		cout << "hata main islevi icinde yakalandi (catch float) x = " << x << endl;
	}
	catch (...) {
		cout << "hata catch all blogu tarafindan yakalandi" << endl;
	}
	cout << "main sona erdi" << endl;

}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

void f4(int x)
{
	cout << "f4 cagrildi\n";
	string s(x, 'A');

	cout << "karakter = " << s.at(123) << endl;

	cout << "f4 sona erdi\n";
}

void f3(int x)
{
	cout << "f3 cagrildi\n";
	f4(x);
	cout << "f3 sona erdi\n";
}


void f2(int x)
{
	cout << "f2 cagrildi\n";
	f3(x);
	cout << "f2 sona erdi\n";
}


void f1(int x)
{
	cout << "f1 cagrildi\n";
	f2(x);
	cout << "f1 sona erdi\n";
}

using namespace std;


int main()
{
	cout << "main basladi" << endl;
	try {
		f1(47);
	}
	catch (out_of_range &r) {
		cout << "hata (catch out_of_range &) blogu tarafindan yakalandi : " << r.what() << endl;
	}
	cout << "main sona erdi" << endl;

}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

- stack unwinding !!!!!
- exception yakalandiginda nele yapabiliriz?
- rethrow iþlemi
- constructors &   exceptions
- destructor &   exceptions
- standard exception hiyerarsisi
-operator seviyesindeki exceptionlar...


void func()
{
	SourceUser x;

	foo();


}



#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

class ResourceUser {
	int ma[16];
public:
	ResourceUser() 
	{
		cout << this << " adresindeki sinif nesnesi kullanimi icin kaynaklar edinildi" << endl;
	}

	~ResourceUser()
	{
		cout << this << " adresindeki sinif nesnesinin kullnadigi kaynaklar geri verildi " << endl;
	}

};


void f3()
{
	cout << "f3 cagrildi " << endl;
	ResourceUser f3x;

	throw 3;
	cout << "f3 sona erdi" << endl;
}

void f2()
{
	cout << "f2 cagrildi " << endl;
	ResourceUser f2x;
	f3();
	cout << "f2 sona erdi" << endl;
}


void f1()
{
	cout << "f1 cagrildi " << endl;
	ResourceUser f1x;
	f2();
	cout << "f1 sona erdi" << endl;
}


int main()
{
	cout << "main cagrildi " << endl;
	try {
		f1();
	}
	catch (int) {
		getchar();
		cout << "hata yakalandi" << endl;
	}

	cout << "main sona erdi " << endl;




}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <memory>
#include <cstring>

#include <vector>


#include "nutility.h"

using namespace std;

void func(size_t n)
{
	auto p = new int[n];
	memset(p, 0, n * sizeof(int));
}


int main()
{
	try {
		for (int k = 0; k < 100000; ++k)
			func(10000);
	}
	catch (bad_alloc &r) {
		cout << "hata yakalandi : " << r.what() << endl;
	}

}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <memory>
#include <cstring>
#include <stdexcept>
#include <vector>


#include "nutility.h"

using namespace std;


class Fighter {
public:
	void setDistance(int distance)
	{
		if (distance > 10000)
			throw out_of_range{ "uzak mesafeye kacan savasci hatasi!!!!" };
		//////
	}
};


int main()
{
	Fighter f;

	try {
		f.setDistance(23456);
	}
	catch (exception &r) {
		cout << "hata yahakalndi : " << r.what() << endl;
	}

}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <memory>
#include <cstring>
#include <stdexcept>
#include <vector>

#include "nutility.h"

using namespace std;

void f3()
{
	cout << "f3 cagrildi\n";
	try {
		if (1) {
			throw 3.4F;
		}
	}
	catch (int x) {
		cout << "hata f3 icinde yakalandi\n";
	}
	cout << "f3 sona erdi\n";

}

void f2()
{
	cout << "f2 cagrildi\n";

	try {
		f3();
	}
	catch (long x) {
		cout << "hata f2 icinde yakalandi\n";
	}
	cout << "f2 sona erdi\n";

}

void f1()
{
	cout << "f1 cagrildi\n";

	try {
		f2();
	}
	catch (char c) {
		cout << "hata f1 icinde yakalandi\n";
	}
	cout << "f1 sona erdi\n";

}

int main()
{
	cout << "main cagrildi\n";

	try {
		f1();
	}
	catch (float f) {
		cout << "hata main icinde yakalandi\n";
	}
	cout << "main sona erdi\n";


}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////


catch (myexception &r) {

	//throw;
	throw r;

}



#include <string>
#include <iostream>
#include <memory>
#include <cstring>
#include <stdexcept>
#include <vector>

#include "nutility.h"

using namespace std;

class Myexception {
	int mx;
public:
	Myexception(int x) : mx{x} {}
	void set(int val) { mx = val; }
	void display()const { std::cout << "mx = " << mx << endl; }
};

void func()
{
	cout << "hata isleme surecinde func islevi cagriliyor ve rethwor ediliyor\n";
	throw;
}

void f1()
{
	cout << "f1 cagrildi\n";
	try {
		throw Myexception{ 12 };
	}
	catch (Myexception &r) {
		cout << "hata f1 icinde yakalandi : " << endl;
		r.display();
		r.set(3446);
		func();
	}

}


int main()
{
	func();

	/*try {
		f1();
	}
	catch (Myexception &r) {
		cout << "hata main icinde yakalandi...." << endl;
		r.display();
	}*/
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <memory>
#include <cstring>
#include <stdexcept>
#include <vector>

#include "nutility.h"

using namespace std;


void f2()
{
	try {
		///code
	}
	catch (bad_alloc &) {
		////////
		throw BadTextInfo;
	}
}


void f1()
{
	f2();
}


int main()
{
	try {
		f1();
	}
	catch (out_of_range &x) {
		cout << "hata main icinde yakalandi" << endl;
	}


}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <memory>
#include <cstring>
#include <stdexcept>
#include <vector>

#include "nutility.h"

using namespace std;

class Myexception {
	int mx;
public:
	Myexception(int x) : mx{x} 
	{
		cout << "constructor" << endl;
	}
	Myexception(const Myexception &r) : mx{ r.mx } {
		cout << "copy constructor" << endl;
	}
	~Myexception()
	{
		cout << "destructor" << endl;
	}
	void set(int val) { mx = val; }
	void display()const { std::cout << "mx = " << mx << endl; }
};


void f1()
{
	try {
		throw Myexception{ 12 };  //compiler optimization
	}
	catch (Myexception &r) {
		cout << "hata f1 icinde yakalandi" << endl;
		throw r;
	}
}


int main()
{
	try {
		f1();
	}
	catch (Myexception &r) {
		cout << "hata main icinde yakalandi...." << endl;
		r.display();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

Fighter::Fighter()
{
	/////code

	throw x;

	////code

}


/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <memory>
#include <cstring>
#include <stdexcept>
#include <vector>

#include "nutility.h"

using namespace std;


class Anyclass {

};

class Fighter {
	char buffer[1000];
public:
	Fighter(int x)
	{
		cout << "constructor" << endl;
		if (x > 10)
			throw 1;
	}

	~Fighter()
	{
		cout << "destructor" << endl;
	}
};


int main()
{
	try {
		auto p = new Fighter(50);  //operator new iþlevi ile elde edilen sizeof Fighter büyüklüðünde bellek alaný derleyicinin ürettiði kodla geri verilecek
	}
	catch (int) {
		cout << "hata main icinde yakalandi" << endl;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <iostream>
#include <memory>
#include <cstring>
#include <stdexcept>
#include <vector>

#include "nutility.h"

using namespace std;

void func()
try
{
	
}
catch (int) {

}


int main()
try {

}
catch (...)
{

}



//void func()
//{
//	try {
//		///function code
//	}
//	catch (int x) {
//
//	}
//}

//
//class Member {
//public:
//	Member(int x)
//	{
//		cout << "Member constructor" << endl;
//		if (x > 100)
//			throw 1;
//	}
//
//};
//
//class Owner {
//	Member mx;
//public:
//	Owner(int val) : mx{ val } 
//	{
//		try {
//
//		}
//	}
//};
//
//int main()
//{
//
//	Owner ox(356);
//}
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

R.T.T.I  

void carGame(Car *ptr)
{
	///
}



/////
dynamic_cast
typeid   ------->   type_info


dynamic_cast<Target Type>(operand)

dynamic_cast<Audi *>(carptr)

#include <stdio.h>
#include <string>

using namespace std;

typedef void  CURL;

size_t write_data(void *ptr, size_t size, size_t nmemb, void *stream)
{
	size_t written = fwrite(ptr, size, nmemb, (FILE *)stream);
	return written;
}

void getFile(const string &url, const string &fname)
{
	curl_global_init(CURL_GLOBAL_ALL);

	auto curl_handle = curl_easy_init();

	curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());

	curl_easy_setopt(curl_handle, CURLOPT_VERBOSE, 1L);

	curl_easy_setopt(curl_handle, CURLOPT_NOPROGRESS, 1L);

	curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, write_data);

	
	FILE *pagefile = fopen(fname.c_str(), "wb");
	if (pagefile) {
		curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, pagefile);
		curl_easy_perform(curl_handle);
		fclose(pagefile);
	}
	curl_easy_cleanup(curl_handle);
	curl_global_cleanup();

}


int main()
{
	getFile("http://www.csystem.org/dennis-ritchie.jpg", "foto.jpg");
}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////


void carGame(Car *ptr)
{
	auto bmwptr = (Bmw *)ptr;
	bmwptr->openSunroof();

}


static_cast
const_cast
reinterpret_cast

Bmw *p = dynamic_cast<Bmw *>(carptr);
if (p) {
	p->openSunRoof();
	//

}


#include <stdio.h>
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;


class Base {
public:
	void f1() {};
	void f2() {};
	virtual ~Base() {}
};

class Der1 : public Base{
public:
	void f3() 
	{
		cout << "Der1::f3()" << endl;
	}
};

class Der2 : public Base {
public:
	void f4() {};
};

void func(Base *baseptr)
{
	Der1 *dp = dynamic_cast<Der1 *>(baseptr);
	if (dp) {
		cout << "buraya gelen bir Der1 nesnesi" << endl;
		dp->f3();
	}
	else {
		cout << "buraya gelen bir Der1 nesnesi degil" << endl;
	}
}

int main()
{
	randomize();

	for (;;) {
		if (rand() % 2) {
			cout << "Der1 case\n";
			func(new Der1);
		}
		else {
			cout << "Der2 case\n";
			func(new Der2);
		}
		getchar();
	}

}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;


class Base {
public:
	void f1() {};
	void f2() {};
	virtual ~Base() {}
};

class Der1 : public Base{
public:
	void f3() 
	{
		cout << "Der1::f3()" << endl;
	}
};

class Der2 : public Base {
public:
	void f4() {};
};

void func(Base *baseptr)
{
	if (Der1 *der1ptr = dynamic_cast<Der1 *>(baseptr))
		der1ptr->f3();
	///
	///
}

int main()
{
	randomize();

	for (;;) {
		if (rand() % 2) {
			cout << "Der1 case\n";
			func(new Der1);
		}
		else {
			cout << "Der2 case\n";
			func(new Der2);
		}
		getchar();
	}

}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

int func(int);

int main()
{
	
	int retval = rand();
	if (retval % 5 == 0)
		func(retval);


}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>


using namespace std;

int func(int x)
{
	cout << x << endl;
}

int main()
{
	
	if (int retval = rand(); retval % 5 == 0)
		func(retval);


}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////


if (x++, y = x, x > 10)


#include <stdio.h>
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

//dynamic_cast on references

class Base {
public:
	void f1() {};
	void f2() {};
	virtual ~Base() {}
};

class Der1 : public Base {
public:
	void f3()
	{
		cout << "Der1::f3()" << endl;
	}
};

class Der2 : public Base {
public:
	void f4() {};
};

void func(Base &r)
{
	Der1 &dref = dynamic_cast<Der1 &>(r);
	dref.f3();
	///
	///
}

int main()
{
	try {
		Der2 d2;
		func(d2);

	}
	//catch (bad_cast &r) {
	catch (exception &r) {

		cout << "hata yakalandi " << r.what() << endl;
	}

}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string>
#include <iostream>
#include "nutility.h"

using namespace std;

//dynamic_cast on references

class Base {
public:
	void f1() {};
	void f2() {};
	virtual ~Base() {}
};

class Der1 : public Base {
public:
	void f3()
	{
		cout << "Der1::f3()" << endl;
	}
};


class Der11 : public Der1{
public:
};

class Der2 : public Base {
public:
	void f4() {};
};

void func(Base *ptr)
{
	if (auto p = dynamic_cast<Der1 *>(ptr)) {
		cout << "evet Der1" << endl;
	}
	else {
		cout << "hayir Der1 degil" << endl;
	}
	///
}

int main()
{
	Der1 d1;

	func(&d1);
	Der11 d11;
	func(&d11);

}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////



class type_info {
public:
	type_info(const type_info &) = delete;
	const char *name()const;
}


#include <stdio.h>
#include <string>
#include <iostream>
#include <typeinfo>

#include "nutility.h"

using namespace std;



int main()
{
	int x = 10, y = 34;
	double dval;

	if (typeid(x) == typeid(y))
		cout << "evet esit" << endl;
	else
		cout << "hayir esit degil" << endl;


}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string>
#include <iostream>
#include <typeinfo>

#include "nutility.h"

using namespace std;



int main()
{
	int x = 10, y = 34;
	double dval;

	if (typeid(x) == typeid(dval))
		cout << "evet esit" << endl;
	else
		cout << "hayir esit degil" << endl;


}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string>
#include <iostream>
#include <typeinfo>

#include "nutility.h"

using namespace std;

struct Akin {
	int x, y, z;
};

int main()
{
	Akin akin;
	struct Akin *ptr;

	cout << typeid(*ptr).name() << endl;
}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string>
#include <iostream>
#include <typeinfo>

using namespace std;

class Base {
public:
	void f1() {};
	void f2() {};
	virtual ~Base(){}
};

class Der1 : public Base {
public:
	void f3()
	{
		cout << "Der1::f3()" << endl;
	}
};


class Der11 : public Der1 {
public:
};

class Der2 : public Base {
public:
	void f4() {};
};

void func(Base *ptr)
{
	cout << typeid(*ptr).name() << endl;
}


int main()
{
	Der1 myder1;

	func(&myder1);

}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string>
#include <iostream>
#include <typeinfo>

using namespace std;

class Base {
public:
	void f1() {};
	void f2() {};
	
};

class Der1 : public Base {
public:
	void f3()
	{
		cout << "Der1::f3()" << endl;
	}
};


class Der11 : public Der1 {
public:
};

class Der2 : public Base {
public:
	void f4() {};
};

void func(Base *ptr)
{
	if (typeid(*ptr) == typeid(Base))
		cout << "dogru" << endl;
	else
		cout << "yanlis" << endl;
}


int main()
{
	Der1 myder1;

	func(&myder1);

}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string>
#include <iostream>
#include <typeinfo>

using namespace std;

class Base {
public:
	void f1() {};
	void f2() {};
	virtual ~Base(){}
};

class Der1 : public Base {
public:
	void f3()
	{
		cout << "Der1::f3()" << endl;
	}
};


class Der11 : public Der1 {
public:
};

class Der2 : public Base {
public:
	void f4() {};
};

void func(Base *ptr)
{
	cout << typeid(*ptr).name() << endl;
}


int main()
{
	Der1 myder1;

	try {
		func(nullptr);
	}
	/*catch (exception &r) {
		cout << "hata yakalandi: " << r.what() << endl;
	}
	*/
	catch (bad_typeid &r) {
		cout << "hata yakalandi: " << r.what() << endl;
	}

}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string>
#include <iostream>
#include <typeinfo>

using namespace std;

class Base {
public:
	void f1() {};
	void f2() {};
	virtual ~Base(){}
};

class Der1 : public Base {
	int a[100] = {};
public:
	void f3()
	{
		cout << "Der1::f3()" << endl;
		for (auto i : a)
			cout << i << endl;
	}
};


class Der11 : public Der1 {

public:
};

class Der2 : public Base {
public:
	void f4() {};
};

void func(Base *ptr)
{
	Der1 *p = static_cast<Der1 *>(ptr);
	p->f3();
}


int main()
{
	Der2 myder2;

	func(&myder2);
}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string>
#include <iostream>
#include <typeinfo>

using namespace std;

class Onder {

};


class Neco : public Onder {

};


int main()
{
	Onder x;
	Neco *p = static_cast<Neco *>(&x);

}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////


///

namespace Neco{
	int x = 210;
}


namespace Neco {
	double d = 34.;
	double x = 3.4;  //gecersiz
	class Myclass {

	};
}





namespace Neco {
	int x = 10;
	class Myclass {

	};
}

using Neco::x;

void f1()
{
	x = 34;
}


void f2()
{
	x = 235;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


namespace Neco {
	int x = 10;
	class Myclass {

	};
}


void f1()
{
	using Neco::x;

	x = 34;
}


void f2()
{
	x = 235;  //gecersiz
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


namespace Neco {
	int x = 10;
	class Myclass {

	};
}


void f1()
{
	using Neco::x;
	int x = 45;  //gecersiz
	x = 34;
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


namespace Neco {
	int x = 10;
	class Myclass {

	};
}

using Neco::x;
double x = 10; //gecersiz

void f1()
{
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <iostream>

namespace Neco {
	int x = 10;
	class Myclass {

	};
}

using Neco::x;

int main()
{
	int x = 56;

	std::cout << "x = " << x << std::endl;
	std::cout << "x = " << Neco::x << std::endl;

}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <iostream>

namespace Neco {
	int x = 10, y = 34;
	int z = 45;
}

using Neco::x;
using Neco::y;
using Neco::z;



int main()
{

}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
namespace Neco {
	int x = 10, y = 34, z = 456;
	class Myclass {

	};
}

using namespace Neco;

int x = 567;

void f1()
{
	x = 56;  //c.a.h
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
namespace Neco {
	int x = 10, y = 34, z = 456;
	class Myclass {

	};
}

using namespace Neco;

int x = 567;

#include <iostream>

int main()
{
	//std::cout << x << std::endl; gecersiz
	std::cout << Neco::x << std::endl; 
	std::cout << ::x << std::endl;


}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
namespace Neco {
	int x = 10, y = 34, z = 456;
	class Myclass {

	};
}

using namespace Neco;

int x = 567;

#include <iostream>

int main()
{
	//std::cout << x << std::endl; gecersiz
	std::cout << Neco::x << std::endl; 
	std::cout << ::x << std::endl;


}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


///lib1.h
namespace Neco {
	int x = 10, y = 34, z = 456;
	class Myclass {

	};
}

///lib2.h
namespace Akin{
	int x = 10, y = 34, z = 456;
}

using namespace Neco;
using namespace Akin;

int main()
{
	x = 34;  //gecersiz
	
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

///lib1.h
namespace Neco {
	int x = 10, y = 34, z = 456;
	class Myclass {

	};
}


void func()
{
	using namespace Neco;

	x = 34;  //gecerli

}

int main()
{
	x = 5;   //gecersiz
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

///lib1.h
namespace Neco {
	int x = 10, y = 34, z = 456;
	class Myclass {

	};
}

#include <iostream>

int main()
{
	using namespace Neco;
	//int x = 5;  

	std::cout << x << std::endl;
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace Aykut {
	class Myclass {

	};
	void func(Myclass &x);
}

int main()
{
	Aykut::Myclass m;

	func(m); //gecerli ADL
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>


int main()
{
	std::string s = "ali";
	std::cout << s;
	operator<<(std::cout, s);

}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

namespace Huso {
	class Myclass {

	};
	void func(Myclass &) {}
}

void func(Huso::Myclass &)
{

}

int main()
{
	Huso::Myclass m;

	func(m);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>


namespace Ali {
	void func(int) {}
}

namespace Veli {
	void func(double) {}
}

using namespace Ali;
using namespace Veli;


int main()
{
	func(19);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//ali.cpp
namespace {					//unnamed namespace
	int x, y;
	class Myclass {

	};
}


int main()
{
	x = 20;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace CSD_Project_Group{
	int x, y, z;
}

namespace Fethi = CSD_Project_Group;

int main()
{
	Fethi::x = 34;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace CSD_Project_Group{
	int x, y, z;
	namespace SecretProject {
		class Myclass {

		};
	}
}

namespace Pro = CSD_Project_Group::SecretProject;

int main()
{
	Pro::Myclass m;

}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

iþlev þablonlarý
sýnýf þablonlarý


template


#include <string>
#include <iostream>

using namespace std;

template<typename T>
void Swap(T &r1, T &r2)
{
	T temp{ r1 };
	r1 = r2;
	r2 = temp;
}

int main()
{
	int x = 10, y = 20;
	string s1{ "alican" }, s2{ "edanaz" };
	double d1 = 2.3, d2 = 6.7;

	Swap(x, y);
	Swap(s1, s2);
	Swap(d1, d2);

	cout << x << "  " << y << endl;
	cout << s1 << "  " << s2 << endl;
	cout << d1 << "  " << d2 << endl;





}

#include <bitset>
#include <iostream>

using namespace std;

template<typename T>
void foo(T x)
{
	std::cout << "template foo : typename T is : " << typeid(T).name() << std::endl;
}

template<typename T>
void g(T x)
{
	std::cout << "template g : typename T is : " << typeid(T).name() << std::endl;

}


template<typename T, typename U>
void func(T x, U y)
{
	std::cout << "template func: typename T is : " << typeid(T).name() << std::endl;
	std::cout << "template func: typename U is : " << typeid(U).name() << std::endl;
	foo(x);
	g(y);
}

int main()
{
	func(10, 3.4);
}
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

//category 1
template<typename T>
void f1(T x)
{

}

//category 2
template<typename T>
void f2(T &x)
{

}

//category 3
template<typename T>
void f3(T &&x)
{

}


int main()
{

}
#include <iostream>

using namespace std;

template<typename T>
void func(T x)
{
	x = 10;
}


int main()
{
	//func(10);  //T is int
	const int y = 23;

	func(y);  //T is int (not const int)
}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T x);


int main()
{
	int x = 10;
	int &r = x;

	func(r);  //T is int (not int &)
}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T x)
{
	x = 45;
}


int main()
{
	int y = 10;
	int &r = y;

	func(r);

	cout << "y = " << y << endl;
}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T x);

int main()
{
	int a[100];
	const int b[100]{};


	func(a);  //T is int *
	func(b);  //T is const int *


}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T x);

int main()
{
	func("neco");  //T is char const *

}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T *ptr);

int main()
{
	int x = 10;

	func(&x);  //T is int ptr is int *
}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T(*f)(T));

int foo(int);

int main()
{
	func(foo);  //T is int f is int(*)(int);

}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T, typename U>
void func(T(*f)(U));

int foo(double);

int main()
{
	func(foo);  //T is int U is double , f is int (*)(double)

}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T &x);

int main()
{
	int x = 10;

	func(x);  //T is int , x is int &
}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T &r);

int main()
{
	const int x = 10;

	func(x);  //T is const int, r is const int &
}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T &r);

int main()
{
	int x = 10;
	int &r = x;

	func(r);  //T is int, r is int &
}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T &r);

int main()
{
	int a[5]{ 0 };

	func(a);  //T is int [5], r is int (&)[5]
}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T &r1, T &r2);

int main()
{
	int a[4];
	int b[4];
	int c[5];

	func(a, b);
	//func(a, c);  //gecersiz

}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include <iostream>

using namespace std;

template<typename T>
void func(T &r1, T &r2);

int main()
{
	func("alican", "metin");  //gecersiz

}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include "nutility.h"
#include <iostream>

using namespace std;

template<typename T, size_t size>
constexpr size_t asize(T &r)
{
	return size;
}


int main()
{
	int a[10] = { 0 };
	int b[] = { 2, 5, 5, 8, 8 };
	int c[asize(a) * 2];

	cout << asize(c) << endl;
}



#include "nutility.h"
#include <iostream>

using namespace std;


//universal reference
//ileride detayli olarak gorecegiz
//

template<typename T>
void func(T &&r)
{

}

int main()
{
	
}

#include "nutility.h"
#include <iostream>
#include <vector>

using namespace std;

//senaryo 1
// T bir iþlev adresi türüdür.
//Bu durumda iþlevin parametresi bir iþlev göstericisi olur

template<typename T>
void func(T f)
{
	f();
}

void foo()
{
	cout << "foo cagrildi" << endl;
}

int main()
{
	func(foo);

}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////


#include "nutility.h"
#include <iostream>
#include <vector>

using namespace std;

//senaryo 2
// T bir sýnýf türüdür ve T sýnýfý iþlev çaðrý operatörünü overload etmiþtir

template<typename T>
void func(T f)
{
	f();
}

class Functor {
public:
	void operator()()
	{
		cout << "Functor::operator()()" << endl;
	}
};


int main()
{
	Functor x;

	func(x);
}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////


#include "nutility.h"
#include <iostream>
#include <list>
#include <string>


using namespace std;

template<typename InIter, typename F>
InIter Find_if(InIter beg, InIter end, F fnc)
{
	while (beg != end) {
		if (fnc(*beg))
			return beg;
		++beg;
	}

	return beg;
}

bool mypred(const string &r)
{
	return r.size() == 5;
}

int main()
{
	list<string> slist{ "ali", "huseyin", "aykut", "tayfun", "poyraz", "fethi" };

	auto iter = Find_if(slist.begin(), slist.end(), mypred);

	if (iter != slist.end()) {
		cout << "bulundu " << *iter << endl;
	}
	else {
		cout << "bulunamadi" << endl;
	}
}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////


#include "nutility.h"
#include <iostream>
#include <list>
#include <string>


using namespace std;

template<typename InIter, typename F>
InIter Find_if(InIter beg, InIter end, F fnc)
{
	while (beg != end) {
		if (fnc(*beg))
			return beg;
		++beg;
	}

	return beg;
}


class LenPred {
	int mlen;
public:
	LenPred(int len): mlen{len}{}
	bool operator()(const string &s)
	{
		return s.size() == mlen;
	}
};

int main()
{
	list<string> slist{ "ali", "huseyin", "aykut", "tayfun", "can", "poyraz", "fethi", "kaya", "suleyman" };
	cout << "uzunluk degerini girin : ";
	int len;
	cin >> len;
	auto iter = Find_if(slist.begin(), slist.end(), LenPred(len));

	if (iter != slist.end()) {
		cout << "bulundu " << *iter << endl;
	}
	else {
		cout << "bulunamadi" << endl;
	}
}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////


using namespace std;

template<typename T, size_t size>
size_t asize(T(&r)[size])
{
	return size;
}

#include <iostream>

using namespace std;

int main()
{
	int a[] = { 4, 5, 5, 1, 2, 3 };

	cout << asize(a) << endl;  //gecerli
	int b[asize(a) * 2];  //gecersiz

}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////


using namespace std;

template<typename T, size_t size>
constexpr size_t asize(T(&r)[size])
{
	return size;
}

#include <iostream>

using namespace std;

int main()
{
	int a[] = { 4, 5, 5, 1, 2, 3 };

	cout << asize(a) << endl;  //gecerli
	int b[asize(a) * 2];  //gecersiz

}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////



#include <iostream>

template<typename T>
void func(T x, T y)
{
	std::cout << "func(Tx T y)  typename T is : " << typeid(T).name() << std::endl;
}

template<typename T>
void func(T x)
{
	std::cout << "func(Tx)  typename T is : " << typeid(T).name() << std::endl;
}

int main()
{
	func(4.5f, 3.4f);
	func(9u);
}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////


#include <iostream>

//klasik mülakat sorusu
//sadece belirli türden argüman kabul eden
//farklý türden argümanla çaðrýlmasý sentaks hatasý olan iþlev oluþturmak

template<typename T>
void func(T x) = delete;

void func(double dval)
{
	std::cout << "non template func(double dval)" << std::endl;
}

int main()
{
	


}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////


#include <iostream>

template <typename T>
void func(T x)
{
	std::cout << "template function func(T x) type T is : " << typeid(T).name() << std::endl;
}

template <typename T>
void func(T *ptr)
{
	std::cout << "template function func(T *ptr) type T is : " << typeid(T).name() << std::endl;
	
}

template <typename T>
void func(T (*f)(T))
{
	std::cout << "template function func(T (*f)(T) type T is : " << typeid(T).name() << std::endl;

}

int foo(int) { return 1; }

int main()
{

	func(foo);

}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////



#include <iostream>

template<typename T = int>
class Myclass {
public:
	Myclass() {
		std::cout << "type T is " << typeid(T).name() << std::endl;
	}
};

int main()
{
	Myclass<> mx;


}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////



#include <iostream>

template<typename T = int, typename U = double>
class Myclass {
public:
	Myclass() {
		std::cout << "type T is " << typeid(T).name() << std::endl;
		std::cout << "type U is " << typeid(U).name() << std::endl;

	}
};

int main()
{
	//Myclass<long, char> mx;
	//Myclass<long> mx;
	Myclass<> mx;
}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////



#include <iostream>

//gecersiz
template<typename T = int, typename U>
class Myclass {
public:
	
};

int main()
{




}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

#include <iostream>

template<typename T, typename U>
void func(T x, U y)
{
	std::cout << "type T is " << typeid(T).name() << std::endl;
	std::cout << "type U is " << typeid(U).name() << std::endl;
	std::cout << "*******************************************************\n";
}


int main()
{
	func(12, 4.5);
	//func<double>(4, 2);
	func<int, int>(1.2, 5.6);


}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;

template<typename T>
T add(T x, T y)
{
	return x + y;
}

int main()
{
	//cout << add(2, 6) << endl;
	cout << add(2.1, 6.4) << endl;
	string s1{ "eda" }, s2{ "naz" };
	cout << add(s1, s2) << endl;


}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////



#include <iostream>
#include <string>

using namespace std;

template<typename R, typename T, typename U>
R add(T x, U y)
{
	return x + y;
}

int main()
{
	cout << add<double>(3.7, 4) << endl;
	cout << add<double>(2.4, 9) << endl;



}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////



#include <iostream>
#include <string>

using namespace std;


auto square(int x) ->int
{
	return x * x;
}

int main()
{



}
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

*{ahmet, hasan, [veli&tayyar&tekin], [aylin&fatma&zeynep&tijen]}
{ali, veli, {tijen, nur, ayca}}


[[bugün&dün&[iki&dört&on]gün önce]& geçen ay] [bu&adý geçen&þu] [ürünü&cihazý&aleti] satýn aldým




template<typename T>
class SmartPtr {
	T *mp;
public:
	SmartPtr(T *p): mp{p}{}
	~SmartPtr(){delete mp; }
	T &operator*() { return *mp; }
	T *operator->() { return mp; }
		////
};

#include <string>
#include <iostream>

#include "date.h"

using namespace std;

int main()
{
	SmartPtr<string> sp{ new string{"Fethi"} };


	cout << *sp << endl;

	SmartPtr<Date> spd{ new Date{12, 3, 1998} };

	cout << spd->Month() << endl;
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////



template<typename T>
class Myclass {
public:
	void func(T x){}
};

int main()
{
	Myclass<double> m1;
	Myclass<int> m2;

	m1 = m2
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>

using namespace std;

int main()
{
	vector<double> dvec;
	vector<int> ivec;

	dvec = ivec; //gecersiz
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>

using namespace std;

vector<int> func(const vector<double> &);

int main()
{

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>

using namespace std;

template<typename T>
void func(T x)
{
	std::vector<T> xvec;
}

int main()
{

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>

using namespace std;

template<typename T>
void func(std::vector<T> &x)
{
	T x{};
}

int main()
{
	vector<double> dvec;

	func(dvec);
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>

using namespace std;


int main()
{
	vector<vector<int>> vec;
	////
	vec[12][34]++;

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>


using namespace std;

int main()
{
	vector<list<string>> xvec;

	///
	xvec[2].front().size()

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>

using namespace std;

template<typename T>
std::vector<T> gvec(T x, size_t n)
{
	////
	return vector<T>(n, x);
}

#include <iostream>

using namespace std;

int main()
{
	int ival = 10;
	double dval = 3.4;

	auto vec1 = gvec(ival, 50);
	auto vec2 = gvec(dval, 6);

	for (auto x : vec1) {
		cout << x << " ";
	}

	for (auto y : vec2) {
		cout << y << " ";
	}
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>

using namespace std;

template<typeneme T, typename U = int>
class Myclass {

};

int main()
{


}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>

using namespace std;

template<typeneme T, typename U = vector<int>>
class Myclass {

};

int main()
{


}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>

using namespace std;

template<typename T, typename U = vector<T>>
class Myclass {

};

int main()
{
	Myclass<int> x;
	//Myclass<int, vector<int>>

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>

using namespace std;

template<typename C, typename T = char_traits<C>, typename A = allocator<C>>
class BasicString {

};

//typedef BasicString<char> string;

int main()
{
	//basic_string<char, char_traits<char>, allocator<char>> str{ "necati" };

	string s{ "ali" };
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>

using namespace std;

//typedef int word;
using word = int;

int main()
{

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>

using namespace std;

//typedef int(*FCMP)(const char *, const char *);
using FCMP = int(*)(const char *, const char *);

int main()
{

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>

using namespace std;

//typedef std::vector<std::vector<std::string>> VSvec;
typedef std::vector<std::string > Svec;
typedef std::list<Svec> Con;


int main()
{

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <tuple>


using namespace std;

tuple<int, double, string> func();

int main()
{
	auto t = func();
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include "date.h"

using namespace std;

template<typename T, typename U>
struct Pair {
	T first;
	U second;
	Pair() : first{}, second{} {}
	Pair(const T&t, const U &u) : first{t}, second{u} {}
};


int main()
{
	int x{};
	cout << x << endl;

	pair<Date, double> idp;

	cout << idp.first << "  " << idp.second << endl;

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include "date.h"

using namespace std;

template<typename T, typename U>
struct Pair {
	T first;
	U second;
	Pair() : first{}, second{} {}
	Pair(const T&t, const U &u) : first{t}, second{u} {}
};

template<typename T, typename U>
std::pair<T, U> Make_pair(const T &t, const U&u)
{
	return pair<T, U>{t, u};
}


int main()
{
	Date x{ 12, 5, 1987 };
	string s{ "Fethullah Aksoy" };

	//pair<Date, string> dsp{ x, s };

	auto dsp = make_pair(x, s);
	cout << dsp.first << "   " << dsp.second << endl;


}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include "date.h"

using namespace std;

template<typename T>
using Spair = std::pair<string, T>;

int main()
{
	Spair<int> x;
	Spair<Date> y;


}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>


#include "date.h"

using namespace std;

//template<typename T, typename C = less<T>, typename A = allocator<T>>
//class set {
//
//};

template<typename T>
using Gset = set<T, std::greater<T>>;

int main()
{
	set<string, greater<string>> myset{ "deniz", "riza", "aykut", "huseyin", "abidin", "baris"};

	for (const auto &s : myset)
		cout << s << " ";
	cout << endl;


}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include "date.h"

using namespace std;

template<typename T, typename U>
struct Pair {
	T first;
	U second;
};


int main()
{
	pair<double, double> x;
	pair<int, int> y;

	x = y;
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include "date.h"

using namespace std;

template<typename T>
class Myclass {
public:
	template<typename U>
	void func(Myclass<U> y);
};


int main()
{
	Myclass<double> x;
	Myclass<int> y;

	x.func(y);
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include "date.h"

using namespace std;

template<typename T, typename U>
class Pair{
	T first;
	U second;
public:
	Pair();
	template<typename X, typename Y>
	Pair(const Pair<X, Y> &p): first{p.first}, second{p.second}{}
};


int main()
{
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include <bitset>

#include "date.h"
#include "tnutil.h"

using namespace std;

int main()
{
	auto p1 = make_pair(Date{ 31, 12, 2017 }, string{ "nurfeza" });
	auto p2 = make_pair(bitset<32>{728345U}, Date{ 1, 1, 2019 });
	auto p3 = make_pair(p1, p2);
	auto p4 = make_pair(p2, p1);


	cout << make_pair(p3, p4) << endl;

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include <bitset>

#include "date.h"
#include "tnutil.h"

using namespace std;

template<typename T, typename U>
bool operator<(const pair<T, U> &r1, const pair<T, U>&r2)
{
	return r1.first < r2.first || (!(r2.first < r1.first) && r1.second < r2.second);
}

int main()
{
	auto p1 = make_pair(string("mustafa"), 1323);
	auto p2 = make_pair(string("mustafa"), 1323);

	if (p1 > p2)
		cout << "dogru" << endl;
	else
		cout << "yanlis" << endl;


	if (p1 == p2)
		cout << "dogru" << endl;
	else
		cout << "yanlis" << endl;
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include <bitset>

#include "date.h"
#include "tnutil.h"

using namespace std;

template<typename T>
class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass<T> typename T is : " << typeid(T).name() << endl;
	}
};


template<>
class Myclass<int> {
public:
	Myclass()
	{
		std::cout << "Myclass<int> " << std::endl;
	}
};

int main()
{
	Myclass<double>  d;
	Myclass<int >  i;

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include <bitset>

#include "date.h"
#include "tnutil.h"

using namespace std;

template<typename T>
class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass<T> typename T is : " << typeid(T).name() << endl;
	}
};


template<typename T>
class Myclass<T *> {
public:
	Myclass()
	{
		std::cout << "Myclass<T *> " << std::endl;
	}
};

int main()
{
	Myclass<int> x;
	Myclass<string> y;
	Myclass<double *> z;


}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include <bitset>

#include "date.h"
#include "tnutil.h"

using namespace std;

template<typename T, typename U>
class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass<T, U>" << std::endl;
	}
};


template<typename T>
class Myclass<T, T> {
public:
	Myclass()
	{
		std::cout << "Myclass<T, T> " << std::endl;
	}
};

int main()
{
	Myclass<int, double> x;
	Myclass<long, long> y;


}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include <bitset>

#include "date.h"
#include "tnutil.h"

using namespace std;

template<typename T, typename U>
class Myclass {
public:
	Myclass()
	{
		std::cout << "Myclass<T, U>" << std::endl;
	}
};


template<typename T>
class Myclass<T, int> {
public:
	Myclass()
	{
		std::cout << "Myclass<T, int> " << std::endl;
	}
};

int main()
{
	Myclass<int, double> x;
	Myclass<long, long> y;
	Myclass<long, int> z;



}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include <bitset>

#include "date.h"
#include "tnutil.h"

using namespace std;


class Myclass {
public:
	template<typename T>
	void func(T x)
	{
		std::cout << typeid(T).name() << std::endl;
	}
};

int main()
{
	Myclass m;

	m.func(10);
	m.func(1.0);
	m.func(1L);




}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include <bitset>

#include "date.h"
#include "tnutil.h"

using namespace std;

template<size_t low, size_t high>
class random {
public:
	int operator()() {
		return rand() % (high - low + 1) + low;
	}
};

int main()
{
	random<10, 15> x;

	for (;;) {
		cout << x();
		getchar();
	}
}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <set>
#include <functional>
#include <bitset>
#include "date.h"
#include <array>

using namespace std;

template<typename T, size_t size>
class Array {
	T ma[size];
public:
	T &operator[](size_t idx) { return ma[idx]; }
};

int main()
{
	Array<Date, 10> a1;

}
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
template<typename T, typename A = allocator<T>>
class Vector {
	T *mp;
public:
	void push_back(const T &va)

}

sequence containers
-----------------------------------
vector
list
deque
forward_list  (C++11)
string
array		  (C++11)
-----------------------------------
associative containers
set
multiset
map
multimap
-----------------------------------
unordered associative containers
unordered_set
unordered_multiset
unordered_map
unordered_multimapmap


template<typename T>
class Vector {
public:
	class iterator {
	
	};
	iterator begin();
	iterator end();

}



#include <vector>
#include <string>

template<typename T, size_t size>
T * Begin(T (&r)[size])
{
	return r;
}

template<typename T, size_t size>
T * End(T(&r)[size])
{
	return r + size;
}


template<typename T>
typename std::vector<T>::iterator Begin(std::vector<T> &r)
{
	return r.begin();
}

template<typename T>
typename std::vector<T>::iterator End(std::vector<T> &r)
{
	return r.end();
}

using namespace std;

int main()
{
	vector<string> svec;
	auto iter = Begin(svec);
	int a[10] = { 0 };
	auto p = Begin(a);
}


curl /pgs

------------------------------------------------------------------
input iterator
iter-> 
== !=
önek ++  ++sonek
*iter  (okuma)
------------------------------------------------------------------
output_iterator
iter-> 
önek ++  ++sonek
*iter  (yazma)
------------------------------------------------------------------
forward iterator
->
++ ++
*iter     *iter
!=  ==
------------------------------------------------------------------
bidirectional iterator
ilaveten -- önek ve sonek
------------------------------------------------------------------
random access iterator


#include <vector>
#include <list>
#include <iostream>
#include <sstream>
#include <iterator>
#include <forward_list>

using namespace std;

int main()
{
	vector<int>::iterator iter;
	vector<int>::iterator iter2;

	*iter = 10;
	int x = *iter;
	++iter;
	iter++;
	iter == iter2;
	iter != iter2;
	--iter;
	iter + 5;
	iter[3];
	iter - iter2;


}

//int main()
//{
//	istream_iterator<int> iter1;
//	istream_iterator<int> iter2;
//
//
//	cout << typeid(decltype(iter1)::iterator_category).name() << endl;
//
//	iter1 > iter2;
//	
//}


template<typename InIter, typename OutIter>
Iter2 copy(Iter1 beg, Iter1 end, Iter2 destbeg)
{
	while (beg != end) {
		*destbeg = *beg;
		++beg;
		++destbeg;
	}

	return destbeg;
}


#include <vector>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
using namespace std;

//template<typename InIter, typename OutIter>
//OutIter copy(InIter beg, InIter end, OutIter destbeg)
//{
//	while (beg != end) {
//		*destbeg = *beg;
//		++destbeg;
//		++beg;
//	}
//
//	return destbeg;
//}


int main()
{
	list<int> ilist{ 12, 45, 67, 98, 13, 92, 23, };

	display(next(ilist.begin()), prev(ilist.end()));

}

#include <vector>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
using namespace std;

//template<typename InIter, typename OutIter>
//OutIter copy(InIter beg, InIter end, OutIter destbeg)
//{
//	while (beg != end) {
//		*destbeg = *beg;
//		++destbeg;
//		++beg;
//	}
//
//	return destbeg;
//}


int main()
{
	list<int> ilist{ 12, 45, 67, 98, 13, 92, 23, };

	display(next(ilist.begin(), 2), prev(ilist.end(), 2));

}

#include <vector>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
using namespace std;


int main()
{
	vector<int> ivec{ 12, 45, 67, 98, 13, 92, 23, };

	sort(ivec.rbegin(), ivec.rend());

	display(ivec.begin(), ivec.end());


}

#include <vector>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
using namespace std;


int main()
{
	vector<int> ivec{ 12, 45, 67, 98, 13, 92, 23, };
	vector<int>::iterator iter = ivec.begin();
	*iter = 346;
	vector<int>::const_iterator c_iter = ivec.begin();
	int x = *c_iter;
	*c_iter = 45;


}

#include <vector>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"

#include <algorithm>
#include <forward_list>
#include "tnutil.h"
using namespace std;


int main()
{
	list<Date> dlist{ Date(), Date("12-5,1998") };
	list<Date>::iterator iter = dlist.begin();

	iter->setMonthDay(12);

	list<Date>::const_iterator c_iter = dlist.begin();

	c_iter->setMonthDay(12);

}

#include <vector>
#include <set>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"

#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;


int main()
{
	randomize();
	set<int> dset;

	fc(dset, 100, []() {return rand() % 200; });
	display(dset);
}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>

#include <iostream>
#include <string>
#include <iterator>
#include "date.h"

#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

class LenPred {
	size_t mlen;
public:
	LenPred(size_t len):mlen{len}{}
	bool operator()(const string &str)const
	{
		return str.length() == mlen;
	}
};

int main()
{
	randomize();
	vector<string> svec;
	fc(svec, 40, rs);
	display(svec);
	list<string>slist(40);
	size_t len;
	cout << "uzunlugu kac olanlar kopyalansin : ";
	cin >> len;
	copy_if(svec.begin(), svec.end(), slist.begin(), LenPred{ len });
	display(slist);


}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

class CompilerGeneratedClass {
public:
	void operator()()
	{
		cout << "ali";
	}
};


int main()
{
	CompilerGeneratedClass{}

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;




int main()
{
	[]{cout << "ali"; }();

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;


//class xyz_794bwqa {
//public:
//	bool operator()(int x)const
//	{
//		return x % 2 == 0;
//	}
//};


int main()
{
	//cout << [](int x) {return x % 2 == 0; }(19) << endl;
	auto f = [](int x) {return x % 2 == 0; };

	cout << f(13) << endl; //1
	cout << f(16) << endl; //2


}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>

#include <iostream>
#include <string>
#include <iterator>
#include "date.h"

#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

int main()
{
	int x = 10, y = 20, z = 30;

	auto f = [=](int a) {return (a + x + y) * z; }


}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>

#include <iostream>
#include <string>
#include <iterator>
#include "date.h"

#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;


int main()
{
	randomize();
	vector<Date> svec;
	display(fc(svec, 10, &Date::RandomDate));
	sort(svec.begin(), svec.end(), [](const Date &d1, const Date &d2) {return d1 > d2; });
	getchar();
	display(svec);

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

#include <vector>
#include <set>
#include <list>

#include <iostream>
#include <string>
#include <iterator>
#include "date.h"

#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;



int main()
{
	randomize();
	vector<Date> svec;
	fc(svec, 12000, &Date::RandomDate);
	int m;
	cout << "hangi ay : ";
	cin >> m;
	cout << count_if(svec.begin(), svec.end(), [m](const Date &d) {return d.Month() == m; }) << endl;

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////






#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"
using namespace std;


template<typename InIter, typename OutIter>
OutIter Copy(InIter beg, InIter end, OutIter destbeg)
{
	while (beg != end) {
		*destbeg = *beg;
		++destbeg;
		++beg;
	}

	return destbeg;
}

template<typename C>
class BackInsertIterator {
	C &mc;
public:
	BackInsertIterator(C &c):mc{c} {}
	BackInsertIterator &operator++() { return *this; }
	BackInsertIterator &operator*() { return *this; }
	BackInsertIterator &operator=(const typename C::value_type &x)
	{
		mc.push_back(x);
		return *this;
	}
};


template<typename C>
BackInsertIterator<C> BackInserter(C &c)
{
	return BackInsertIterator<C>{c};
}

int main()
{
	randomize();

	StrVec svec;
	fc(svec, 20, rs);
	display(svec);
	list<string> slist;
	
	Copy(svec.begin(), svec.end(), BackInserter(slist));

	cout << slist.size() << endl;
	display(slist);

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

//template<typename InIter, typename Pred>
//InIter Find_if(InIter beg, InIter end, Pred f)
//{
//	while (beg != end) {
//		if (f(*beg))
//			return beg;
//		++beg;
//	}
//	return beg;
//}

int main()
{
	randomize();
	StrVec svec;
	display(fc(svec, 30, rs));
	char c;
	cout << "karakter girin : ";
	cin >> c;
	auto iter = find_if(svec.begin(), svec.end(), [c](const string &s) {return s.find(c) != string::npos; });
	if (iter != svec.end()) {
		cout << "bulundu " << *iter << endl;
		cout << distance(svec.begin(), iter) << endl;
	}

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

typedef set<string> Cont;

int main()
{
	Cont c;

	randomize();
	display(fc(c, 20, rs));
	auto iter = c.end();
	int n;
	cout << "bir tamasyi girin : ";
	cin >> n;

	advance(iter, -n);

	cout << "*iter = " << *iter << endl;

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

typedef set<string> Cont;

template<typename Iter>
void Advance(Iter &iter, int n, std::bidirectional_iterator_tag)
{
	while (n--) {
		++iter;
	}
}

template<typename Iter>
void Advance(Iter &iter, int n, std::random_access_iterator_tag)
{
		iter += n;
}

template<typename Iter>
void Advance(Iter &iter, int n)
{
	Advance(iter, n, typename Iter::iterator_category());
}

int main()
{
	Cont c;


	randomize();
	display(fc(c, 20, rs));
	auto iter = c.begin();
	int n;
	cout << "bir tamasyi girin : ";
	cin >> n;

	Advance(iter, n);

	cout << "*iter = " << *iter << endl;

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////





#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

typedef set<string> Cont;

template<typename Iter>
void Advance(Iter &iter, int n, std::bidirectional_iterator_tag)
{
	while (n--) {
		++iter;
	}
}

template<typename Iter>
void Advance(Iter &iter, int n, std::random_access_iterator_tag)
{
		iter += n;
}

template<typename Iter>
void Advance(Iter &iter, int n)
{
	Advance(iter, n, typename Iter::iterator_category());
}

int main()
{
	Cont c;


	randomize();
	display(fc(c, 20, rs));
	auto iter = c.begin();
	int n;
	cout << "bir tamasyi girin : ";
	cin >> n;

	Advance(iter, n);

	cout << "*iter = " << *iter << endl;

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

typedef list<string> Cont;

int main()
{
	Cont c;


	randomize();
	display(fc(c, 20, rs));

	auto iter = find_if(c.begin(), c.end(), [](const string &s) {return s.size() == 7; });
	if (iter != c.end()) {
		cout << distance(c.begin(), iter) << " indisli oge" << endl;
	}


}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

typedef list<string> Cont;

int main()
{
	vector<string> svec;

	//randomize();
	display(fc(svec, 10, rs));
	auto riter = find(svec.rbegin(), svec.rend(), "huseyin");
	cout << *riter << endl;
	vector<string>::iterator iter = riter.base();
	cout << *iter<< endl;


}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

typedef list<string> Cont;

int main()
{
	vector<string> svec;

	//randomize();
	display(fc(svec, 10, rs));
	auto riter = find(svec.rbegin(), svec.rend(), "huseyin");
	cout << *riter << endl;
	vector<string>::iterator iter = riter.base();
	cout << *iter<< endl;


}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

typedef list<string> Cont;

int main()
{
	vector<string> svec;

	display(fc(svec, 20, rs));
	auto iter1 = find_if(svec.rbegin(), svec.rend(), [](const string &s) {return s.size() == 5; });
	
	cout << *iter1 << endl;
	vector<string>::iterator iter = iter1.base();
	cout << *iter << endl;



}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
silme algoritmalarý
#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;


int main()
{
	vector<string> svec;
	fc(svec, 30, rs);
	display(svec);

	size_t len;
	cout << "uzunlugu kac olanlar silinsin : ";
	cin >> len;

	auto logic_end = remove_if(svec.begin(), svec.end(), [len](const string &s) {return s.size() == len; });
	cout << "svec.size() = " << svec.size() << endl;
	display(svec.begin(), logic_end);
	svec.erase(logic_end, svec.end());
	display(svec.begin(), svec.end());





}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;


int main()
{
	vector<string> svec;
	fc(svec, 30, rs);
	display(svec);

	size_t len;
	cout << "uzunlugu kac olanlar silinsin : ";
	cin >> len;

	svec.erase(remove_if(svec.begin(), svec.end(), [len](const string &s) {return s.size() == len; }), svec.end());
	display(svec);


}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;


int main()
{
	vector<int> ivec;
	fc(ivec, 30, []() {return rand() % 3; });
	display(ivec);
	ivec.erase(unique(ivec.begin(), ivec.end()), ivec.end());
	display(ivec);




}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;


int main()
{
	vector<int> ivec;
	fc(ivec, 100, rand);
	display(ivec.begin(), ivec.end());
	ivec.erase(unique(ivec.begin(), ivec.end(), [](int a, int b) {return a % 2 == b % 2; }), ivec.end());
	display(ivec.begin(), ivec.end());


}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;


int main()
{
	string str;

	cout << "giris : ";
	getline(cin, str);
	//code
	str.erase(unique(str.begin(), str.end(), [](char c1, char c2) {return isspace(c1) && isspace(c2); }), str.end());

	cout << "(" << str << ")" << endl;

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;



int main()
{
	vector<string> svec;

	randomize();
	fc(svec, 20, rs);
	display(svec);
	for_each(svec.begin(), svec.end(), [](string &s) {s += "can"; });
}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

template<typename InIter, typename OutIter, typename Func>
OutIter Transform(InIter beg, InIter end, OutIter destbeg, Func f)
{
	while (beg != end) {
		*destbeg = f(*beg);
		++beg;
		++destbeg;
	}

	return destbeg;
}


int main()
{
	vector<string> svec;

	randomize();
	fc(svec, 100, rs);
	display(svec);
	list<size_t> lenlist;

	transform(svec.begin(), svec.end(), back_inserter(lenlist), [](const string &s) {return s.size(); });
	display(lenlist);
}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

template<typename InIter, typename OutIter, typename Func>
OutIter Transform(InIter beg, InIter end, OutIter destbeg, Func f)
{
	while (beg != end) {
		*destbeg = f(*beg);
		++beg;
		++destbeg;
	}

	return destbeg;
}


int main()
{
	vector<string> svec;

	randomize();
	fc(svec, 100, rs);
	display(svec);
	transform(svec.begin(), svec.end(), svec.begin(), [](const string &s) { return string(s.begin() + 1, s.end() - 1); });
	display(svec);
}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <deque>

#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

template<typename InIter1, typename InIter2, typename OutIter, typename Func>
OutIter Transform(InIter1 beg1, InIter1 end, InIter2 beg2, OutIter destbeg, Func f)
{
	while (beg1 != end) {
		*destbeg = f(*beg1, *beg2);
		++beg1;
		++beg2;
		++destbeg;
	}

	return destbeg;
}


int main()
{
	vector<int> ivec;
	list<int> ilist;
	deque<int> ideq;

	randomize();
	fc(ivec, 20, [] {return rand() % 20; });
	fc(ilist, 20, [] {return rand() % 20; });
	display(ivec);
	display(ilist);

	transform(ivec.begin(), ivec.end(), ilist.begin(), back_inserter(ideq), [](int a, int b) {return a * a + b * b; });
	display(ideq);

}


//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <deque>

#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

template<typename InIter1, typename InIter2, typename OutIter, typename Func>
OutIter Transform(InIter1 beg1, InIter1 end, InIter2 beg2, OutIter destbeg, Func f)
{
	while (beg1 != end) {
		*destbeg = f(*beg1, *beg2);
		++beg1;
		++beg2;
		++destbeg;
	}

	return destbeg;
}


int main()
{
	vector<int> ivec;
	list<int> ilist;
	deque<int> ideq;

	randomize();
	fc(ivec, 20, [] {return rand() % 20; });
	fc(ilist, 20, [] {return rand() % 20; });
	display(ivec);
	display(ilist);

	transform(ivec.begin(), ivec.end(), ilist.begin(), back_inserter(ideq), [](int a, int b) {return a * a + b * b; });
	display(ideq);

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <deque>

#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

template<typename InIter1, typename InIter2, typename OutIter, typename Func>
OutIter Transform(InIter1 beg1, InIter1 end, InIter2 beg2, OutIter destbeg, Func f)
{
	while (beg1 != end) {
		*destbeg = f(*beg1, *beg2);
		++beg1;
		++beg2;
		++destbeg;
	}

	return destbeg;
}


int main()
{
	vector<string> svec;
	randomize();

	fc(svec, 20, rs);
	display(svec);
	string name;
	cout << "kim silinsin : ";
	cin >> name;

	auto iter = find(svec.begin(), svec.end(), name);
	if (iter != svec.end()) {
		svec.erase(iter);
		display(svec);
	}
	else {
		cout << "bukunamadi" << endl;
	}
}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <deque>

#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;

template<typename InIter1, typename InIter2, typename OutIter, typename Func>
OutIter Transform(InIter1 beg1, InIter1 end, InIter2 beg2, OutIter destbeg, Func f)
{
	while (beg1 != end) {
		*destbeg = f(*beg1, *beg2);
		++beg1;
		++beg2;
		++destbeg;
	}

	return destbeg;
}


int main()
{
	list<string> slist;
	randomize();

	fc(slist, 30, rs);
	display(slist);
	string name;
	cout << "kim silinsin : ";
	cin >> name;

	auto riter1 = find(slist.rbegin(), slist.rend(), name);
	if (riter1 == slist.rend()) {
		cout << "bulunamadi" << endl;
		return 0;
	}
	
	auto riter2 = find(next(riter1), slist.rend(), name);
	if (riter2 == slist.rend()) {
		cout << "bulunamadi" << endl;
		return 0;
	}
	slist.erase(prev(riter2.base()), riter1.base());

	display(slist.begin(), slist.end());

}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
#include <vector>
#include <set>
#include <list>
#include <iostream>
#include <string>
#include <deque>

#include <iterator>
#include "date.h"
#include <algorithm>
#include <forward_list>
#include "tnutil.h"
#include "nutility.h"

using namespace std;
template<typename InIter, typename OutIter>
OutIter Copy(InIter beg, InIter end, OutIter destbeg)
{
	while (beg != end) {
		*destbeg = *beg;
		++destbeg;
		++beg;
	}

	return destbeg;
}


template<typename T>
class Iter {
	std::ostream &mos;
	const char *mp;
public:
	Iter(std::ostream &os, const char *p = "") : mos{ os }, mp{ p } {}
	Iter &operator++() { return *this; }
	Iter &operator*() { return *this; }
	Iter &operator=(const T&val)
	{
		mos << val << mp;
		return *this;
	}

};

int main()
{
	vector<string> svec;
	fc(svec, 10, rs);

	Copy(svec.begin(), svec.end(), Iter<string>{cout, "\n"});
}
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


